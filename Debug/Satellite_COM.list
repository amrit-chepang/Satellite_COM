
Satellite_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c784  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  0800c8c4  0800c8c4  0000d8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d340  0800d340  0000f068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d348  0800d348  0000f068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d348  0800d348  0000e348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d34c  0800d34c  0000e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d350  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c2c  20000068  0800d3b8  0000f068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  0800d3b8  0000fc94  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002134e  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f3  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  00034bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017a4  00000000  00000000  00036aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021998  00000000  00000000  0003824c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b90  00000000  00000000  00059be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c46c2  00000000  00000000  0007b774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fe36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008560  00000000  00000000  0013fe7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001483dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c8ac 	.word	0x0800c8ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c8ac 	.word	0x0800c8ac

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	785a      	ldrb	r2, [r3, #1]
 800051c:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <updatePacket+0x60>)
 800051e:	701a      	strb	r2, [r3, #0]
	int j = 1;
 8000520:	2301      	movs	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
	int k = 3;
 8000524:	2303      	movs	r3, #3
 8000526:	613b      	str	r3, [r7, #16]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3302      	adds	r3, #2
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	60bb      	str	r3, [r7, #8]
//	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
	for (int i = 0; i < len_of_payload; i++) {
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e011      	b.n	800055a <updatePacket+0x4a>
		info_packet[j] = OBC_Rx_buffer[k];
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	7819      	ldrb	r1, [r3, #0]
 800053e:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <updatePacket+0x60>)
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	4413      	add	r3, r2
 8000544:	460a      	mov	r2, r1
 8000546:	701a      	strb	r2, [r3, #0]
		j++;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	3301      	adds	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
		k++;
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	3301      	adds	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len_of_payload; i++) {
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbe9      	blt.n	8000536 <updatePacket+0x26>
//	myDebug("info_packet: 0x%x\r\n", info_packet);
//	for (int i = 0; i < len_of_payload; i++) {
//		myDebug("%02x ", info_packet[i]);
//	}
//	myDebug("\r\n");
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	371c      	adds	r7, #28
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	200001b4 	.word	0x200001b4

08000574 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	4619      	mov	r1, r3
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 f92b 	bl	80007e4 <calculateCRC_CCITT_AX25>
 800058e:	4603      	mov	r3, r0
 8000590:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 8000592:	4b22      	ldr	r3, [pc, #136]	@ (800061c <getHDLCPacket+0xa8>)
 8000594:	227e      	movs	r2, #126	@ 0x7e
 8000596:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	e00e      	b.n	80005c0 <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	7819      	ldrb	r1, [r3, #0]
 80005aa:	4a1c      	ldr	r2, [pc, #112]	@ (800061c <getHDLCPacket+0xa8>)
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	4413      	add	r3, r2
 80005b0:	460a      	mov	r2, r1
 80005b2:	701a      	strb	r2, [r3, #0]
		i++;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	3301      	adds	r3, #1
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbec      	blt.n	80005a2 <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80005c8:	89fb      	ldrh	r3, [r7, #14]
 80005ca:	0a1b      	lsrs	r3, r3, #8
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	b2d9      	uxtb	r1, r3
 80005d0:	4a12      	ldr	r2, [pc, #72]	@ (800061c <getHDLCPacket+0xa8>)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	4413      	add	r3, r2
 80005d6:	460a      	mov	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
	i++;
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 80005e0:	89fb      	ldrh	r3, [r7, #14]
 80005e2:	b2d9      	uxtb	r1, r3
 80005e4:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <getHDLCPacket+0xa8>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	4413      	add	r3, r2
 80005ea:	460a      	mov	r2, r1
 80005ec:	701a      	strb	r2, [r3, #0]
	i++;
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3301      	adds	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 80005f4:	4a09      	ldr	r2, [pc, #36]	@ (800061c <getHDLCPacket+0xa8>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	4413      	add	r3, r2
 80005fa:	227e      	movs	r2, #126	@ 0x7e
 80005fc:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 80005fe:	2296      	movs	r2, #150	@ 0x96
 8000600:	2100      	movs	r1, #0
 8000602:	4807      	ldr	r0, [pc, #28]	@ (8000620 <getHDLCPacket+0xac>)
 8000604:	f00b fcd2 	bl	800bfac <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000608:	2296      	movs	r2, #150	@ 0x96
 800060a:	2100      	movs	r1, #0
 800060c:	4805      	ldr	r0, [pc, #20]	@ (8000624 <getHDLCPacket+0xb0>)
 800060e:	f00b fccd 	bl	800bfac <memset>

}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000814 	.word	0x20000814
 8000620:	20000084 	.word	0x20000084
 8000624:	2000011c 	.word	0x2000011c

08000628 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff6b 	bl	8000510 <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 800063a:	4b3a      	ldr	r3, [pc, #232]	@ (8000724 <getAX25Packet+0xfc>)
 800063c:	2272      	movs	r2, #114	@ 0x72
 800063e:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000640:	4b38      	ldr	r3, [pc, #224]	@ (8000724 <getAX25Packet+0xfc>)
 8000642:	229c      	movs	r2, #156	@ 0x9c
 8000644:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000646:	4b37      	ldr	r3, [pc, #220]	@ (8000724 <getAX25Packet+0xfc>)
 8000648:	2264      	movs	r2, #100	@ 0x64
 800064a:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 800064c:	4b35      	ldr	r3, [pc, #212]	@ (8000724 <getAX25Packet+0xfc>)
 800064e:	22a6      	movs	r2, #166	@ 0xa6
 8000650:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <getAX25Packet+0xfc>)
 8000654:	2264      	movs	r2, #100	@ 0x64
 8000656:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000658:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <getAX25Packet+0xfc>)
 800065a:	2240      	movs	r2, #64	@ 0x40
 800065c:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800065e:	4b31      	ldr	r3, [pc, #196]	@ (8000724 <getAX25Packet+0xfc>)
 8000660:	22e0      	movs	r2, #224	@ 0xe0
 8000662:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000664:	4b2f      	ldr	r3, [pc, #188]	@ (8000724 <getAX25Packet+0xfc>)
 8000666:	2272      	movs	r2, #114	@ 0x72
 8000668:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800066a:	4b2e      	ldr	r3, [pc, #184]	@ (8000724 <getAX25Packet+0xfc>)
 800066c:	229c      	movs	r2, #156	@ 0x9c
 800066e:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000670:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <getAX25Packet+0xfc>)
 8000672:	2264      	movs	r2, #100	@ 0x64
 8000674:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <getAX25Packet+0xfc>)
 8000678:	22a6      	movs	r2, #166	@ 0xa6
 800067a:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800067c:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <getAX25Packet+0xfc>)
 800067e:	2264      	movs	r2, #100	@ 0x64
 8000680:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000682:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <getAX25Packet+0xfc>)
 8000684:	2240      	movs	r2, #64	@ 0x40
 8000686:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000688:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <getAX25Packet+0xfc>)
 800068a:	2261      	movs	r2, #97	@ 0x61
 800068c:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800068e:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <getAX25Packet+0xfc>)
 8000690:	2203      	movs	r2, #3
 8000692:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <getAX25Packet+0xfc>)
 8000696:	22f0      	movs	r2, #240	@ 0xf0
 8000698:	73da      	strb	r2, [r3, #15]

	int i = 16;
 800069a:	2310      	movs	r3, #16
 800069c:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	e00e      	b.n	80006c2 <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 80006a4:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <getAX25Packet+0x100>)
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	4413      	add	r3, r2
 80006aa:	7819      	ldrb	r1, [r3, #0]
 80006ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000724 <getAX25Packet+0xfc>)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	4413      	add	r3, r2
 80006b2:	460a      	mov	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
		i++;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	3301      	adds	r3, #1
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbec      	blt.n	80006a4 <getAX25Packet+0x7c>
	}

//	myDebug("Before Bit stuffing:");
	myDebug("\nReal Data, Length: %d", i);
 80006ca:	6979      	ldr	r1, [r7, #20]
 80006cc:	4817      	ldr	r0, [pc, #92]	@ (800072c <getAX25Packet+0x104>)
 80006ce:	f000 f84f 	bl	8000770 <myDebug>
	myDebug("\r\n");
 80006d2:	4817      	ldr	r0, [pc, #92]	@ (8000730 <getAX25Packet+0x108>)
 80006d4:	f000 f84c 	bl	8000770 <myDebug>
	for (int j = 0; j < i; j++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e00a      	b.n	80006f4 <getAX25Packet+0xcc>
		myDebug("%02x ", ax_buffer[j]);
 80006de:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <getAX25Packet+0xfc>)
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4812      	ldr	r0, [pc, #72]	@ (8000734 <getAX25Packet+0x10c>)
 80006ea:	f000 f841 	bl	8000770 <myDebug>
	for (int j = 0; j < i; j++) {
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3301      	adds	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf0      	blt.n	80006de <getAX25Packet+0xb6>
	}
	myDebug("\r\n");
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <getAX25Packet+0x108>)
 80006fe:	f000 f837 	bl	8000770 <myDebug>

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	490c      	ldr	r1, [pc, #48]	@ (8000738 <getAX25Packet+0x110>)
 8000706:	4807      	ldr	r0, [pc, #28]	@ (8000724 <getAX25Packet+0xfc>)
 8000708:	f000 f8ab 	bl	8000862 <bit_stuffing>
 800070c:	60b8      	str	r0, [r7, #8]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	4808      	ldr	r0, [pc, #32]	@ (8000738 <getAX25Packet+0x110>)
 8000716:	f7ff ff2d 	bl	8000574 <getHDLCPacket>
}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000084 	.word	0x20000084
 8000728:	200001b4 	.word	0x200001b4
 800072c:	0800c8c4 	.word	0x0800c8c4
 8000730:	0800c8dc 	.word	0x0800c8dc
 8000734:	0800c8e0 	.word	0x0800c8e0
 8000738:	2000011c 	.word	0x2000011c

0800073c <delay_us>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void delay_us(uint32_t us) {
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <delay_us+0x30>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 800074c:	e002      	b.n	8000754 <delay_us+0x18>
		delay_counter_disp++;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <delay_us+0x30>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8f6      	bhi.n	800074e <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	200006d0 	.word	0x200006d0

08000770 <myDebug>:

void myDebug(const char *fmt, ...) {
 8000770:	b40f      	push	{r0, r1, r2, r3}
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	2164      	movs	r1, #100	@ 0x64
 8000784:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <myDebug+0x40>)
 8000786:	f00b fc03 	bl	800bf90 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800078a:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <myDebug+0x40>)
 800078c:	f000 f814 	bl	80007b8 <bufferSize>
 8000790:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	b29a      	uxth	r2, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079a:	4905      	ldr	r1, [pc, #20]	@ (80007b0 <myDebug+0x40>)
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <myDebug+0x44>)
 800079e:	f006 f9cd 	bl	8006b3c <HAL_UART_Transmit>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ac:	b004      	add	sp, #16
 80007ae:	4770      	bx	lr
 80007b0:	20000218 	.word	0x20000218
 80007b4:	20000310 	.word	0x20000310

080007b8 <bufferSize>:

int bufferSize(char *buffer) {
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	int i = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007c4:	e002      	b.n	80007cc <bufferSize+0x14>
		i++;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1f6      	bne.n	80007c6 <bufferSize+0xe>
	return i;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 80007ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f2:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80007f4:	f241 0321 	movw	r3, #4129	@ 0x1021
 80007f8:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	e026      	b.n	800084e <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b21a      	sxth	r2, r3
 800080c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000810:	4053      	eors	r3, r2
 8000812:	b21b      	sxth	r3, r3
 8000814:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e012      	b.n	8000842 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 800081c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da08      	bge.n	8000836 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b21a      	sxth	r2, r3
 800082a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800082e:	4053      	eors	r3, r2
 8000830:	b21b      	sxth	r3, r3
 8000832:	82fb      	strh	r3, [r7, #22]
 8000834:	e002      	b.n	800083c <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 8000836:	8afb      	ldrh	r3, [r7, #22]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2b07      	cmp	r3, #7
 8000846:	dde9      	ble.n	800081c <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	3301      	adds	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3d4      	bcc.n	8000800 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000856:	8afb      	ldrh	r3, [r7, #22]
}
 8000858:	4618      	mov	r0, r3
 800085a:	371c      	adds	r7, #28
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000862:	b480      	push	{r7}
 8000864:	b08f      	sub	sp, #60	@ 0x3c
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	@ 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t current_byte = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	int bit_pos = 7;
 800087c:	2307      	movs	r3, #7
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	e078      	b.n	8000980 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800088e:	2307      	movs	r3, #7
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	e06f      	b.n	8000974 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	fa42 f303 	asr.w	r3, r2, r3
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	617b      	str	r3, [r7, #20]

			//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	b25a      	sxtb	r2, r3
 80008b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			bit_pos--;
 80008c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c2:	3b01      	subs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if (bit_val) {
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d02f      	beq.n	800092c <bit_stuffing+0xca>
				bit_count++;
 80008cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008ce:	3301      	adds	r3, #1
 80008d0:	633b      	str	r3, [r7, #48]	@ 0x30
				if (bit_count == 5) {
 80008d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d12b      	bne.n	8000930 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 80008d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da10      	bge.n	8000900 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 80008de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80008e4:	461a      	mov	r2, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008ee:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	3301      	adds	r3, #1
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
						current_byte = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						bit_pos = 7;
 80008fc:	2307      	movs	r3, #7
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
					current_byte &= ~(1 << bit_pos);
 8000900:	2201      	movs	r2, #1
 8000902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	b25b      	sxtb	r3, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	b25a      	sxtb	r2, r3
 800090e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000912:	4013      	ands	r3, r2
 8000914:	b25b      	sxtb	r3, r3
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					bit_pos--;
 800091a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091c:	3b01      	subs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
					bits_stuffed++;
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	3301      	adds	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
 800092a:	e001      	b.n	8000930 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
			}

			if (bit_pos < 0) {
 8000930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000932:	2b00      	cmp	r3, #0
 8000934:	da10      	bge.n	8000958 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 8000936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	637a      	str	r2, [r7, #52]	@ 0x34
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000946:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	3301      	adds	r3, #1
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
				current_byte = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				bit_pos = 7;
 8000954:	2307      	movs	r3, #7
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	2b08      	cmp	r3, #8
 800095c:	dd07      	ble.n	800096e <bit_stuffing+0x10c>
 800095e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000960:	2b00      	cmp	r3, #0
 8000962:	db04      	blt.n	800096e <bit_stuffing+0x10c>
				stuffed_size++;
 8000964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000966:	3301      	adds	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	3b01      	subs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b00      	cmp	r3, #0
 8000978:	da8c      	bge.n	8000894 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3301      	adds	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	69fa      	ldr	r2, [r7, #28]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	db82      	blt.n	800088e <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800098a:	2b06      	cmp	r3, #6
 800098c:	dc0b      	bgt.n	80009a6 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 800098e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	637a      	str	r2, [r7, #52]	@ 0x34
 8000994:	461a      	mov	r2, r3
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	4413      	add	r3, r2
 800099a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800099e:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 80009a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a2:	3301      	adds	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index; // Return the size of output data after bit stuffing
 80009a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	373c      	adds	r7, #60	@ 0x3c
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 80009b2:	b480      	push	{r7}
 80009b4:	b08d      	sub	sp, #52	@ 0x34
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int bit_count = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t current_byte = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int bit_pos = 7;
 80009cc:	2307      	movs	r3, #7
 80009ce:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	e052      	b.n	8000a7c <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 80009d6:	2307      	movs	r3, #7
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	e049      	b.n	8000a70 <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4413      	add	r3, r2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	fa42 f303 	asr.w	r3, r2, r3
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	617b      	str	r3, [r7, #20]

			if (bit_val) {
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d011      	beq.n	8000a1c <bit_destuffing+0x6a>
				bit_count++;
 80009f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fa:	3301      	adds	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
				current_byte |= (bit_val << bit_pos);
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	b25a      	sxtb	r2, r3
 8000a08:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				bit_pos--;
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
 8000a1a:	e015      	b.n	8000a48 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d102      	bne.n	8000a28 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
					continue;
 8000a26:	e020      	b.n	8000a6a <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
					current_byte |= (bit_val << bit_pos);
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					bit_pos--;
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da0d      	bge.n	8000a6a <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000a54:	461a      	mov	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	4413      	add	r3, r2
 8000a5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000a5e:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				bit_pos = 7;
 8000a66:	2307      	movs	r3, #7
 8000a68:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dab2      	bge.n	80009dc <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	69fa      	ldr	r2, [r7, #28]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dba8      	blt.n	80009d6 <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	dc08      	bgt.n	8000a9c <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000a90:	461a      	mov	r2, r3
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	4413      	add	r3, r2
 8000a96:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000a9a:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index;
 8000a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3734      	adds	r7, #52	@ 0x34
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <check_packet_type>:

int check_packet_type(uint8_t *OBC_UART) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	uint8_t packet_type_true = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]
	switch (OBC_UART[1]) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2bb2      	cmp	r3, #178	@ 0xb2
 8000abc:	d01e      	beq.n	8000afc <check_packet_type+0x54>
 8000abe:	2bb2      	cmp	r3, #178	@ 0xb2
 8000ac0:	dc2e      	bgt.n	8000b20 <check_packet_type+0x78>
 8000ac2:	2bb1      	cmp	r3, #177	@ 0xb1
 8000ac4:	d017      	beq.n	8000af6 <check_packet_type+0x4e>
 8000ac6:	2bb1      	cmp	r3, #177	@ 0xb1
 8000ac8:	dc2a      	bgt.n	8000b20 <check_packet_type+0x78>
 8000aca:	2b0d      	cmp	r3, #13
 8000acc:	dc10      	bgt.n	8000af0 <check_packet_type+0x48>
 8000ace:	2b0a      	cmp	r3, #10
 8000ad0:	db26      	blt.n	8000b20 <check_packet_type+0x78>
 8000ad2:	3b0a      	subs	r3, #10
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d823      	bhi.n	8000b20 <check_packet_type+0x78>
 8000ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <check_packet_type+0x38>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	08000b0f 	.word	0x08000b0f
 8000ae8:	08000b15 	.word	0x08000b15
 8000aec:	08000b1b 	.word	0x08000b1b
 8000af0:	2bac      	cmp	r3, #172	@ 0xac
 8000af2:	d006      	beq.n	8000b02 <check_packet_type+0x5a>
 8000af4:	e014      	b.n	8000b20 <check_packet_type+0x78>

	case 0xb1:						// beacon_type_1
		packet_type_true = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
		break;
 8000afa:	e013      	b.n	8000b24 <check_packet_type+0x7c>

	case 0xb2:						// beacon_type_2
		packet_type_true = 1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
		break;
 8000b00:	e010      	b.n	8000b24 <check_packet_type+0x7c>

	case 0xac:						// ack
		packet_type_true = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
		break;
 8000b06:	e00d      	b.n	8000b24 <check_packet_type+0x7c>

	case 0x0a:						// digipeater packet
		packet_type_true = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
		break;
 8000b0c:	e00a      	b.n	8000b24 <check_packet_type+0x7c>

	case 0x0b:						// epdm
		packet_type_true = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
		break;
 8000b12:	e007      	b.n	8000b24 <check_packet_type+0x7c>

	case 0x0c:						// camera
		packet_type_true = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
		break;
 8000b18:	e004      	b.n	8000b24 <check_packet_type+0x7c>

	case 0x0d:						// adcs
		packet_type_true = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
		break;
 8000b1e:	e001      	b.n	8000b24 <check_packet_type+0x7c>

	default:
		packet_type_true = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
	}

	return packet_type_true;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b54:	68fb      	ldr	r3, [r7, #12]
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a38      	ldr	r2, [pc, #224]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d167      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0xe0>

		mSEC++;
 8000ba0:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a36      	ldr	r2, [pc, #216]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ba8:	6013      	str	r3, [r2, #0]

		if (mSEC > 999) {
 8000baa:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bb2:	d30c      	bcc.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x3e>
			sec++;
 8000bb4:	4b33      	ldr	r3, [pc, #204]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a32      	ldr	r2, [pc, #200]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000bbc:	6013      	str	r3, [r2, #0]
			count++;
 8000bbe:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a30      	ldr	r2, [pc, #192]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000bc6:	6013      	str	r3, [r2, #0]
			mSEC = 0;
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
		}

		if (sec > 60) {
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b3c      	cmp	r3, #60	@ 0x3c
 8000bd4:	d907      	bls.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x56>
			min++;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000bde:	6013      	str	r3, [r2, #0]
			sec = 0;
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
		}

		if (count == 1) {
 8000be6:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d140      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0xe0>
			count = 0;
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]

			OBC_UART_RX[0] = 0x53;	//header
 8000bf4:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bf6:	2253      	movs	r2, #83	@ 0x53
 8000bf8:	701a      	strb	r2, [r3, #0]
			OBC_UART_RX[1] = 0x0a;	//packet_ type
 8000bfa:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	705a      	strb	r2, [r3, #1]
			OBC_UART_RX[2] = 0x51;	//length of info
 8000c00:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c02:	2251      	movs	r2, #81	@ 0x51
 8000c04:	709a      	strb	r2, [r3, #2]

			int j = 3;
 8000c06:	2303      	movs	r3, #3
 8000c08:	60fb      	str	r3, [r7, #12]
			for (int i = 1; i < 80; i++) {
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	e00c      	b.n	8000c2a <HAL_TIM_PeriodElapsedCallback+0x9a>
				OBC_UART_RX[j] = i;
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	b2d9      	uxtb	r1, r3
 8000c14:	4a1e      	ldr	r2, [pc, #120]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	460a      	mov	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
				j++;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
			for (int i = 1; i < 80; i++) {
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	3301      	adds	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b4f      	cmp	r3, #79	@ 0x4f
 8000c2e:	ddef      	ble.n	8000c10 <HAL_TIM_PeriodElapsedCallback+0x80>
			}

			static int k = 0;

			OBC_UART_RX[j] = k;	//mcu_no
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b2d9      	uxtb	r1, r3
 8000c36:	4a16      	ldr	r2, [pc, #88]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
			k++;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a13      	ldr	r2, [pc, #76]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c48:	6013      	str	r3, [r2, #0]
			OBC_UART_RX[j + 1] = 0x00;	// packet error
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a10      	ldr	r2, [pc, #64]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	54d1      	strb	r1, [r2, r3]

			obc_ilen = OBC_UART_RX[2];
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c56:	789a      	ldrb	r2, [r3, #2]
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c5a:	701a      	strb	r2, [r3, #0]

			if (k == 10) {
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b0a      	cmp	r3, #10
 8000c62:	d102      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0xda>
				k = 0;
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
			}

			OBC_SUCCESS_DATA_RX_FLAG = 1;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000684 	.word	0x20000684
 8000c80:	20000960 	.word	0x20000960
 8000c84:	20000964 	.word	0x20000964
 8000c88:	2000096c 	.word	0x2000096c
 8000c8c:	20000968 	.word	0x20000968
 8000c90:	200007b8 	.word	0x200007b8
 8000c94:	20000974 	.word	0x20000974
 8000c98:	200007b6 	.word	0x200007b6
 8000c9c:	20000810 	.word	0x20000810

08000ca0 <countsDataBetweenFlags>:

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	e013      	b.n	8000ce4 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b7e      	cmp	r3, #126	@ 0x7e
 8000cc6:	d10a      	bne.n	8000cde <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d104      	bne.n	8000cd8 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e002      	b.n	8000cde <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60fb      	str	r3, [r7, #12]
				break;
 8000cdc:	e006      	b.n	8000cec <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbe7      	blt.n	8000cbc <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dd04      	ble.n	8000cfe <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	e001      	b.n	8000d02 <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	371c      	adds	r7, #28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <setPacketParams+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d5c <setPacketParams+0x50>)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <setPacketParams+0x50>)
 8000d24:	2208      	movs	r2, #8
 8000d26:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <setPacketParams+0x50>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <setPacketParams+0x50>)
 8000d30:	2218      	movs	r2, #24
 8000d32:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <setPacketParams+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <setPacketParams+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <setPacketParams+0x50>)
 8000d42:	22f2      	movs	r2, #242	@ 0xf2
 8000d44:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <setPacketParams+0x50>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <setPacketParams+0x50>)
 8000d4e:	f00a f907 	bl	800af60 <SUBGRF_SetPacketParams>

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000071c 	.word	0x2000071c

08000d60 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <setModulationParams+0x38>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <setModulationParams+0x38>)
 8000d72:	220d      	movs	r2, #13
 8000d74:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <setModulationParams+0x38>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	@ (8000d98 <setModulationParams+0x38>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <setModulationParams+0x38>)
 8000d84:	220b      	movs	r2, #11
 8000d86:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <setModulationParams+0x38>)
 8000d8a:	f00a f817 	bl	800adbc <SUBGRF_SetModulationParams>

}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000730 	.word	0x20000730

08000d9c <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000da8:	2100      	movs	r1, #0
 8000daa:	2000      	movs	r0, #0
 8000dac:	f00a f976 	bl	800b09c <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	4619      	mov	r1, r3
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f009 fb57 	bl	800a468 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000dba:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <radioConfig+0x74>)
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f009 fb90 	bl	800a4f2 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000dd2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8000dd6:	f009 fbdb 	bl	800a590 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2100      	movs	r1, #0
 8000de0:	2007      	movs	r0, #7
 8000de2:	f009 fe33 	bl	800aa4c <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000de6:	2202      	movs	r2, #2
 8000de8:	210e      	movs	r1, #14
 8000dea:	2001      	movs	r0, #1
 8000dec:	f009 ff18 	bl	800ac20 <SUBGRF_SetTxParams>

	SUBGRF_Init(DioIrqHndlr);
 8000df0:	4808      	ldr	r0, [pc, #32]	@ (8000e14 <radioConfig+0x78>)
 8000df2:	f009 fae7 	bl	800a3c4 <SUBGRF_Init>
	SUBGRF_SetDioIrqParams(
 8000df6:	2300      	movs	r3, #0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f240 210f 	movw	r1, #527	@ 0x20f
 8000dfe:	f240 200f 	movw	r0, #527	@ 0x20f
 8000e02:	f009 fe45 	bl	800aa90 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800c8e8 	.word	0x0800c8e8
 8000e14:	08001b01 	.word	0x08001b01

08000e18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a98      	ldr	r2, [pc, #608]	@ (8001084 <HAL_UART_RxCpltCallback+0x26c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d008      	beq.n	8000e3a <HAL_UART_RxCpltCallback+0x22>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a97      	ldr	r2, [pc, #604]	@ (8001088 <HAL_UART_RxCpltCallback+0x270>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d004      	beq.n	8000e3a <HAL_UART_RxCpltCallback+0x22>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a96      	ldr	r2, [pc, #600]	@ (800108c <HAL_UART_RxCpltCallback+0x274>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	f040 8215 	bne.w	8001264 <HAL_UART_RxCpltCallback+0x44c>

		if (OBC_HANDSHAKE_FLAG) {
 8000e3a:	4b95      	ldr	r3, [pc, #596]	@ (8001090 <HAL_UART_RxCpltCallback+0x278>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8210 	beq.w	8001264 <HAL_UART_RxCpltCallback+0x44c>

			uint8_t header = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	72fb      	strb	r3, [r7, #11]

			if (OBC_UART_RX[0] == header || OBC_UART_RX[0] != 0x53) {
 8000e48:	4b92      	ldr	r3, [pc, #584]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	7afa      	ldrb	r2, [r7, #11]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d003      	beq.n	8000e5a <HAL_UART_RxCpltCallback+0x42>
 8000e52:	4b90      	ldr	r3, [pc, #576]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b53      	cmp	r3, #83	@ 0x53
 8000e58:	d011      	beq.n	8000e7e <HAL_UART_RxCpltCallback+0x66>

				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e00b      	b.n	8000e78 <HAL_UART_RxCpltCallback+0x60>
					OBC_UART_RX[loop1] = OBC_UART_RX[loop1 + 1];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a8b      	ldr	r2, [pc, #556]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000e66:	5cd1      	ldrb	r1, [r2, r3]
 8000e68:	4a8a      	ldr	r2, [pc, #552]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	460a      	mov	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b54      	cmp	r3, #84	@ 0x54
 8000e7c:	d9f0      	bls.n	8000e60 <HAL_UART_RxCpltCallback+0x48>
				}
			}

			packet_type_true = check_packet_type(OBC_UART_RX);
 8000e7e:	4885      	ldr	r0, [pc, #532]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000e80:	f7ff fe12 	bl	8000aa8 <check_packet_type>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a84      	ldr	r2, [pc, #528]	@ (8001098 <HAL_UART_RxCpltCallback+0x280>)
 8000e88:	6013      	str	r3, [r2, #0]

			if (packet_type_true) {
 8000e8a:	4b83      	ldr	r3, [pc, #524]	@ (8001098 <HAL_UART_RxCpltCallback+0x280>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 819d 	beq.w	80011ce <HAL_UART_RxCpltCallback+0x3b6>

				if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 8000e94:	4b81      	ldr	r3, [pc, #516]	@ (800109c <HAL_UART_RxCpltCallback+0x284>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	f040 813d 	bne.w	8001118 <HAL_UART_RxCpltCallback+0x300>
 8000e9e:	4b80      	ldr	r3, [pc, #512]	@ (80010a0 <HAL_UART_RxCpltCallback+0x288>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 8138 	bne.w	8001118 <HAL_UART_RxCpltCallback+0x300>
						&& DIGIPEATER_RX_FLAG == 1) {
 8000ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80010a4 <HAL_UART_RxCpltCallback+0x28c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f040 8133 	bne.w	8001118 <HAL_UART_RxCpltCallback+0x300>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8000eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80010a8 <HAL_UART_RxCpltCallback+0x290>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8000eb8:	4b76      	ldr	r3, [pc, #472]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b53      	cmp	r3, #83	@ 0x53
 8000ebe:	f040 80a1 	bne.w	8001004 <HAL_UART_RxCpltCallback+0x1ec>
 8000ec2:	4b74      	ldr	r3, [pc, #464]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000ec4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8000ec8:	2b7e      	cmp	r3, #126	@ 0x7e
 8000eca:	f040 809b 	bne.w	8001004 <HAL_UART_RxCpltCallback+0x1ec>
						myDebug(
 8000ece:	4877      	ldr	r0, [pc, #476]	@ (80010ac <HAL_UART_RxCpltCallback+0x294>)
 8000ed0:	f7ff fc4e 	bl	8000770 <myDebug>
								"--> Correct Digipeater Data received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8000ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000ed6:	789a      	ldrb	r2, [r3, #2]
 8000ed8:	4b75      	ldr	r3, [pc, #468]	@ (80010b0 <HAL_UART_RxCpltCallback+0x298>)
 8000eda:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8000edc:	4b6d      	ldr	r3, [pc, #436]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000ede:	785a      	ldrb	r2, [r3, #1]
 8000ee0:	4b74      	ldr	r3, [pc, #464]	@ (80010b4 <HAL_UART_RxCpltCallback+0x29c>)
 8000ee2:	701a      	strb	r2, [r3, #0]
						DIGIPEATER_FLAG = 1;
 8000ee4:	4b74      	ldr	r3, [pc, #464]	@ (80010b8 <HAL_UART_RxCpltCallback+0x2a0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

						getAX25Packet(OBC_UART_RX, obc_ilen);
 8000eea:	4b71      	ldr	r3, [pc, #452]	@ (80010b0 <HAL_UART_RxCpltCallback+0x298>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4868      	ldr	r0, [pc, #416]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000ef2:	f7ff fb99 	bl	8000628 <getAX25Packet>

						tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000ef6:	2196      	movs	r1, #150	@ 0x96
 8000ef8:	4870      	ldr	r0, [pc, #448]	@ (80010bc <HAL_UART_RxCpltCallback+0x2a4>)
 8000efa:	f7ff fed1 	bl	8000ca0 <countsDataBetweenFlags>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a6f      	ldr	r2, [pc, #444]	@ (80010c0 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f02:	6013      	str	r3, [r2, #0]
								sizeof(temp_tx_buffer));

//						myDebug(		"Digipeater Packet complete, ready to TX: 0x%x\r\n", temp_tx_buffer);
						for (int j = 0; j < tx_buffer_len; j++) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	e00b      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x10a>
							tx_buffer[j] = temp_tx_buffer[j];
 8000f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80010bc <HAL_UART_RxCpltCallback+0x2a4>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4413      	add	r3, r2
 8000f10:	7819      	ldrb	r1, [r3, #0]
 8000f12:	4a6c      	ldr	r2, [pc, #432]	@ (80010c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	4413      	add	r3, r2
 8000f18:	460a      	mov	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < tx_buffer_len; j++) {
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	4b67      	ldr	r3, [pc, #412]	@ (80010c0 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbee      	blt.n	8000f0a <HAL_UART_RxCpltCallback+0xf2>
//							myDebug("%02x ", tx_buffer[j]);
						}
//						myDebug("\r\n");
//						myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

						memset(OBC_UART_RX, '\0', obc_ilen);
 8000f2c:	4b60      	ldr	r3, [pc, #384]	@ (80010b0 <HAL_UART_RxCpltCallback+0x298>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	4857      	ldr	r0, [pc, #348]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8000f36:	f00b f839 	bl	800bfac <memset>
						memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8000f3a:	2296      	movs	r2, #150	@ 0x96
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	485f      	ldr	r0, [pc, #380]	@ (80010bc <HAL_UART_RxCpltCallback+0x2a4>)
 8000f40:	f00b f834 	bl	800bfac <memset>

						delay_us(500000);
 8000f44:	4860      	ldr	r0, [pc, #384]	@ (80010c8 <HAL_UART_RxCpltCallback+0x2b0>)
 8000f46:	f7ff fbf9 	bl	800073c <delay_us>

						setPacketParams(tx_buffer_len);
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80010c0 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fedb 	bl	8000d0c <setPacketParams>
						setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8000f56:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000f5a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000f5e:	f7ff feff 	bl	8000d60 <setModulationParams>
						radioConfig(tx_buffer, tx_buffer_len);
 8000f62:	4b57      	ldr	r3, [pc, #348]	@ (80010c0 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4856      	ldr	r0, [pc, #344]	@ (80010c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8000f6c:	f7ff ff16 	bl	8000d9c <radioConfig>

						myDebug("\n########## TX Configuration: ##########\n");
 8000f70:	4856      	ldr	r0, [pc, #344]	@ (80010cc <HAL_UART_RxCpltCallback+0x2b4>)
 8000f72:	f7ff fbfd 	bl	8000770 <myDebug>

						myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 8000f76:	4956      	ldr	r1, [pc, #344]	@ (80010d0 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f78:	4856      	ldr	r0, [pc, #344]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2bc>)
 8000f7a:	f7ff fbf9 	bl	8000770 <myDebug>
						FREQ_437_MHZ);
						myDebug("Bit Rate: 	%d\n\r",
 8000f7e:	4b56      	ldr	r3, [pc, #344]	@ (80010d8 <HAL_UART_RxCpltCallback+0x2c0>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4855      	ldr	r0, [pc, #340]	@ (80010dc <HAL_UART_RxCpltCallback+0x2c4>)
 8000f86:	f7ff fbf3 	bl	8000770 <myDebug>
								mod_params.Params.Gfsk.BitRate);
						myDebug("Frequency Deviation: 	%d\n\r",
 8000f8a:	4b53      	ldr	r3, [pc, #332]	@ (80010d8 <HAL_UART_RxCpltCallback+0x2c0>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4853      	ldr	r0, [pc, #332]	@ (80010e0 <HAL_UART_RxCpltCallback+0x2c8>)
 8000f92:	f7ff fbed 	bl	8000770 <myDebug>
								mod_params.Params.Gfsk.Fdev);
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
								mod_params.Params.Gfsk.Bandwidth);
 8000f96:	4b50      	ldr	r3, [pc, #320]	@ (80010d8 <HAL_UART_RxCpltCallback+0x2c0>)
 8000f98:	7b5b      	ldrb	r3, [r3, #13]
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4851      	ldr	r0, [pc, #324]	@ (80010e4 <HAL_UART_RxCpltCallback+0x2cc>)
 8000f9e:	f7ff fbe7 	bl	8000770 <myDebug>
						myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000fa2:	4b51      	ldr	r3, [pc, #324]	@ (80010e8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4850      	ldr	r0, [pc, #320]	@ (80010ec <HAL_UART_RxCpltCallback+0x2d4>)
 8000faa:	f7ff fbe1 	bl	8000770 <myDebug>
						myDebug("PayloadLength 			%d\n\r",
								pkt_params.Params.Gfsk.PayloadLength);
 8000fae:	4b4e      	ldr	r3, [pc, #312]	@ (80010e8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fb0:	7a1b      	ldrb	r3, [r3, #8]
						myDebug("PayloadLength 			%d\n\r",
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	484e      	ldr	r0, [pc, #312]	@ (80010f0 <HAL_UART_RxCpltCallback+0x2d8>)
 8000fb6:	f7ff fbdb 	bl	8000770 <myDebug>
						myDebug("PreambleLength 		%d\n\r",
								pkt_params.Params.Gfsk.PreambleLength);
 8000fba:	4b4b      	ldr	r3, [pc, #300]	@ (80010e8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fbc:	885b      	ldrh	r3, [r3, #2]
						myDebug("PreambleLength 		%d\n\r",
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	484c      	ldr	r0, [pc, #304]	@ (80010f4 <HAL_UART_RxCpltCallback+0x2dc>)
 8000fc2:	f7ff fbd5 	bl	8000770 <myDebug>
						myDebug("PreambleMinDetect		%d\n\r",
								pkt_params.Params.Gfsk.PreambleMinDetect);
 8000fc6:	4b48      	ldr	r3, [pc, #288]	@ (80010e8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fc8:	791b      	ldrb	r3, [r3, #4]
						myDebug("PreambleMinDetect		%d\n\r",
 8000fca:	4619      	mov	r1, r3
 8000fcc:	484a      	ldr	r0, [pc, #296]	@ (80010f8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000fce:	f7ff fbcf 	bl	8000770 <myDebug>
						myDebug("HeaderType 			%d\n\r",
								pkt_params.Params.Gfsk.HeaderType);
 8000fd2:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fd4:	79db      	ldrb	r3, [r3, #7]
						myDebug("HeaderType 			%d\n\r",
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4848      	ldr	r0, [pc, #288]	@ (80010fc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fda:	f7ff fbc9 	bl	8000770 <myDebug>
						myDebug("__________*******************__________\r\n");
 8000fde:	4848      	ldr	r0, [pc, #288]	@ (8001100 <HAL_UART_RxCpltCallback+0x2e8>)
 8000fe0:	f7ff fbc6 	bl	8000770 <myDebug>

						SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000fe4:	483a      	ldr	r0, [pc, #232]	@ (80010d0 <HAL_UART_RxCpltCallback+0x2b8>)
 8000fe6:	f009 fdaf 	bl	800ab48 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000fea:	2101      	movs	r1, #1
 8000fec:	2001      	movs	r0, #1
 8000fee:	f00a f9f3 	bl	800b3d8 <SUBGRF_SetSwitch>
						SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8000ff2:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4831      	ldr	r0, [pc, #196]	@ (80010c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8000ffe:	f009 fa65 	bl	800a4cc <SUBGRF_SendPayload>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001002:	e120      	b.n	8001246 <HAL_UART_RxCpltCallback+0x42e>

					} else {
						myDebug(
 8001004:	483f      	ldr	r0, [pc, #252]	@ (8001104 <HAL_UART_RxCpltCallback+0x2ec>)
 8001006:	f7ff fbb3 	bl	8000770 <myDebug>
								"*** Incorrect Digipeater Data received from OBC\n");
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 800100a:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <HAL_UART_RxCpltCallback+0x2f0>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001014:	491f      	ldr	r1, [pc, #124]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8001016:	481b      	ldr	r0, [pc, #108]	@ (8001084 <HAL_UART_RxCpltCallback+0x26c>)
 8001018:	f005 fd90 	bl	8006b3c <HAL_UART_Transmit>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00c      	beq.n	800103c <HAL_UART_RxCpltCallback+0x224>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001022:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <HAL_UART_RxCpltCallback+0x2f0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800102c:	4919      	ldr	r1, [pc, #100]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 800102e:	4816      	ldr	r0, [pc, #88]	@ (8001088 <HAL_UART_RxCpltCallback+0x270>)
 8001030:	f005 fd84 	bl	8006b3c <HAL_UART_Transmit>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 8105 	bne.w	8001246 <HAL_UART_RxCpltCallback+0x42e>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 800103c:	2155      	movs	r1, #85	@ 0x55
 800103e:	4833      	ldr	r0, [pc, #204]	@ (800110c <HAL_UART_RxCpltCallback+0x2f4>)
 8001040:	f7ff fb96 	bl	8000770 <myDebug>
									"*** Incorrect Digipeater Data re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e00a      	b.n	8001060 <HAL_UART_RxCpltCallback+0x248>
								myDebug("%02x ", OBC_UART_RX[i]);
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	482e      	ldr	r0, [pc, #184]	@ (8001110 <HAL_UART_RxCpltCallback+0x2f8>)
 8001056:	f7ff fb8b 	bl	8000770 <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2b54      	cmp	r3, #84	@ 0x54
 8001064:	d9f1      	bls.n	800104a <HAL_UART_RxCpltCallback+0x232>
							}

							myDebug("\r\n");
 8001066:	482b      	ldr	r0, [pc, #172]	@ (8001114 <HAL_UART_RxCpltCallback+0x2fc>)
 8001068:	f7ff fb82 	bl	8000770 <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 800106c:	2255      	movs	r2, #85	@ 0x55
 800106e:	2100      	movs	r1, #0
 8001070:	4808      	ldr	r0, [pc, #32]	@ (8001094 <HAL_UART_RxCpltCallback+0x27c>)
 8001072:	f00a ff9b 	bl	800bfac <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_UART_RxCpltCallback+0x290>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_UART_RxCpltCallback+0x2a0>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001082:	e0e0      	b.n	8001246 <HAL_UART_RxCpltCallback+0x42e>
 8001084:	200003a4 	.word	0x200003a4
 8001088:	2000027c 	.word	0x2000027c
 800108c:	20000310 	.word	0x20000310
 8001090:	20000948 	.word	0x20000948
 8001094:	200007b8 	.word	0x200007b8
 8001098:	2000095c 	.word	0x2000095c
 800109c:	2000094c 	.word	0x2000094c
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000958 	.word	0x20000958
 80010a8:	20000810 	.word	0x20000810
 80010ac:	0800c8f0 	.word	0x0800c8f0
 80010b0:	200007b6 	.word	0x200007b6
 80010b4:	20000950 	.word	0x20000950
 80010b8:	20000954 	.word	0x20000954
 80010bc:	20000814 	.word	0x20000814
 80010c0:	20000944 	.word	0x20000944
 80010c4:	200008ac 	.word	0x200008ac
 80010c8:	0007a120 	.word	0x0007a120
 80010cc:	0800c920 	.word	0x0800c920
 80010d0:	1a11d018 	.word	0x1a11d018
 80010d4:	0800c94c 	.word	0x0800c94c
 80010d8:	20000730 	.word	0x20000730
 80010dc:	0800c974 	.word	0x0800c974
 80010e0:	0800c984 	.word	0x0800c984
 80010e4:	0800c9a0 	.word	0x0800c9a0
 80010e8:	2000071c 	.word	0x2000071c
 80010ec:	0800c9bc 	.word	0x0800c9bc
 80010f0:	0800c9d0 	.word	0x0800c9d0
 80010f4:	0800c9e8 	.word	0x0800c9e8
 80010f8:	0800ca00 	.word	0x0800ca00
 80010fc:	0800ca18 	.word	0x0800ca18
 8001100:	0800ca2c 	.word	0x0800ca2c
 8001104:	0800ca58 	.word	0x0800ca58
 8001108:	20000001 	.word	0x20000001
 800110c:	0800ca8c 	.word	0x0800ca8c
 8001110:	0800cacc 	.word	0x0800cacc
 8001114:	0800cad4 	.word	0x0800cad4
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[(83)] == 0x7E) {
 8001118:	4b54      	ldr	r3, [pc, #336]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b53      	cmp	r3, #83	@ 0x53
 800111e:	d11a      	bne.n	8001156 <HAL_UART_RxCpltCallback+0x33e>
 8001120:	4b52      	ldr	r3, [pc, #328]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 8001122:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8001126:	2b7e      	cmp	r3, #126	@ 0x7e
 8001128:	d115      	bne.n	8001156 <HAL_UART_RxCpltCallback+0x33e>
//						myDebug("--> Correct command received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 800112a:	4b50      	ldr	r3, [pc, #320]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 800112c:	789a      	ldrb	r2, [r3, #2]
 800112e:	4b50      	ldr	r3, [pc, #320]	@ (8001270 <HAL_UART_RxCpltCallback+0x458>)
 8001130:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8001132:	4b4e      	ldr	r3, [pc, #312]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 8001134:	785a      	ldrb	r2, [r3, #1]
 8001136:	4b4f      	ldr	r3, [pc, #316]	@ (8001274 <HAL_UART_RxCpltCallback+0x45c>)
 8001138:	701a      	strb	r2, [r3, #0]

						if (PACKET_TYPE == 0xB1) {
 800113a:	4b4e      	ldr	r3, [pc, #312]	@ (8001274 <HAL_UART_RxCpltCallback+0x45c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2bb1      	cmp	r3, #177	@ 0xb1
 8001140:	d105      	bne.n	800114e <HAL_UART_RxCpltCallback+0x336>
							BEACON_COUNT = 2;
 8001142:	4b4d      	ldr	r3, [pc, #308]	@ (8001278 <HAL_UART_RxCpltCallback+0x460>)
 8001144:	2202      	movs	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
							COUNT_BEACON = 2;
 8001148:	4b4c      	ldr	r3, [pc, #304]	@ (800127c <HAL_UART_RxCpltCallback+0x464>)
 800114a:	2202      	movs	r2, #2
 800114c:	601a      	str	r2, [r3, #0]
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 800114e:	4b4c      	ldr	r3, [pc, #304]	@ (8001280 <HAL_UART_RxCpltCallback+0x468>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e078      	b.n	8001248 <HAL_UART_RxCpltCallback+0x430>
					} else {
						myDebug("*** Incorrect command received from OBC\n");
 8001156:	484b      	ldr	r0, [pc, #300]	@ (8001284 <HAL_UART_RxCpltCallback+0x46c>)
 8001158:	f7ff fb0a 	bl	8000770 <myDebug>
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 800115c:	4b4a      	ldr	r3, [pc, #296]	@ (8001288 <HAL_UART_RxCpltCallback+0x470>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001166:	4941      	ldr	r1, [pc, #260]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 8001168:	4848      	ldr	r0, [pc, #288]	@ (800128c <HAL_UART_RxCpltCallback+0x474>)
 800116a:	f005 fce7 	bl	8006b3c <HAL_UART_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <HAL_UART_RxCpltCallback+0x374>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001174:	4b44      	ldr	r3, [pc, #272]	@ (8001288 <HAL_UART_RxCpltCallback+0x470>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800117e:	493b      	ldr	r1, [pc, #236]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 8001180:	4843      	ldr	r0, [pc, #268]	@ (8001290 <HAL_UART_RxCpltCallback+0x478>)
 8001182:	f005 fcdb 	bl	8006b3c <HAL_UART_Transmit>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d15d      	bne.n	8001248 <HAL_UART_RxCpltCallback+0x430>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 800118c:	2155      	movs	r1, #85	@ 0x55
 800118e:	4841      	ldr	r0, [pc, #260]	@ (8001294 <HAL_UART_RxCpltCallback+0x47c>)
 8001190:	f7ff faee 	bl	8000770 <myDebug>
									"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	e00a      	b.n	80011b0 <HAL_UART_RxCpltCallback+0x398>
								myDebug("%02x ", OBC_UART_RX[i]);
 800119a:	4a34      	ldr	r2, [pc, #208]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	483c      	ldr	r0, [pc, #240]	@ (8001298 <HAL_UART_RxCpltCallback+0x480>)
 80011a6:	f7ff fae3 	bl	8000770 <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3301      	adds	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	2b54      	cmp	r3, #84	@ 0x54
 80011b4:	d9f1      	bls.n	800119a <HAL_UART_RxCpltCallback+0x382>
							}

							myDebug("\r\n");
 80011b6:	4839      	ldr	r0, [pc, #228]	@ (800129c <HAL_UART_RxCpltCallback+0x484>)
 80011b8:	f7ff fada 	bl	8000770 <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80011bc:	2255      	movs	r2, #85	@ 0x55
 80011be:	2100      	movs	r1, #0
 80011c0:	482a      	ldr	r0, [pc, #168]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 80011c2:	f00a fef3 	bl	800bfac <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <HAL_UART_RxCpltCallback+0x468>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e03c      	b.n	8001248 <HAL_UART_RxCpltCallback+0x430>
						}
					}
				}
			} else {
				myDebug("*** Incorrect packet type received from OBC\n");
 80011ce:	4834      	ldr	r0, [pc, #208]	@ (80012a0 <HAL_UART_RxCpltCallback+0x488>)
 80011d0:	f7ff face 	bl	8000770 <myDebug>

				if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 1000)
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <HAL_UART_RxCpltCallback+0x470>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	4923      	ldr	r1, [pc, #140]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 80011e0:	482a      	ldr	r0, [pc, #168]	@ (800128c <HAL_UART_RxCpltCallback+0x474>)
 80011e2:	f005 fcab 	bl	8006b3c <HAL_UART_Transmit>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <HAL_UART_RxCpltCallback+0x3ec>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX, obc_plen,
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <HAL_UART_RxCpltCallback+0x470>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f6:	491d      	ldr	r1, [pc, #116]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 80011f8:	4825      	ldr	r0, [pc, #148]	@ (8001290 <HAL_UART_RxCpltCallback+0x478>)
 80011fa:	f005 fc9f 	bl	8006b3c <HAL_UART_Transmit>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d121      	bne.n	8001248 <HAL_UART_RxCpltCallback+0x430>
								1000) == HAL_OK) {
					myDebug(
 8001204:	2155      	movs	r1, #85	@ 0x55
 8001206:	4823      	ldr	r0, [pc, #140]	@ (8001294 <HAL_UART_RxCpltCallback+0x47c>)
 8001208:	f7ff fab2 	bl	8000770 <myDebug>
							"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
							sizeof(OBC_UART_RX));

					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e00a      	b.n	8001228 <HAL_UART_RxCpltCallback+0x410>
						myDebug("%02x ", OBC_UART_RX[i]);
 8001212:	4a16      	ldr	r2, [pc, #88]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	481e      	ldr	r0, [pc, #120]	@ (8001298 <HAL_UART_RxCpltCallback+0x480>)
 800121e:	f7ff faa7 	bl	8000770 <myDebug>
					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b54      	cmp	r3, #84	@ 0x54
 800122c:	d9f1      	bls.n	8001212 <HAL_UART_RxCpltCallback+0x3fa>
					}

					myDebug("\r\n");
 800122e:	481b      	ldr	r0, [pc, #108]	@ (800129c <HAL_UART_RxCpltCallback+0x484>)
 8001230:	f7ff fa9e 	bl	8000770 <myDebug>

					memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001234:	2255      	movs	r2, #85	@ 0x55
 8001236:	2100      	movs	r1, #0
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 800123a:	f00a feb7 	bl	800bfac <memset>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <HAL_UART_RxCpltCallback+0x468>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e000      	b.n	8001248 <HAL_UART_RxCpltCallback+0x430>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001246:	bf00      	nop
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_UART_RxCpltCallback+0x470>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4907      	ldr	r1, [pc, #28]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 8001250:	480e      	ldr	r0, [pc, #56]	@ (800128c <HAL_UART_RxCpltCallback+0x474>)
 8001252:	f005 fdbd 	bl	8006dd0 <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_UART_RxCpltCallback+0x470>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	4903      	ldr	r1, [pc, #12]	@ (800126c <HAL_UART_RxCpltCallback+0x454>)
 800125e:	480c      	ldr	r0, [pc, #48]	@ (8001290 <HAL_UART_RxCpltCallback+0x478>)
 8001260:	f005 fdb6 	bl	8006dd0 <HAL_UART_Receive_DMA>
		}
	}
}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200007b8 	.word	0x200007b8
 8001270:	200007b6 	.word	0x200007b6
 8001274:	20000950 	.word	0x20000950
 8001278:	20000004 	.word	0x20000004
 800127c:	20000008 	.word	0x20000008
 8001280:	20000810 	.word	0x20000810
 8001284:	0800cad8 	.word	0x0800cad8
 8001288:	20000001 	.word	0x20000001
 800128c:	200003a4 	.word	0x200003a4
 8001290:	2000027c 	.word	0x2000027c
 8001294:	0800cb04 	.word	0x0800cb04
 8001298:	0800cacc 	.word	0x0800cacc
 800129c:	0800cad4 	.word	0x0800cad4
 80012a0:	0800cb3c 	.word	0x0800cb3c

080012a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012aa:	f002 f8e7 	bl	800347c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012ae:	f000 f99b 	bl	80015e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012b2:	f000 fbcb 	bl	8001a4c <MX_GPIO_Init>
	MX_DMA_Init();
 80012b6:	f000 fb8f 	bl	80019d8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80012ba:	f000 fa8d 	bl	80017d8 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 80012be:	f000 f9f3 	bl	80016a8 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 80012c2:	f000 fa3d 	bl	8001740 <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 80012c6:	f00a fac6 	bl	800b856 <MX_SubGHz_Phy_Init>
	MX_TIM2_Init();
 80012ca:	f000 fb37 	bl	800193c <MX_TIM2_Init>
	MX_TIM1_Init();
 80012ce:	f000 fae1 	bl	8001894 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 80012d2:	489c      	ldr	r0, [pc, #624]	@ (8001544 <main+0x2a0>)
 80012d4:	f004 ff84 	bl	80061e0 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 80012d8:	489b      	ldr	r0, [pc, #620]	@ (8001548 <main+0x2a4>)
 80012da:	f7ff fa49 	bl	8000770 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 80012de:	489b      	ldr	r0, [pc, #620]	@ (800154c <main+0x2a8>)
 80012e0:	f7ff fa46 	bl	8000770 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 80012e4:	489a      	ldr	r0, [pc, #616]	@ (8001550 <main+0x2ac>)
 80012e6:	f7ff fa43 	bl	8000770 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 80012ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001554 <main+0x2b0>)
 80012ec:	499a      	ldr	r1, [pc, #616]	@ (8001558 <main+0x2b4>)
 80012ee:	489b      	ldr	r0, [pc, #620]	@ (800155c <main+0x2b8>)
 80012f0:	f7ff fa3e 	bl	8000770 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 80012f4:	489a      	ldr	r0, [pc, #616]	@ (8001560 <main+0x2bc>)
 80012f6:	f7ff fa3b 	bl	8000770 <myDebug>
	myDebug(
 80012fa:	230e      	movs	r3, #14
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	2200      	movs	r2, #0
 8001302:	2107      	movs	r1, #7
 8001304:	4897      	ldr	r0, [pc, #604]	@ (8001564 <main+0x2c0>)
 8001306:	f7ff fa33 	bl	8000770 <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 800130a:	4897      	ldr	r0, [pc, #604]	@ (8001568 <main+0x2c4>)
 800130c:	f7ff fa30 	bl	8000770 <myDebug>

	OBC_HANDSHAKE_FLAG = 1;
 8001310:	4b96      	ldr	r3, [pc, #600]	@ (800156c <main+0x2c8>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

	while (OBC_HANDSHAKE_FLAG == 0) {
 8001316:	e001      	b.n	800131c <main+0x78>
		WAIT_FOR_HANDSHAKE();
 8001318:	f001 fb60 	bl	80029dc <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 800131c:	4b93      	ldr	r3, [pc, #588]	@ (800156c <main+0x2c8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f9      	beq.n	8001318 <main+0x74>
	}

	setPacketParams(rx_buffer_len);
 8001324:	4b92      	ldr	r3, [pc, #584]	@ (8001570 <main+0x2cc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fcef 	bl	8000d0c <setPacketParams>
	setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 800132e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001332:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001336:	f7ff fd13 	bl	8000d60 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 800133a:	4b8d      	ldr	r3, [pc, #564]	@ (8001570 <main+0x2cc>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	488c      	ldr	r0, [pc, #560]	@ (8001574 <main+0x2d0>)
 8001342:	f7ff fd2b 	bl	8000d9c <radioConfig>

	myDebug(
 8001346:	488c      	ldr	r0, [pc, #560]	@ (8001578 <main+0x2d4>)
 8001348:	f7ff fa12 	bl	8000770 <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 800134c:	488b      	ldr	r0, [pc, #556]	@ (800157c <main+0x2d8>)
 800134e:	f7ff fa0f 	bl	8000770 <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 8001352:	488b      	ldr	r0, [pc, #556]	@ (8001580 <main+0x2dc>)
 8001354:	f7ff fa0c 	bl	8000770 <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 8001358:	488a      	ldr	r0, [pc, #552]	@ (8001584 <main+0x2e0>)
 800135a:	f7ff fa09 	bl	8000770 <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 800135e:	497d      	ldr	r1, [pc, #500]	@ (8001554 <main+0x2b0>)
 8001360:	4889      	ldr	r0, [pc, #548]	@ (8001588 <main+0x2e4>)
 8001362:	f7ff fa05 	bl	8000770 <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001366:	4b89      	ldr	r3, [pc, #548]	@ (800158c <main+0x2e8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4619      	mov	r1, r3
 800136c:	4888      	ldr	r0, [pc, #544]	@ (8001590 <main+0x2ec>)
 800136e:	f7ff f9ff 	bl	8000770 <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001372:	4b86      	ldr	r3, [pc, #536]	@ (800158c <main+0x2e8>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4619      	mov	r1, r3
 8001378:	4886      	ldr	r0, [pc, #536]	@ (8001594 <main+0x2f0>)
 800137a:	f7ff f9f9 	bl	8000770 <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 800137e:	4b83      	ldr	r3, [pc, #524]	@ (800158c <main+0x2e8>)
 8001380:	7b5b      	ldrb	r3, [r3, #13]
 8001382:	4619      	mov	r1, r3
 8001384:	4884      	ldr	r0, [pc, #528]	@ (8001598 <main+0x2f4>)
 8001386:	f7ff f9f3 	bl	8000770 <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800138a:	4b84      	ldr	r3, [pc, #528]	@ (800159c <main+0x2f8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	4883      	ldr	r0, [pc, #524]	@ (80015a0 <main+0x2fc>)
 8001392:	f7ff f9ed 	bl	8000770 <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8001396:	4b81      	ldr	r3, [pc, #516]	@ (800159c <main+0x2f8>)
 8001398:	7a1b      	ldrb	r3, [r3, #8]
 800139a:	4619      	mov	r1, r3
 800139c:	4881      	ldr	r0, [pc, #516]	@ (80015a4 <main+0x300>)
 800139e:	f7ff f9e7 	bl	8000770 <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 80013a2:	4b7e      	ldr	r3, [pc, #504]	@ (800159c <main+0x2f8>)
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	4619      	mov	r1, r3
 80013a8:	487f      	ldr	r0, [pc, #508]	@ (80015a8 <main+0x304>)
 80013aa:	f7ff f9e1 	bl	8000770 <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80013ae:	4b7b      	ldr	r3, [pc, #492]	@ (800159c <main+0x2f8>)
 80013b0:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 80013b2:	4619      	mov	r1, r3
 80013b4:	487d      	ldr	r0, [pc, #500]	@ (80015ac <main+0x308>)
 80013b6:	f7ff f9db 	bl	8000770 <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80013ba:	4b78      	ldr	r3, [pc, #480]	@ (800159c <main+0x2f8>)
 80013bc:	79db      	ldrb	r3, [r3, #7]
 80013be:	4619      	mov	r1, r3
 80013c0:	487b      	ldr	r0, [pc, #492]	@ (80015b0 <main+0x30c>)
 80013c2:	f7ff f9d5 	bl	8000770 <myDebug>
	myDebug("__________*******************__________\r\n");
 80013c6:	487b      	ldr	r0, [pc, #492]	@ (80015b4 <main+0x310>)
 80013c8:	f7ff f9d2 	bl	8000770 <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80013cc:	4861      	ldr	r0, [pc, #388]	@ (8001554 <main+0x2b0>)
 80013ce:	f009 fbbb 	bl	800ab48 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80013d2:	2100      	movs	r1, #0
 80013d4:	2001      	movs	r0, #1
 80013d6:	f009 ffff 	bl	800b3d8 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 80013da:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80013de:	f009 f9df 	bl	800a7a0 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80013e2:	4b75      	ldr	r3, [pc, #468]	@ (80015b8 <main+0x314>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4974      	ldr	r1, [pc, #464]	@ (80015bc <main+0x318>)
 80013ea:	4875      	ldr	r0, [pc, #468]	@ (80015c0 <main+0x31c>)
 80013ec:	f005 fcf0 	bl	8006dd0 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80013f0:	4b71      	ldr	r3, [pc, #452]	@ (80015b8 <main+0x314>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4971      	ldr	r1, [pc, #452]	@ (80015bc <main+0x318>)
 80013f8:	4872      	ldr	r0, [pc, #456]	@ (80015c4 <main+0x320>)
 80013fa:	f005 fce9 	bl	8006dd0 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 80013fe:	f00a fa32 	bl	800b866 <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		delay_us(500000);
 8001402:	4871      	ldr	r0, [pc, #452]	@ (80015c8 <main+0x324>)
 8001404:	f7ff f99a 	bl	800073c <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8001408:	4b70      	ldr	r3, [pc, #448]	@ (80015cc <main+0x328>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8089 	beq.w	8001524 <main+0x280>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8001412:	4b6f      	ldr	r3, [pc, #444]	@ (80015d0 <main+0x32c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	4868      	ldr	r0, [pc, #416]	@ (80015bc <main+0x318>)
 800141a:	f7ff f905 	bl	8000628 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800141e:	2196      	movs	r1, #150	@ 0x96
 8001420:	486c      	ldr	r0, [pc, #432]	@ (80015d4 <main+0x330>)
 8001422:	f7ff fc3d 	bl	8000ca0 <countsDataBetweenFlags>
 8001426:	4603      	mov	r3, r0
 8001428:	4a6b      	ldr	r2, [pc, #428]	@ (80015d8 <main+0x334>)
 800142a:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",ntemp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	e00b      	b.n	800144a <main+0x1a6>
				tx_buffer[j] = temp_tx_buffer[j];
 8001432:	4a68      	ldr	r2, [pc, #416]	@ (80015d4 <main+0x330>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	7819      	ldrb	r1, [r3, #0]
 800143a:	4a68      	ldr	r2, [pc, #416]	@ (80015dc <main+0x338>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	460a      	mov	r2, r1
 8001442:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b63      	ldr	r3, [pc, #396]	@ (80015d8 <main+0x334>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbee      	blt.n	8001432 <main+0x18e>
//				myDebug("%02x ", tx_buffer[j]);
			}
//			myDebug("\r\n");
//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(OBC_UART_RX, '\0', obc_ilen);
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <main+0x32c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	4857      	ldr	r0, [pc, #348]	@ (80015bc <main+0x318>)
 800145e:	f00a fda5 	bl	800bfac <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8001462:	2296      	movs	r2, #150	@ 0x96
 8001464:	2100      	movs	r1, #0
 8001466:	485b      	ldr	r0, [pc, #364]	@ (80015d4 <main+0x330>)
 8001468:	f00a fda0 	bl	800bfac <memset>

			setPacketParams(tx_buffer_len);
 800146c:	4b5a      	ldr	r3, [pc, #360]	@ (80015d8 <main+0x334>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc4a 	bl	8000d0c <setPacketParams>
			setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8001478:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 800147c:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 8001480:	f7ff fc6e 	bl	8000d60 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 8001484:	4b54      	ldr	r3, [pc, #336]	@ (80015d8 <main+0x334>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4619      	mov	r1, r3
 800148c:	4853      	ldr	r0, [pc, #332]	@ (80015dc <main+0x338>)
 800148e:	f7ff fc85 	bl	8000d9c <radioConfig>

			myDebug("\n########## TX Configuration: ##########\n");
 8001492:	4853      	ldr	r0, [pc, #332]	@ (80015e0 <main+0x33c>)
 8001494:	f7ff f96c 	bl	8000770 <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8001498:	492f      	ldr	r1, [pc, #188]	@ (8001558 <main+0x2b4>)
 800149a:	4852      	ldr	r0, [pc, #328]	@ (80015e4 <main+0x340>)
 800149c:	f7ff f968 	bl	8000770 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80014a0:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <main+0x2e8>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4619      	mov	r1, r3
 80014a6:	483a      	ldr	r0, [pc, #232]	@ (8001590 <main+0x2ec>)
 80014a8:	f7ff f962 	bl	8000770 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80014ac:	4b37      	ldr	r3, [pc, #220]	@ (800158c <main+0x2e8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4838      	ldr	r0, [pc, #224]	@ (8001594 <main+0x2f0>)
 80014b4:	f7ff f95c 	bl	8000770 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80014b8:	4b34      	ldr	r3, [pc, #208]	@ (800158c <main+0x2e8>)
 80014ba:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80014bc:	4619      	mov	r1, r3
 80014be:	4836      	ldr	r0, [pc, #216]	@ (8001598 <main+0x2f4>)
 80014c0:	f7ff f956 	bl	8000770 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80014c4:	4b35      	ldr	r3, [pc, #212]	@ (800159c <main+0x2f8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4835      	ldr	r0, [pc, #212]	@ (80015a0 <main+0x2fc>)
 80014cc:	f7ff f950 	bl	8000770 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 80014d0:	4b32      	ldr	r3, [pc, #200]	@ (800159c <main+0x2f8>)
 80014d2:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 80014d4:	4619      	mov	r1, r3
 80014d6:	4833      	ldr	r0, [pc, #204]	@ (80015a4 <main+0x300>)
 80014d8:	f7ff f94a 	bl	8000770 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 80014dc:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <main+0x2f8>)
 80014de:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 80014e0:	4619      	mov	r1, r3
 80014e2:	4831      	ldr	r0, [pc, #196]	@ (80015a8 <main+0x304>)
 80014e4:	f7ff f944 	bl	8000770 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 80014e8:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <main+0x2f8>)
 80014ea:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 80014ec:	4619      	mov	r1, r3
 80014ee:	482f      	ldr	r0, [pc, #188]	@ (80015ac <main+0x308>)
 80014f0:	f7ff f93e 	bl	8000770 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <main+0x2f8>)
 80014f6:	79db      	ldrb	r3, [r3, #7]
 80014f8:	4619      	mov	r1, r3
 80014fa:	482d      	ldr	r0, [pc, #180]	@ (80015b0 <main+0x30c>)
 80014fc:	f7ff f938 	bl	8000770 <myDebug>
			myDebug("__________*******************__________\r\n");
 8001500:	482c      	ldr	r0, [pc, #176]	@ (80015b4 <main+0x310>)
 8001502:	f7ff f935 	bl	8000770 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001506:	4814      	ldr	r0, [pc, #80]	@ (8001558 <main+0x2b4>)
 8001508:	f009 fb1e 	bl	800ab48 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 800150c:	2101      	movs	r1, #1
 800150e:	2001      	movs	r0, #1
 8001510:	f009 ff62 	bl	800b3d8 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <main+0x334>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	482f      	ldr	r0, [pc, #188]	@ (80015dc <main+0x338>)
 8001520:	f008 ffd4 	bl	800a4cc <SUBGRF_SendPayload>

		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <main+0x314>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4924      	ldr	r1, [pc, #144]	@ (80015bc <main+0x318>)
 800152c:	4824      	ldr	r0, [pc, #144]	@ (80015c0 <main+0x31c>)
 800152e:	f005 fc4f 	bl	8006dd0 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <main+0x314>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4920      	ldr	r1, [pc, #128]	@ (80015bc <main+0x318>)
 800153a:	4822      	ldr	r0, [pc, #136]	@ (80015c4 <main+0x320>)
 800153c:	f005 fc48 	bl	8006dd0 <HAL_UART_Receive_DMA>
		MX_SubGHz_Phy_Process();
 8001540:	e75d      	b.n	80013fe <main+0x15a>
 8001542:	bf00      	nop
 8001544:	200006d0 	.word	0x200006d0
 8001548:	0800cb6c 	.word	0x0800cb6c
 800154c:	0800cba8 	.word	0x0800cba8
 8001550:	0800cbdc 	.word	0x0800cbdc
 8001554:	19f25968 	.word	0x19f25968
 8001558:	1a11d018 	.word	0x1a11d018
 800155c:	0800cbf8 	.word	0x0800cbf8
 8001560:	0800cc38 	.word	0x0800cc38
 8001564:	0800cc60 	.word	0x0800cc60
 8001568:	0800ccb4 	.word	0x0800ccb4
 800156c:	20000948 	.word	0x20000948
 8001570:	20000000 	.word	0x20000000
 8001574:	2000074c 	.word	0x2000074c
 8001578:	0800cce0 	.word	0x0800cce0
 800157c:	0800cd28 	.word	0x0800cd28
 8001580:	0800cd48 	.word	0x0800cd48
 8001584:	0800cd68 	.word	0x0800cd68
 8001588:	0800cd94 	.word	0x0800cd94
 800158c:	20000730 	.word	0x20000730
 8001590:	0800c974 	.word	0x0800c974
 8001594:	0800c984 	.word	0x0800c984
 8001598:	0800c9a0 	.word	0x0800c9a0
 800159c:	2000071c 	.word	0x2000071c
 80015a0:	0800c9bc 	.word	0x0800c9bc
 80015a4:	0800c9d0 	.word	0x0800c9d0
 80015a8:	0800c9e8 	.word	0x0800c9e8
 80015ac:	0800ca00 	.word	0x0800ca00
 80015b0:	0800ca18 	.word	0x0800ca18
 80015b4:	0800ca2c 	.word	0x0800ca2c
 80015b8:	20000001 	.word	0x20000001
 80015bc:	200007b8 	.word	0x200007b8
 80015c0:	200003a4 	.word	0x200003a4
 80015c4:	2000027c 	.word	0x2000027c
 80015c8:	0007a120 	.word	0x0007a120
 80015cc:	20000810 	.word	0x20000810
 80015d0:	200007b6 	.word	0x200007b6
 80015d4:	20000814 	.word	0x20000814
 80015d8:	20000944 	.word	0x20000944
 80015dc:	200008ac 	.word	0x200008ac
 80015e0:	0800c920 	.word	0x0800c920
 80015e4:	0800c94c 	.word	0x0800c94c

080015e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b09a      	sub	sp, #104	@ 0x68
 80015ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2248      	movs	r2, #72	@ 0x48
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00a fcd8 	bl	800bfac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <SystemClock_Config+0xbc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001616:	4a23      	ldr	r2, [pc, #140]	@ (80016a4 <SystemClock_Config+0xbc>)
 8001618:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <SystemClock_Config+0xbc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800162a:	2301      	movs	r3, #1
 800162c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800162e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001638:	2302      	movs	r3, #2
 800163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163c:	2303      	movs	r3, #3
 800163e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001640:	2310      	movs	r3, #16
 8001642:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8001644:	2306      	movs	r3, #6
 8001646:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001648:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800164c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800164e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001652:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001658:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	4618      	mov	r0, r3
 8001660:	f003 f850 	bl	8004704 <HAL_RCC_OscConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x86>
		Error_Handler();
 800166a:	f001 f9b1 	bl	80029d0 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 800166e:	234f      	movs	r3, #79	@ 0x4f
 8001670:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001672:	2303      	movs	r3, #3
 8001674:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2102      	movs	r1, #2
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fbbc 	bl	8004e08 <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xb2>
		Error_Handler();
 8001696:	f001 f99b 	bl	80029d0 <Error_Handler>
	}
}
 800169a:	bf00      	nop
 800169c:	3768      	adds	r7, #104	@ 0x68
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	58000400 	.word	0x58000400

080016a8 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80016ac:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016ae:	4a23      	ldr	r2, [pc, #140]	@ (800173c <MX_LPUART1_UART_Init+0x94>)
 80016b0:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d8:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80016f0:	4811      	ldr	r0, [pc, #68]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 80016f2:	f005 f9d3 	bl	8006a9c <HAL_UART_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 80016fc:	f001 f968 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8001700:	2100      	movs	r1, #0
 8001702:	480d      	ldr	r0, [pc, #52]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 8001704:	f006 fdfa 	bl	80082fc <HAL_UARTEx_SetTxFifoThreshold>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800170e:	f001 f95f 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8001712:	2100      	movs	r1, #0
 8001714:	4808      	ldr	r0, [pc, #32]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 8001716:	f006 fe2f 	bl	8008378 <HAL_UARTEx_SetRxFifoThreshold>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001720:	f001 f956 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <MX_LPUART1_UART_Init+0x90>)
 8001726:	f006 fdb1 	bl	800828c <HAL_UARTEx_DisableFifoMode>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 8001730:	f001 f94e 	bl	80029d0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000027c 	.word	0x2000027c
 800173c:	40008000 	.word	0x40008000

08001740 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001746:	4a23      	ldr	r2, [pc, #140]	@ (80017d4 <MX_USART1_UART_Init+0x94>)
 8001748:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001782:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001788:	4811      	ldr	r0, [pc, #68]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800178a:	f005 f987 	bl	8006a9c <HAL_UART_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001794:	f001 f91c 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001798:	2100      	movs	r1, #0
 800179a:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800179c:	f006 fdae 	bl	80082fc <HAL_UARTEx_SetTxFifoThreshold>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80017a6:	f001 f913 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 80017ae:	f006 fde3 	bl	8008378 <HAL_UARTEx_SetRxFifoThreshold>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80017b8:	f001 f90a 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80017bc:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 80017be:	f006 fd65 	bl	800828c <HAL_UARTEx_DisableFifoMode>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80017c8:	f001 f902 	bl	80029d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000310 	.word	0x20000310
 80017d4:	40013800 	.word	0x40013800

080017d8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 80017de:	4a23      	ldr	r2, [pc, #140]	@ (800186c <MX_USART2_UART_Init+0x94>)
 80017e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001820:	4811      	ldr	r0, [pc, #68]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 8001822:	f005 f93b 	bl	8006a9c <HAL_UART_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 800182c:	f001 f8d0 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001830:	2100      	movs	r1, #0
 8001832:	480d      	ldr	r0, [pc, #52]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 8001834:	f006 fd62 	bl	80082fc <HAL_UARTEx_SetTxFifoThreshold>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800183e:	f001 f8c7 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001842:	2100      	movs	r1, #0
 8001844:	4808      	ldr	r0, [pc, #32]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 8001846:	f006 fd97 	bl	8008378 <HAL_UARTEx_SetRxFifoThreshold>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001850:	f001 f8be 	bl	80029d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <MX_USART2_UART_Init+0x90>)
 8001856:	f006 fd19 	bl	800828c <HAL_UARTEx_DisableFifoMode>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8001860:	f001 f8b6 	bl	80029d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200003a4 	.word	0x200003a4
 800186c:	40004400 	.word	0x40004400

08001870 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_SUBGHZ_Init+0x20>)
 8001876:	2208      	movs	r2, #8
 8001878:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_SUBGHZ_Init+0x20>)
 800187c:	f004 f838 	bl	80058f0 <HAL_SUBGHZ_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8001886:	f001 f8a3 	bl	80029d0 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000678 	.word	0x20000678

08001894 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018b4:	4a20      	ldr	r2, [pc, #128]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018b6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018ba:	222f      	movs	r2, #47	@ 0x2f
 80018bc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ca:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80018de:	4815      	ldr	r0, [pc, #84]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018e0:	f004 fc26 	bl	8006130 <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x5a>
		Error_Handler();
 80018ea:	f001 f871 	bl	80029d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	480e      	ldr	r0, [pc, #56]	@ (8001934 <MX_TIM1_Init+0xa0>)
 80018fc:	f004 fe4d 	bl	800659a <HAL_TIM_ConfigClockSource>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0x76>
		Error_Handler();
 8001906:	f001 f863 	bl	80029d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <MX_TIM1_Init+0xa0>)
 800191c:	f005 f824 	bl	8006968 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8001926:	f001 f853 	bl	80029d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000684 	.word	0x20000684
 8001938:	40012c00 	.word	0x40012c00

0800193c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <MX_TIM2_Init+0x94>)
 800195c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001960:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48 - 1;
 8001962:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <MX_TIM2_Init+0x94>)
 8001964:	222f      	movs	r2, #47	@ 0x2f
 8001966:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <MX_TIM2_Init+0x94>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <MX_TIM2_Init+0x94>)
 8001970:	4a18      	ldr	r2, [pc, #96]	@ (80019d4 <MX_TIM2_Init+0x98>)
 8001972:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <MX_TIM2_Init+0x94>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <MX_TIM2_Init+0x94>)
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001980:	4813      	ldr	r0, [pc, #76]	@ (80019d0 <MX_TIM2_Init+0x94>)
 8001982:	f004 fbd5 	bl	8006130 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0x54>
		Error_Handler();
 800198c:	f001 f820 	bl	80029d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001994:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <MX_TIM2_Init+0x94>)
 800199e:	f004 fdfc 	bl	800659a <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x70>
		Error_Handler();
 80019a8:	f001 f812 	bl	80029d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_TIM2_Init+0x94>)
 80019ba:	f004 ffd5 	bl	8006968 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80019c4:	f001 f804 	bl	80029d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200006d0 	.word	0x200006d0
 80019d4:	000f4240 	.word	0x000f4240

080019d8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019dc:	2004      	movs	r0, #4
 80019de:	f7ff f8a7 	bl	8000b30 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7ff f8a4 	bl	8000b30 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	200b      	movs	r0, #11
 80019ee:	f001 fe88 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f2:	200b      	movs	r0, #11
 80019f4:	f001 fe9f 	bl	8003736 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	200c      	movs	r0, #12
 80019fe:	f001 fe80 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a02:	200c      	movs	r0, #12
 8001a04:	f001 fe97 	bl	8003736 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	200d      	movs	r0, #13
 8001a0e:	f001 fe78 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a12:	200d      	movs	r0, #13
 8001a14:	f001 fe8f 	bl	8003736 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	200e      	movs	r0, #14
 8001a1e:	f001 fe70 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a22:	200e      	movs	r0, #14
 8001a24:	f001 fe87 	bl	8003736 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	200f      	movs	r0, #15
 8001a2e:	f001 fe68 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f001 fe7f 	bl	8003736 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2010      	movs	r0, #16
 8001a3e:	f001 fe60 	bl	8003702 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a42:	2010      	movs	r0, #16
 8001a44:	f001 fe77 	bl	8003736 <HAL_NVIC_EnableIRQ>

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff f87d 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7ff f87a 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6c:	2004      	movs	r0, #4
 8001a6e:	f7ff f877 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8001a78:	481f      	ldr	r0, [pc, #124]	@ (8001af8 <MX_GPIO_Init+0xac>)
 8001a7a:	f002 fb59 	bl	8004130 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2138      	movs	r1, #56	@ 0x38
 8001a82:	481e      	ldr	r0, [pc, #120]	@ (8001afc <MX_GPIO_Init+0xb0>)
 8001a84:	f002 fb54 	bl	8004130 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8001a88:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8001a8c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a96:	2302      	movs	r3, #2
 8001a98:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4816      	ldr	r0, [pc, #88]	@ (8001af8 <MX_GPIO_Init+0xac>)
 8001aa0:	f002 f9e6 	bl	8003e70 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8001aa4:	2338      	movs	r3, #56	@ 0x38
 8001aa6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4810      	ldr	r0, [pc, #64]	@ (8001afc <MX_GPIO_Init+0xb0>)
 8001aba:	f002 f9d9 	bl	8003e70 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ac6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad4:	f002 f9cc 	bl	8003e70 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8001ad8:	2340      	movs	r3, #64	@ 0x40
 8001ada:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001adc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ae0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4804      	ldr	r0, [pc, #16]	@ (8001afc <MX_GPIO_Init+0xb0>)
 8001aec:	f002 f9c0 	bl	8003e70 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	48000400 	.word	0x48000400
 8001afc:	48000800 	.word	0x48000800

08001b00 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b04:	b0bb      	sub	sp, #236	@ 0xec
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if (radioIrq == IRQ_TX_DONE) {
 8001b0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	f040 80d8 	bne.w	8001cc4 <DioIrqHndlr+0x1c4>
		OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001b14:	4b93      	ldr	r3, [pc, #588]	@ (8001d64 <DioIrqHndlr+0x264>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

		pktid++;
 8001b1a:	4b93      	ldr	r3, [pc, #588]	@ (8001d68 <DioIrqHndlr+0x268>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a91      	ldr	r2, [pc, #580]	@ (8001d68 <DioIrqHndlr+0x268>)
 8001b22:	6013      	str	r3, [r2, #0]

		if (pktid == 10) {
 8001b24:	4b90      	ldr	r3, [pc, #576]	@ (8001d68 <DioIrqHndlr+0x268>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b0a      	cmp	r3, #10
 8001b2a:	d105      	bne.n	8001b38 <DioIrqHndlr+0x38>
			pktid = 0;
 8001b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d68 <DioIrqHndlr+0x268>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim1);
 8001b32:	488e      	ldr	r0, [pc, #568]	@ (8001d6c <DioIrqHndlr+0x26c>)
 8001b34:	f004 fbe4 	bl	8006300 <HAL_TIM_Base_Stop_IT>
		}

		myDebug("\nSatellite Data Transmitted Successful, Length: %d\r\n",
 8001b38:	4b8d      	ldr	r3, [pc, #564]	@ (8001d70 <DioIrqHndlr+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	488d      	ldr	r0, [pc, #564]	@ (8001d74 <DioIrqHndlr+0x274>)
 8001b40:	f7fe fe16 	bl	8000770 <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b4a:	e00d      	b.n	8001b68 <DioIrqHndlr+0x68>
			myDebug("%02x ", tx_buffer[i]);
 8001b4c:	4a8a      	ldr	r2, [pc, #552]	@ (8001d78 <DioIrqHndlr+0x278>)
 8001b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4888      	ldr	r0, [pc, #544]	@ (8001d7c <DioIrqHndlr+0x27c>)
 8001b5a:	f7fe fe09 	bl	8000770 <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 8001b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b62:	3301      	adds	r3, #1
 8001b64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b68:	4b81      	ldr	r3, [pc, #516]	@ (8001d70 <DioIrqHndlr+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbeb      	blt.n	8001b4c <DioIrqHndlr+0x4c>
		}
		myDebug("\r\n");
 8001b74:	4882      	ldr	r0, [pc, #520]	@ (8001d80 <DioIrqHndlr+0x280>)
 8001b76:	f7fe fdfb 	bl	8000770 <myDebug>

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 8001b7a:	2296      	movs	r2, #150	@ 0x96
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	487e      	ldr	r0, [pc, #504]	@ (8001d78 <DioIrqHndlr+0x278>)
 8001b80:	f00a fa14 	bl	800bfac <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 8001b84:	4b7f      	ldr	r3, [pc, #508]	@ (8001d84 <DioIrqHndlr+0x284>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2bb1      	cmp	r3, #177	@ 0xb1
 8001b8a:	d003      	beq.n	8001b94 <DioIrqHndlr+0x94>
 8001b8c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d84 <DioIrqHndlr+0x284>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2bb2      	cmp	r3, #178	@ 0xb2
 8001b92:	d10c      	bne.n	8001bae <DioIrqHndlr+0xae>
			BEACON_COUNT--;
 8001b94:	4b7c      	ldr	r3, [pc, #496]	@ (8001d88 <DioIrqHndlr+0x288>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	4a7b      	ldr	r2, [pc, #492]	@ (8001d88 <DioIrqHndlr+0x288>)
 8001b9c:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d8c <DioIrqHndlr+0x28c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	4a79      	ldr	r2, [pc, #484]	@ (8001d8c <DioIrqHndlr+0x28c>)
 8001ba6:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 8001ba8:	4a76      	ldr	r2, [pc, #472]	@ (8001d84 <DioIrqHndlr+0x284>)
 8001baa:	2300      	movs	r3, #0
 8001bac:	7013      	strb	r3, [r2, #0]
		}

		if (DIGIPEATER_FLAG) {
 8001bae:	4b78      	ldr	r3, [pc, #480]	@ (8001d90 <DioIrqHndlr+0x290>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00e      	beq.n	8001bd4 <DioIrqHndlr+0xd4>
			BEACON_COUNT = 2;
 8001bb6:	4b74      	ldr	r3, [pc, #464]	@ (8001d88 <DioIrqHndlr+0x288>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001bbc:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <DioIrqHndlr+0x264>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 8001bc2:	4b74      	ldr	r3, [pc, #464]	@ (8001d94 <DioIrqHndlr+0x294>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 8001bc8:	4b71      	ldr	r3, [pc, #452]	@ (8001d90 <DioIrqHndlr+0x290>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 8001bce:	4b72      	ldr	r3, [pc, #456]	@ (8001d98 <DioIrqHndlr+0x298>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 8001bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d88 <DioIrqHndlr+0x288>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <DioIrqHndlr+0xf0>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001bdc:	4b61      	ldr	r3, [pc, #388]	@ (8001d64 <DioIrqHndlr+0x264>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 8001be2:	4b6c      	ldr	r3, [pc, #432]	@ (8001d94 <DioIrqHndlr+0x294>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 8001be8:	486c      	ldr	r0, [pc, #432]	@ (8001d9c <DioIrqHndlr+0x29c>)
 8001bea:	f7fe fdc1 	bl	8000770 <myDebug>
 8001bee:	e002      	b.n	8001bf6 <DioIrqHndlr+0xf6>
		} else {
			DIGIPEATER_STATUS = 0;
 8001bf0:	4b68      	ldr	r3, [pc, #416]	@ (8001d94 <DioIrqHndlr+0x294>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 8001bf6:	486a      	ldr	r0, [pc, #424]	@ (8001da0 <DioIrqHndlr+0x2a0>)
 8001bf8:	f7fe fda0 	bl	800073c <delay_us>

		setPacketParams(rx_buffer_len);
 8001bfc:	4b69      	ldr	r3, [pc, #420]	@ (8001da4 <DioIrqHndlr+0x2a4>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f883 	bl	8000d0c <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8001c06:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001c0a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001c0e:	f7ff f8a7 	bl	8000d60 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 8001c12:	4b64      	ldr	r3, [pc, #400]	@ (8001da4 <DioIrqHndlr+0x2a4>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4863      	ldr	r0, [pc, #396]	@ (8001da8 <DioIrqHndlr+0x2a8>)
 8001c1a:	f7ff f8bf 	bl	8000d9c <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 8001c1e:	4863      	ldr	r0, [pc, #396]	@ (8001dac <DioIrqHndlr+0x2ac>)
 8001c20:	f7fe fda6 	bl	8000770 <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001c24:	4962      	ldr	r1, [pc, #392]	@ (8001db0 <DioIrqHndlr+0x2b0>)
 8001c26:	4863      	ldr	r0, [pc, #396]	@ (8001db4 <DioIrqHndlr+0x2b4>)
 8001c28:	f7fe fda2 	bl	8000770 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001c2c:	4b62      	ldr	r3, [pc, #392]	@ (8001db8 <DioIrqHndlr+0x2b8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4862      	ldr	r0, [pc, #392]	@ (8001dbc <DioIrqHndlr+0x2bc>)
 8001c34:	f7fe fd9c 	bl	8000770 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001c38:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <DioIrqHndlr+0x2b8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4860      	ldr	r0, [pc, #384]	@ (8001dc0 <DioIrqHndlr+0x2c0>)
 8001c40:	f7fe fd96 	bl	8000770 <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8001c44:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <DioIrqHndlr+0x2b8>)
 8001c46:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001c48:	4619      	mov	r1, r3
 8001c4a:	485e      	ldr	r0, [pc, #376]	@ (8001dc4 <DioIrqHndlr+0x2c4>)
 8001c4c:	f7fe fd90 	bl	8000770 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001c50:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc8 <DioIrqHndlr+0x2c8>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	485d      	ldr	r0, [pc, #372]	@ (8001dcc <DioIrqHndlr+0x2cc>)
 8001c58:	f7fe fd8a 	bl	8000770 <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8001c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc8 <DioIrqHndlr+0x2c8>)
 8001c5e:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001c60:	4619      	mov	r1, r3
 8001c62:	485b      	ldr	r0, [pc, #364]	@ (8001dd0 <DioIrqHndlr+0x2d0>)
 8001c64:	f7fe fd84 	bl	8000770 <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8001c68:	4b57      	ldr	r3, [pc, #348]	@ (8001dc8 <DioIrqHndlr+0x2c8>)
 8001c6a:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4859      	ldr	r0, [pc, #356]	@ (8001dd4 <DioIrqHndlr+0x2d4>)
 8001c70:	f7fe fd7e 	bl	8000770 <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8001c74:	4b54      	ldr	r3, [pc, #336]	@ (8001dc8 <DioIrqHndlr+0x2c8>)
 8001c76:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4857      	ldr	r0, [pc, #348]	@ (8001dd8 <DioIrqHndlr+0x2d8>)
 8001c7c:	f7fe fd78 	bl	8000770 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001c80:	4b51      	ldr	r3, [pc, #324]	@ (8001dc8 <DioIrqHndlr+0x2c8>)
 8001c82:	79db      	ldrb	r3, [r3, #7]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4855      	ldr	r0, [pc, #340]	@ (8001ddc <DioIrqHndlr+0x2dc>)
 8001c88:	f7fe fd72 	bl	8000770 <myDebug>
		myDebug("__________*******************__________\r\n");
 8001c8c:	4854      	ldr	r0, [pc, #336]	@ (8001de0 <DioIrqHndlr+0x2e0>)
 8001c8e:	f7fe fd6f 	bl	8000770 <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001c92:	4847      	ldr	r0, [pc, #284]	@ (8001db0 <DioIrqHndlr+0x2b0>)
 8001c94:	f008 ff58 	bl	800ab48 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f009 fb9c 	bl	800b3d8 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001ca0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8001ca4:	f008 fd7c 	bl	800a7a0 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8001de4 <DioIrqHndlr+0x2e4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	494e      	ldr	r1, [pc, #312]	@ (8001de8 <DioIrqHndlr+0x2e8>)
 8001cb0:	484e      	ldr	r0, [pc, #312]	@ (8001dec <DioIrqHndlr+0x2ec>)
 8001cb2:	f005 f88d 	bl	8006dd0 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8001de4 <DioIrqHndlr+0x2e4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	494a      	ldr	r1, [pc, #296]	@ (8001de8 <DioIrqHndlr+0x2e8>)
 8001cbe:	484c      	ldr	r0, [pc, #304]	@ (8001df0 <DioIrqHndlr+0x2f0>)
 8001cc0:	f005 f886 	bl	8006dd0 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_DONE) {
 8001cc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	f040 8663 	bne.w	8002992 <DioIrqHndlr+0xe92>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 8001ccc:	2269      	movs	r2, #105	@ 0x69
 8001cce:	4935      	ldr	r1, [pc, #212]	@ (8001da4 <DioIrqHndlr+0x2a4>)
 8001cd0:	4835      	ldr	r0, [pc, #212]	@ (8001da8 <DioIrqHndlr+0x2a8>)
 8001cd2:	f008 fbd9 	bl	800a488 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8001cd6:	f009 f9f8 	bl	800b0ca <SUBGRF_GetRssiInst>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4a45      	ldr	r2, [pc, #276]	@ (8001df4 <DioIrqHndlr+0x2f4>)
 8001ce0:	7013      	strb	r3, [r2, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 8001ce2:	4845      	ldr	r0, [pc, #276]	@ (8001df8 <DioIrqHndlr+0x2f8>)
 8001ce4:	f7fe fd44 	bl	8000770 <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 8001cee:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <DioIrqHndlr+0x2a4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	482c      	ldr	r0, [pc, #176]	@ (8001da8 <DioIrqHndlr+0x2a8>)
 8001cf6:	f7fe ffd3 	bl	8000ca0 <countsDataBetweenFlags>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

		if (temp_rx_buffer_len != -1) {
 8001d00:	466b      	mov	r3, sp
 8001d02:	4699      	mov	r9, r3

			uint8_t temp_check_buff[temp_rx_buffer_len];
 8001d04:	f897 80b7 	ldrb.w	r8, [r7, #183]	@ 0xb7
 8001d08:	4643      	mov	r3, r8
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d10:	fa5f f388 	uxtb.w	r3, r8
 8001d14:	2200      	movs	r2, #0
 8001d16:	461c      	mov	r4, r3
 8001d18:	4615      	mov	r5, r2
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	00eb      	lsls	r3, r5, #3
 8001d24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d28:	00e2      	lsls	r2, r4, #3
 8001d2a:	fa5f f388 	uxtb.w	r3, r8
 8001d2e:	2200      	movs	r2, #0
 8001d30:	469a      	mov	sl, r3
 8001d32:	4693      	mov	fp, r2
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d48:	4643      	mov	r3, r8
 8001d4a:	3307      	adds	r3, #7
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	ebad 0d03 	sub.w	sp, sp, r3
 8001d54:	466b      	mov	r3, sp
 8001d56:	3300      	adds	r3, #0
 8001d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d62:	e066      	b.n	8001e32 <DioIrqHndlr+0x332>
 8001d64:	20000810 	.word	0x20000810
 8001d68:	20000970 	.word	0x20000970
 8001d6c:	20000684 	.word	0x20000684
 8001d70:	20000944 	.word	0x20000944
 8001d74:	0800cdbc 	.word	0x0800cdbc
 8001d78:	200008ac 	.word	0x200008ac
 8001d7c:	0800cacc 	.word	0x0800cacc
 8001d80:	0800cad4 	.word	0x0800cad4
 8001d84:	20000950 	.word	0x20000950
 8001d88:	20000004 	.word	0x20000004
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000954 	.word	0x20000954
 8001d94:	2000094c 	.word	0x2000094c
 8001d98:	20000958 	.word	0x20000958
 8001d9c:	0800cdf4 	.word	0x0800cdf4
 8001da0:	0007a120 	.word	0x0007a120
 8001da4:	20000000 	.word	0x20000000
 8001da8:	2000074c 	.word	0x2000074c
 8001dac:	0800cd68 	.word	0x0800cd68
 8001db0:	19f25968 	.word	0x19f25968
 8001db4:	0800cd94 	.word	0x0800cd94
 8001db8:	20000730 	.word	0x20000730
 8001dbc:	0800c974 	.word	0x0800c974
 8001dc0:	0800c984 	.word	0x0800c984
 8001dc4:	0800c9a0 	.word	0x0800c9a0
 8001dc8:	2000071c 	.word	0x2000071c
 8001dcc:	0800c9bc 	.word	0x0800c9bc
 8001dd0:	0800c9d0 	.word	0x0800c9d0
 8001dd4:	0800c9e8 	.word	0x0800c9e8
 8001dd8:	0800ca00 	.word	0x0800ca00
 8001ddc:	0800ca18 	.word	0x0800ca18
 8001de0:	0800ca2c 	.word	0x0800ca2c
 8001de4:	20000001 	.word	0x20000001
 8001de8:	200007b8 	.word	0x200007b8
 8001dec:	200003a4 	.word	0x200003a4
 8001df0:	2000027c 	.word	0x2000027c
 8001df4:	200007b5 	.word	0x200007b5
 8001df8:	0800ce2c 	.word	0x0800ce2c
				temp_check_buff[i] = rx_buffer[i];
 8001dfc:	4ab3      	ldr	r2, [pc, #716]	@ (80020cc <DioIrqHndlr+0x5cc>)
 8001dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e02:	4413      	add	r3, r2
 8001e04:	7819      	ldrb	r1, [r3, #0]
 8001e06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e0e:	4413      	add	r3, r2
 8001e10:	460a      	mov	r2, r1
 8001e12:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]);
 8001e14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	48ab      	ldr	r0, [pc, #684]	@ (80020d0 <DioIrqHndlr+0x5d0>)
 8001e24:	f7fe fca4 	bl	8000770 <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e32:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001e36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbde      	blt.n	8001dfc <DioIrqHndlr+0x2fc>
			}
			myDebug("\r\n");
 8001e3e:	48a5      	ldr	r0, [pc, #660]	@ (80020d4 <DioIrqHndlr+0x5d4>)
 8001e40:	f7fe fc96 	bl	8000770 <myDebug>

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001e44:	2269      	movs	r2, #105	@ 0x69
 8001e46:	2100      	movs	r1, #0
 8001e48:	48a0      	ldr	r0, [pc, #640]	@ (80020cc <DioIrqHndlr+0x5cc>)
 8001e4a:	f00a f8af 	bl	800bfac <memset>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8001e4e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001e52:	3b04      	subs	r3, #4
 8001e54:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
			uint8_t crc_buff[crc_buff_len];
 8001e58:	f897 50ab 	ldrb.w	r5, [r7, #171]	@ 0xab
 8001e5c:	462b      	mov	r3, r5
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001e64:	b2eb      	uxtb	r3, r5
 8001e66:	2200      	movs	r2, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	61fa      	str	r2, [r7, #28]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e78:	4659      	mov	r1, fp
 8001e7a:	00cb      	lsls	r3, r1, #3
 8001e7c:	4654      	mov	r4, sl
 8001e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e82:	4651      	mov	r1, sl
 8001e84:	00ca      	lsls	r2, r1, #3
 8001e86:	b2eb      	uxtb	r3, r5
 8001e88:	2200      	movs	r2, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	617a      	str	r2, [r7, #20]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e9a:	4659      	mov	r1, fp
 8001e9c:	00cb      	lsls	r3, r1, #3
 8001e9e:	4654      	mov	r4, sl
 8001ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ea4:	4651      	mov	r1, sl
 8001ea6:	00ca      	lsls	r2, r1, #3
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	3307      	adds	r3, #7
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	ebad 0d03 	sub.w	sp, sp, r3
 8001eb4:	466b      	mov	r3, sp
 8001eb6:	3300      	adds	r3, #0
 8001eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

			//			myDebug("\nGS Command Testing: 0x%x\r\n");

			int j = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			for (int i = 1; i <= crc_buff_len; i++) {
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ec8:	e016      	b.n	8001ef8 <DioIrqHndlr+0x3f8>
				crc_buff[j] = temp_check_buff[i];
 8001eca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ed2:	4413      	add	r3, r2
 8001ed4:	7819      	ldrb	r1, [r3, #0]
 8001ed6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ede:	4413      	add	r3, r2
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 8001ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			for (int i = 1; i <= crc_buff_len; i++) {
 8001eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ef8:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001efc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dde2      	ble.n	8001eca <DioIrqHndlr+0x3ca>
			}
			myDebug("\r\n");
 8001f04:	4873      	ldr	r0, [pc, #460]	@ (80020d4 <DioIrqHndlr+0x5d4>)
 8001f06:	f7fe fc33 	bl	8000770 <myDebug>

			uint16_t crc = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 8001f10:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001f14:	4619      	mov	r1, r3
 8001f16:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001f1a:	f7fe fc63 	bl	80007e4 <calculateCRC_CCITT_AX25>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 8001f24:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
			calc_crc[1] = crc & 0xFF;
 8001f32:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 8001f3c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001f40:	3b03      	subs	r3, #3
 8001f42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 8001f4c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001f50:	3b02      	subs	r3, #2
 8001f52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8001f5c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001f60:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 84de 	bne.w	8002926 <DioIrqHndlr+0xe26>
 8001f6a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001f6e:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8001f72:	429a      	cmp	r2, r3
 8001f74:	f040 84d7 	bne.w	8002926 <DioIrqHndlr+0xe26>
 8001f78:	466b      	mov	r3, sp
 8001f7a:	461e      	mov	r6, r3
				//				myDebug("GS Command checksum correct: 0x%x\r\n");

				uint8_t gs_cmd_buff[100];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 8001f7c:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 8001f80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f84:	4619      	mov	r1, r3
 8001f86:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001f8a:	f7fe fd12 	bl	80009b2 <bit_destuffing>
 8001f8e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
						crc_buff_len);
				gs_cmd_len--;
 8001f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

				uint8_t main_gs_cmd[gs_cmd_len];
 8001f9c:	f8d7 4098 	ldr.w	r4, [r7, #152]	@ 0x98
 8001fa0:	1e63      	subs	r3, r4, #1
 8001fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001fba:	4659      	mov	r1, fp
 8001fbc:	00cb      	lsls	r3, r1, #3
 8001fbe:	46d4      	mov	ip, sl
 8001fc0:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001fc4:	4651      	mov	r1, sl
 8001fc6:	00ca      	lsls	r2, r1, #3
 8001fc8:	4622      	mov	r2, r4
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603a      	str	r2, [r7, #0]
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fdc:	4659      	mov	r1, fp
 8001fde:	00cb      	lsls	r3, r1, #3
 8001fe0:	46d4      	mov	ip, sl
 8001fe2:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001fe6:	4651      	mov	r1, sl
 8001fe8:	00ca      	lsls	r2, r1, #3
 8001fea:	4623      	mov	r3, r4
 8001fec:	3307      	adds	r3, #7
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ff6:	466b      	mov	r3, sp
 8001ff8:	3300      	adds	r3, #0
 8001ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (int i = 0; i < gs_cmd_len; i++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002004:	e011      	b.n	800202a <DioIrqHndlr+0x52a>
					main_gs_cmd[i] = gs_cmd_buff[i];
 8002006:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800200a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800200e:	4413      	add	r3, r2
 8002010:	7819      	ldrb	r1, [r3, #0]
 8002012:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800201a:	4413      	add	r3, r2
 800201c:	460a      	mov	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < gs_cmd_len; i++) {
 8002020:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002024:	3301      	adds	r3, #1
 8002026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800202a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800202e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002032:	429a      	cmp	r2, r3
 8002034:	dbe7      	blt.n	8002006 <DioIrqHndlr+0x506>
				}

				COUNT_BEACON = 1;
 8002036:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <DioIrqHndlr+0x5d8>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

				if (COUNT_BEACON == 1) {
 800203c:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <DioIrqHndlr+0x5d8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	f040 8143 	bne.w	80022cc <DioIrqHndlr+0x7cc>

					if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 8002046:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800204a:	7c9b      	ldrb	r3, [r3, #18]
 800204c:	2bdf      	cmp	r3, #223	@ 0xdf
 800204e:	d109      	bne.n	8002064 <DioIrqHndlr+0x564>
 8002050:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002054:	7cdb      	ldrb	r3, [r3, #19]
 8002056:	2bab      	cmp	r3, #171	@ 0xab
 8002058:	d104      	bne.n	8002064 <DioIrqHndlr+0x564>
							&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 800205a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800205e:	7d1b      	ldrb	r3, [r3, #20]
 8002060:	2bd1      	cmp	r3, #209	@ 0xd1
 8002062:	d00e      	beq.n	8002082 <DioIrqHndlr+0x582>
							|| (main_gs_cmd[18] == 0x53
 8002064:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002068:	7c9b      	ldrb	r3, [r3, #18]
 800206a:	2b53      	cmp	r3, #83	@ 0x53
 800206c:	d13e      	bne.n	80020ec <DioIrqHndlr+0x5ec>
									&& main_gs_cmd[19] == 0x02
 800206e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002072:	7cdb      	ldrb	r3, [r3, #19]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d139      	bne.n	80020ec <DioIrqHndlr+0x5ec>
									&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 8002078:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800207c:	7d1b      	ldrb	r3, [r3, #20]
 800207e:	2b53      	cmp	r3, #83	@ 0x53
 8002080:	d134      	bne.n	80020ec <DioIrqHndlr+0x5ec>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8002082:	4816      	ldr	r0, [pc, #88]	@ (80020dc <DioIrqHndlr+0x5dc>)
 8002084:	f7fe fb74 	bl	8000770 <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8002088:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <DioIrqHndlr+0x5e0>)
 800208a:	2253      	movs	r2, #83	@ 0x53
 800208c:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <DioIrqHndlr+0x5e0>)
 8002090:	22ac      	movs	r2, #172	@ 0xac
 8002092:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8002094:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <DioIrqHndlr+0x5e0>)
 8002096:	2204      	movs	r2, #4
 8002098:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <DioIrqHndlr+0x5e0>)
 800209c:	2202      	movs	r2, #2
 800209e:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 80020a0:	4b0f      	ldr	r3, [pc, #60]	@ (80020e0 <DioIrqHndlr+0x5e0>)
 80020a2:	22fc      	movs	r2, #252	@ 0xfc
 80020a4:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 80020a6:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <DioIrqHndlr+0x5e0>)
 80020a8:	22ee      	movs	r2, #238	@ 0xee
 80020aa:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <DioIrqHndlr+0x5e0>)
 80020ae:	789a      	ldrb	r2, [r3, #2]
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <DioIrqHndlr+0x5e4>)
 80020b2:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <DioIrqHndlr+0x5e8>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80020ba:	4623      	mov	r3, r4
 80020bc:	461a      	mov	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80020c4:	f009 ff72 	bl	800bfac <memset>
 80020c8:	f000 bc2b 	b.w	8002922 <DioIrqHndlr+0xe22>
 80020cc:	2000074c 	.word	0x2000074c
 80020d0:	0800cacc 	.word	0x0800cacc
 80020d4:	0800cad4 	.word	0x0800cad4
 80020d8:	20000008 	.word	0x20000008
 80020dc:	0800ce4c 	.word	0x0800ce4c
 80020e0:	200007b8 	.word	0x200007b8
 80020e4:	200007b6 	.word	0x200007b6
 80020e8:	20000810 	.word	0x20000810

					} else if (main_gs_cmd[18] == 0xFD
 80020ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020f0:	7c9b      	ldrb	r3, [r3, #18]
 80020f2:	2bfd      	cmp	r3, #253	@ 0xfd
 80020f4:	f040 808d 	bne.w	8002212 <DioIrqHndlr+0x712>
							&& main_gs_cmd[19] == 0xBA
 80020f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020fc:	7cdb      	ldrb	r3, [r3, #19]
 80020fe:	2bba      	cmp	r3, #186	@ 0xba
 8002100:	f040 8087 	bne.w	8002212 <DioIrqHndlr+0x712>
							&& main_gs_cmd[20] == 0xD0) {
 8002104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002108:	7d1b      	ldrb	r3, [r3, #20]
 800210a:	2bd0      	cmp	r3, #208	@ 0xd0
 800210c:	f040 8081 	bne.w	8002212 <DioIrqHndlr+0x712>

						BEACON_COUNT = 2;
 8002110:	4bbd      	ldr	r3, [pc, #756]	@ (8002408 <DioIrqHndlr+0x908>)
 8002112:	2202      	movs	r2, #2
 8002114:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002116:	4bbd      	ldr	r3, [pc, #756]	@ (800240c <DioIrqHndlr+0x90c>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 800211c:	4bbc      	ldr	r3, [pc, #752]	@ (8002410 <DioIrqHndlr+0x910>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8002122:	4bbc      	ldr	r3, [pc, #752]	@ (8002414 <DioIrqHndlr+0x914>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8002128:	48bb      	ldr	r0, [pc, #748]	@ (8002418 <DioIrqHndlr+0x918>)
 800212a:	f7fe fb21 	bl	8000770 <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 800212e:	4bbb      	ldr	r3, [pc, #748]	@ (800241c <DioIrqHndlr+0x91c>)
 8002130:	2253      	movs	r2, #83	@ 0x53
 8002132:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8002134:	4bb9      	ldr	r3, [pc, #740]	@ (800241c <DioIrqHndlr+0x91c>)
 8002136:	22ac      	movs	r2, #172	@ 0xac
 8002138:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 800213a:	4bb8      	ldr	r3, [pc, #736]	@ (800241c <DioIrqHndlr+0x91c>)
 800213c:	2204      	movs	r2, #4
 800213e:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8002140:	4bb6      	ldr	r3, [pc, #728]	@ (800241c <DioIrqHndlr+0x91c>)
 8002142:	2202      	movs	r2, #2
 8002144:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8002146:	4bb5      	ldr	r3, [pc, #724]	@ (800241c <DioIrqHndlr+0x91c>)
 8002148:	2200      	movs	r2, #0
 800214a:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 800214c:	4bb3      	ldr	r3, [pc, #716]	@ (800241c <DioIrqHndlr+0x91c>)
 800214e:	22dd      	movs	r2, #221	@ 0xdd
 8002150:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8002152:	4bb2      	ldr	r3, [pc, #712]	@ (800241c <DioIrqHndlr+0x91c>)
 8002154:	789a      	ldrb	r2, [r3, #2]
 8002156:	4bb2      	ldr	r3, [pc, #712]	@ (8002420 <DioIrqHndlr+0x920>)
 8002158:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 800215a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800215e:	48b1      	ldr	r0, [pc, #708]	@ (8002424 <DioIrqHndlr+0x924>)
 8002160:	f7fe fb06 	bl	8000770 <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002164:	b2a2      	uxth	r2, r4
 8002166:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800216a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800216e:	48ae      	ldr	r0, [pc, #696]	@ (8002428 <DioIrqHndlr+0x928>)
 8002170:	f004 fce4 	bl	8006b3c <HAL_UART_Transmit>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <DioIrqHndlr+0x690>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800217a:	b2a2      	uxth	r2, r4
 800217c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002180:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002184:	48a9      	ldr	r0, [pc, #676]	@ (800242c <DioIrqHndlr+0x92c>)
 8002186:	f004 fcd9 	bl	8006b3c <HAL_UART_Transmit>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03c      	beq.n	800220a <DioIrqHndlr+0x70a>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002196:	e00e      	b.n	80021b6 <DioIrqHndlr+0x6b6>
								myDebug("%02x ", main_gs_cmd[i]);
 8002198:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800219c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021a0:	4413      	add	r3, r2
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	48a2      	ldr	r0, [pc, #648]	@ (8002430 <DioIrqHndlr+0x930>)
 80021a8:	f7fe fae2 	bl	8000770 <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 80021ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021b0:	3301      	adds	r3, #1
 80021b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbea      	blt.n	8002198 <DioIrqHndlr+0x698>
							}

							myDebug("\r\n");
 80021c2:	489c      	ldr	r0, [pc, #624]	@ (8002434 <DioIrqHndlr+0x934>)
 80021c4:	f7fe fad4 	bl	8000770 <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80021c8:	4623      	mov	r3, r4
 80021ca:	461a      	mov	r2, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80021d2:	f009 feeb 	bl	800bfac <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 80021d6:	2269      	movs	r2, #105	@ 0x69
 80021d8:	2100      	movs	r1, #0
 80021da:	4897      	ldr	r0, [pc, #604]	@ (8002438 <DioIrqHndlr+0x938>)
 80021dc:	f009 fee6 	bl	800bfac <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 80021e0:	4643      	mov	r3, r8
							memset(temp_check_buff, '\0',
 80021e2:	461a      	mov	r2, r3
 80021e4:	2100      	movs	r1, #0
 80021e6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80021ea:	f009 fedf 	bl	800bfac <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 80021ee:	462b      	mov	r3, r5
 80021f0:	461a      	mov	r2, r3
 80021f2:	2100      	movs	r1, #0
 80021f4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80021f8:	f009 fed8 	bl	800bfac <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80021fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002200:	2264      	movs	r2, #100	@ 0x64
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f009 fed1 	bl	800bfac <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 800220a:	4b80      	ldr	r3, [pc, #512]	@ (800240c <DioIrqHndlr+0x90c>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e387      	b.n	8002922 <DioIrqHndlr+0xe22>

					} else {
						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8002212:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002216:	4883      	ldr	r0, [pc, #524]	@ (8002424 <DioIrqHndlr+0x924>)
 8002218:	f7fe faaa 	bl	8000770 <myDebug>
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800221c:	b2a2      	uxth	r2, r4
 800221e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002222:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002226:	4880      	ldr	r0, [pc, #512]	@ (8002428 <DioIrqHndlr+0x928>)
 8002228:	f004 fc88 	bl	8006b3c <HAL_UART_Transmit>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <DioIrqHndlr+0x74a>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002232:	b2a2      	uxth	r2, r4
 8002234:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002238:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800223c:	487b      	ldr	r0, [pc, #492]	@ (800242c <DioIrqHndlr+0x92c>)
 800223e:	f004 fc7d 	bl	8006b3c <HAL_UART_Transmit>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 836c 	beq.w	8002922 <DioIrqHndlr+0xe22>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002250:	e00e      	b.n	8002270 <DioIrqHndlr+0x770>
								myDebug("%02x ", main_gs_cmd[i]);
 8002252:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4873      	ldr	r0, [pc, #460]	@ (8002430 <DioIrqHndlr+0x930>)
 8002262:	f7fe fa85 	bl	8000770 <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8002266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800226a:	3301      	adds	r3, #1
 800226c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002270:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002278:	429a      	cmp	r2, r3
 800227a:	dbea      	blt.n	8002252 <DioIrqHndlr+0x752>
							}

							HAL_TIM_Base_Start_IT(&htim1);
 800227c:	486f      	ldr	r0, [pc, #444]	@ (800243c <DioIrqHndlr+0x93c>)
 800227e:	f003 fff3 	bl	8006268 <HAL_TIM_Base_Start_IT>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002282:	4623      	mov	r3, r4
 8002284:	461a      	mov	r2, r3
 8002286:	2100      	movs	r1, #0
 8002288:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800228c:	f009 fe8e 	bl	800bfac <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8002290:	2269      	movs	r2, #105	@ 0x69
 8002292:	2100      	movs	r1, #0
 8002294:	4868      	ldr	r0, [pc, #416]	@ (8002438 <DioIrqHndlr+0x938>)
 8002296:	f009 fe89 	bl	800bfac <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 800229a:	4643      	mov	r3, r8
							memset(temp_check_buff, '\0',
 800229c:	461a      	mov	r2, r3
 800229e:	2100      	movs	r1, #0
 80022a0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80022a4:	f009 fe82 	bl	800bfac <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 80022a8:	462b      	mov	r3, r5
 80022aa:	461a      	mov	r2, r3
 80022ac:	2100      	movs	r1, #0
 80022ae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80022b2:	f009 fe7b 	bl	800bfac <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80022b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ba:	2264      	movs	r2, #100	@ 0x64
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f009 fe74 	bl	800bfac <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 80022c4:	485e      	ldr	r0, [pc, #376]	@ (8002440 <DioIrqHndlr+0x940>)
 80022c6:	f7fe fa53 	bl	8000770 <myDebug>
 80022ca:	e32a      	b.n	8002922 <DioIrqHndlr+0xe22>
						}

					}
				} else if (COUNT_BEACON == 0) {
 80022cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002444 <DioIrqHndlr+0x944>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 8326 	bne.w	8002922 <DioIrqHndlr+0xe22>
					if (DIGIPEATER_STATUS == 1) {
 80022d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002410 <DioIrqHndlr+0x910>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 8144 	bne.w	8002568 <DioIrqHndlr+0xa68>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 80022e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022e4:	7c9b      	ldrb	r3, [r3, #18]
 80022e6:	2bfd      	cmp	r3, #253	@ 0xfd
 80022e8:	f040 80ae 	bne.w	8002448 <DioIrqHndlr+0x948>
 80022ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022f0:	7cdb      	ldrb	r3, [r3, #19]
 80022f2:	2bba      	cmp	r3, #186	@ 0xba
 80022f4:	f040 80a8 	bne.w	8002448 <DioIrqHndlr+0x948>
								&& main_gs_cmd[20] == 0xD0) {
 80022f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022fc:	7d1b      	ldrb	r3, [r3, #20]
 80022fe:	2bd0      	cmp	r3, #208	@ 0xd0
 8002300:	f040 80a2 	bne.w	8002448 <DioIrqHndlr+0x948>

							BEACON_COUNT = 2;
 8002304:	4b40      	ldr	r3, [pc, #256]	@ (8002408 <DioIrqHndlr+0x908>)
 8002306:	2202      	movs	r2, #2
 8002308:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 800230a:	4b40      	ldr	r3, [pc, #256]	@ (800240c <DioIrqHndlr+0x90c>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 8002310:	4b3f      	ldr	r3, [pc, #252]	@ (8002410 <DioIrqHndlr+0x910>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8002316:	4b3f      	ldr	r3, [pc, #252]	@ (8002414 <DioIrqHndlr+0x914>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE OFF\n\n");
 800231c:	483e      	ldr	r0, [pc, #248]	@ (8002418 <DioIrqHndlr+0x918>)
 800231e:	f7fe fa27 	bl	8000770 <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8002322:	4b3e      	ldr	r3, [pc, #248]	@ (800241c <DioIrqHndlr+0x91c>)
 8002324:	2253      	movs	r2, #83	@ 0x53
 8002326:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002328:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <DioIrqHndlr+0x91c>)
 800232a:	22ac      	movs	r2, #172	@ 0xac
 800232c:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 800232e:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <DioIrqHndlr+0x91c>)
 8002330:	2204      	movs	r2, #4
 8002332:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8002334:	4b39      	ldr	r3, [pc, #228]	@ (800241c <DioIrqHndlr+0x91c>)
 8002336:	2202      	movs	r2, #2
 8002338:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 800233a:	4b38      	ldr	r3, [pc, #224]	@ (800241c <DioIrqHndlr+0x91c>)
 800233c:	2200      	movs	r2, #0
 800233e:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <DioIrqHndlr+0x91c>)
 8002342:	22dd      	movs	r2, #221	@ 0xdd
 8002344:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8002346:	4b35      	ldr	r3, [pc, #212]	@ (800241c <DioIrqHndlr+0x91c>)
 8002348:	789a      	ldrb	r2, [r3, #2]
 800234a:	4b35      	ldr	r3, [pc, #212]	@ (8002420 <DioIrqHndlr+0x920>)
 800234c:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 800234e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002352:	4834      	ldr	r0, [pc, #208]	@ (8002424 <DioIrqHndlr+0x924>)
 8002354:	f7fe fa0c 	bl	8000770 <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002358:	b2a2      	uxth	r2, r4
 800235a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800235e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002362:	4831      	ldr	r0, [pc, #196]	@ (8002428 <DioIrqHndlr+0x928>)
 8002364:	f004 fbea 	bl	8006b3c <HAL_UART_Transmit>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <DioIrqHndlr+0x884>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800236e:	b2a2      	uxth	r2, r4
 8002370:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002374:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002378:	482c      	ldr	r0, [pc, #176]	@ (800242c <DioIrqHndlr+0x92c>)
 800237a:	f004 fbdf 	bl	8006b3c <HAL_UART_Transmit>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d03c      	beq.n	80023fe <DioIrqHndlr+0x8fe>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800238a:	e00e      	b.n	80023aa <DioIrqHndlr+0x8aa>
									myDebug("%02x ", main_gs_cmd[i]);
 800238c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002394:	4413      	add	r3, r2
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	4825      	ldr	r0, [pc, #148]	@ (8002430 <DioIrqHndlr+0x930>)
 800239c:	f7fe f9e8 	bl	8000770 <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80023a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023a4:	3301      	adds	r3, #1
 80023a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbea      	blt.n	800238c <DioIrqHndlr+0x88c>
								}

								myDebug("\r\n");
 80023b6:	481f      	ldr	r0, [pc, #124]	@ (8002434 <DioIrqHndlr+0x934>)
 80023b8:	f7fe f9da 	bl	8000770 <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80023bc:	4623      	mov	r3, r4
 80023be:	461a      	mov	r2, r3
 80023c0:	2100      	movs	r1, #0
 80023c2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80023c6:	f009 fdf1 	bl	800bfac <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80023ca:	2269      	movs	r2, #105	@ 0x69
 80023cc:	2100      	movs	r1, #0
 80023ce:	481a      	ldr	r0, [pc, #104]	@ (8002438 <DioIrqHndlr+0x938>)
 80023d0:	f009 fdec 	bl	800bfac <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80023d4:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 80023d6:	461a      	mov	r2, r3
 80023d8:	2100      	movs	r1, #0
 80023da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80023de:	f009 fde5 	bl	800bfac <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 80023e2:	462b      	mov	r3, r5
 80023e4:	461a      	mov	r2, r3
 80023e6:	2100      	movs	r1, #0
 80023e8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80023ec:	f009 fdde 	bl	800bfac <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80023f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023f4:	2264      	movs	r2, #100	@ 0x64
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f009 fdd7 	bl	800bfac <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 80023fe:	4b03      	ldr	r3, [pc, #12]	@ (800240c <DioIrqHndlr+0x90c>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e28d      	b.n	8002922 <DioIrqHndlr+0xe22>
 8002406:	bf00      	nop
 8002408:	20000004 	.word	0x20000004
 800240c:	20000810 	.word	0x20000810
 8002410:	2000094c 	.word	0x2000094c
 8002414:	20000954 	.word	0x20000954
 8002418:	0800ce70 	.word	0x0800ce70
 800241c:	200007b8 	.word	0x200007b8
 8002420:	200007b6 	.word	0x200007b6
 8002424:	0800ce90 	.word	0x0800ce90
 8002428:	200003a4 	.word	0x200003a4
 800242c:	2000027c 	.word	0x2000027c
 8002430:	0800cacc 	.word	0x0800cacc
 8002434:	0800cad4 	.word	0x0800cad4
 8002438:	2000074c 	.word	0x2000074c
 800243c:	20000684 	.word	0x20000684
 8002440:	0800ceb4 	.word	0x0800ceb4
 8002444:	20000008 	.word	0x20000008

						} else if (main_gs_cmd[18] == 0x53
 8002448:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800244c:	7c9b      	ldrb	r3, [r3, #18]
 800244e:	2b53      	cmp	r3, #83	@ 0x53
 8002450:	d166      	bne.n	8002520 <DioIrqHndlr+0xa20>
								&& main_gs_cmd[19] == 0x02
 8002452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002456:	7cdb      	ldrb	r3, [r3, #19]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d161      	bne.n	8002520 <DioIrqHndlr+0xa20>
								&& main_gs_cmd[20] == 0x53) { // if digipeater packet
 800245c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002460:	7d1b      	ldrb	r3, [r3, #20]
 8002462:	2b53      	cmp	r3, #83	@ 0x53
 8002464:	d15c      	bne.n	8002520 <DioIrqHndlr+0xa20>
							myDebug(
 8002466:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800246a:	48b7      	ldr	r0, [pc, #732]	@ (8002748 <DioIrqHndlr+0xc48>)
 800246c:	f7fe f980 	bl	8000770 <myDebug>
									"\nDigipeater packet sent to OBC, Length: %d\r\n",
									gs_cmd_len);
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002470:	b2a2      	uxth	r2, r4
 8002472:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002476:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800247a:	48b4      	ldr	r0, [pc, #720]	@ (800274c <DioIrqHndlr+0xc4c>)
 800247c:	f004 fb5e 	bl	8006b3c <HAL_UART_Transmit>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <DioIrqHndlr+0x99e>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002486:	b2a2      	uxth	r2, r4
 8002488:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800248c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002490:	48af      	ldr	r0, [pc, #700]	@ (8002750 <DioIrqHndlr+0xc50>)
 8002492:	f004 fb53 	bl	8006b3c <HAL_UART_Transmit>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 823f 	beq.w	800291c <DioIrqHndlr+0xe1c>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024a4:	e00e      	b.n	80024c4 <DioIrqHndlr+0x9c4>
									myDebug("%02x ", main_gs_cmd[i]);
 80024a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	48a7      	ldr	r0, [pc, #668]	@ (8002754 <DioIrqHndlr+0xc54>)
 80024b6:	f7fe f95b 	bl	8000770 <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80024ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024be:	3301      	adds	r3, #1
 80024c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbea      	blt.n	80024a6 <DioIrqHndlr+0x9a6>
								}

								myDebug("\r\n");
 80024d0:	48a1      	ldr	r0, [pc, #644]	@ (8002758 <DioIrqHndlr+0xc58>)
 80024d2:	f7fe f94d 	bl	8000770 <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80024d6:	4623      	mov	r3, r4
 80024d8:	461a      	mov	r2, r3
 80024da:	2100      	movs	r1, #0
 80024dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80024e0:	f009 fd64 	bl	800bfac <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80024e4:	2269      	movs	r2, #105	@ 0x69
 80024e6:	2100      	movs	r1, #0
 80024e8:	489c      	ldr	r0, [pc, #624]	@ (800275c <DioIrqHndlr+0xc5c>)
 80024ea:	f009 fd5f 	bl	800bfac <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80024ee:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 80024f0:	461a      	mov	r2, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80024f8:	f009 fd58 	bl	800bfac <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 80024fc:	462b      	mov	r3, r5
 80024fe:	461a      	mov	r2, r3
 8002500:	2100      	movs	r1, #0
 8002502:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002506:	f009 fd51 	bl	800bfac <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800250a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800250e:	2264      	movs	r2, #100	@ 0x64
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f009 fd4a 	bl	800bfac <memset>

								myDebug(
 8002518:	4891      	ldr	r0, [pc, #580]	@ (8002760 <DioIrqHndlr+0xc60>)
 800251a:	f7fe f929 	bl	8000770 <myDebug>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800251e:	e1fd      	b.n	800291c <DioIrqHndlr+0xe1c>
										"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");
							}
						} else {
							myDebug("\n********GS Command failed: 0x%x\r\n");
 8002520:	4890      	ldr	r0, [pc, #576]	@ (8002764 <DioIrqHndlr+0xc64>)
 8002522:	f7fe f925 	bl	8000770 <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8002526:	4b90      	ldr	r3, [pc, #576]	@ (8002768 <DioIrqHndlr+0xc68>)
 8002528:	2253      	movs	r2, #83	@ 0x53
 800252a:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 800252c:	4b8e      	ldr	r3, [pc, #568]	@ (8002768 <DioIrqHndlr+0xc68>)
 800252e:	22ac      	movs	r2, #172	@ 0xac
 8002530:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8002532:	4b8d      	ldr	r3, [pc, #564]	@ (8002768 <DioIrqHndlr+0xc68>)
 8002534:	2204      	movs	r2, #4
 8002536:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8002538:	4b8b      	ldr	r3, [pc, #556]	@ (8002768 <DioIrqHndlr+0xc68>)
 800253a:	2202      	movs	r2, #2
 800253c:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 800253e:	4b8a      	ldr	r3, [pc, #552]	@ (8002768 <DioIrqHndlr+0xc68>)
 8002540:	22fc      	movs	r2, #252	@ 0xfc
 8002542:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 8002544:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <DioIrqHndlr+0xc68>)
 8002546:	22ee      	movs	r2, #238	@ 0xee
 8002548:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 800254a:	4b87      	ldr	r3, [pc, #540]	@ (8002768 <DioIrqHndlr+0xc68>)
 800254c:	789a      	ldrb	r2, [r3, #2]
 800254e:	4b87      	ldr	r3, [pc, #540]	@ (800276c <DioIrqHndlr+0xc6c>)
 8002550:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002552:	4b87      	ldr	r3, [pc, #540]	@ (8002770 <DioIrqHndlr+0xc70>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002558:	4623      	mov	r3, r4
 800255a:	461a      	mov	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002562:	f009 fd23 	bl	800bfac <memset>
 8002566:	e1dc      	b.n	8002922 <DioIrqHndlr+0xe22>

						}
					} else if (DIGIPEATER_STATUS == 0) {
 8002568:	4b82      	ldr	r3, [pc, #520]	@ (8002774 <DioIrqHndlr+0xc74>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 81d8 	bne.w	8002922 <DioIrqHndlr+0xe22>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002576:	7c9b      	ldrb	r3, [r3, #18]
 8002578:	2bfd      	cmp	r3, #253	@ 0xfd
 800257a:	f040 808d 	bne.w	8002698 <DioIrqHndlr+0xb98>
 800257e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002582:	7cdb      	ldrb	r3, [r3, #19]
 8002584:	2bba      	cmp	r3, #186	@ 0xba
 8002586:	f040 8087 	bne.w	8002698 <DioIrqHndlr+0xb98>
								&& main_gs_cmd[20] == 0xD0) {
 800258a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800258e:	7d1b      	ldrb	r3, [r3, #20]
 8002590:	2bd0      	cmp	r3, #208	@ 0xd0
 8002592:	f040 8081 	bne.w	8002698 <DioIrqHndlr+0xb98>

							BEACON_COUNT = 2;
 8002596:	4b78      	ldr	r3, [pc, #480]	@ (8002778 <DioIrqHndlr+0xc78>)
 8002598:	2202      	movs	r2, #2
 800259a:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 800259c:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <DioIrqHndlr+0xc70>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 80025a2:	4b74      	ldr	r3, [pc, #464]	@ (8002774 <DioIrqHndlr+0xc74>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 80025a8:	4b74      	ldr	r3, [pc, #464]	@ (800277c <DioIrqHndlr+0xc7c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE OFF\n\n");
 80025ae:	4874      	ldr	r0, [pc, #464]	@ (8002780 <DioIrqHndlr+0xc80>)
 80025b0:	f7fe f8de 	bl	8000770 <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 80025b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002768 <DioIrqHndlr+0xc68>)
 80025b6:	2253      	movs	r2, #83	@ 0x53
 80025b8:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 80025ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002768 <DioIrqHndlr+0xc68>)
 80025bc:	22ac      	movs	r2, #172	@ 0xac
 80025be:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 80025c0:	4b69      	ldr	r3, [pc, #420]	@ (8002768 <DioIrqHndlr+0xc68>)
 80025c2:	2204      	movs	r2, #4
 80025c4:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 80025c6:	4b68      	ldr	r3, [pc, #416]	@ (8002768 <DioIrqHndlr+0xc68>)
 80025c8:	2202      	movs	r2, #2
 80025ca:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 80025cc:	4b66      	ldr	r3, [pc, #408]	@ (8002768 <DioIrqHndlr+0xc68>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 80025d2:	4b65      	ldr	r3, [pc, #404]	@ (8002768 <DioIrqHndlr+0xc68>)
 80025d4:	22dd      	movs	r2, #221	@ 0xdd
 80025d6:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 80025d8:	4b63      	ldr	r3, [pc, #396]	@ (8002768 <DioIrqHndlr+0xc68>)
 80025da:	789a      	ldrb	r2, [r3, #2]
 80025dc:	4b63      	ldr	r3, [pc, #396]	@ (800276c <DioIrqHndlr+0xc6c>)
 80025de:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 80025e0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80025e4:	4867      	ldr	r0, [pc, #412]	@ (8002784 <DioIrqHndlr+0xc84>)
 80025e6:	f7fe f8c3 	bl	8000770 <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 80025ea:	b2a2      	uxth	r2, r4
 80025ec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80025f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80025f4:	4855      	ldr	r0, [pc, #340]	@ (800274c <DioIrqHndlr+0xc4c>)
 80025f6:	f004 faa1 	bl	8006b3c <HAL_UART_Transmit>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <DioIrqHndlr+0xb16>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002600:	b2a2      	uxth	r2, r4
 8002602:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002606:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800260a:	4851      	ldr	r0, [pc, #324]	@ (8002750 <DioIrqHndlr+0xc50>)
 800260c:	f004 fa96 	bl	8006b3c <HAL_UART_Transmit>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d03c      	beq.n	8002690 <DioIrqHndlr+0xb90>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800261c:	e00e      	b.n	800263c <DioIrqHndlr+0xb3c>
									myDebug("%02x ", main_gs_cmd[i]);
 800261e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4849      	ldr	r0, [pc, #292]	@ (8002754 <DioIrqHndlr+0xc54>)
 800262e:	f7fe f89f 	bl	8000770 <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 8002632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002636:	3301      	adds	r3, #1
 8002638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800263c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002644:	429a      	cmp	r2, r3
 8002646:	dbea      	blt.n	800261e <DioIrqHndlr+0xb1e>
								}
								myDebug("\r\n");
 8002648:	4843      	ldr	r0, [pc, #268]	@ (8002758 <DioIrqHndlr+0xc58>)
 800264a:	f7fe f891 	bl	8000770 <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 800264e:	4623      	mov	r3, r4
 8002650:	461a      	mov	r2, r3
 8002652:	2100      	movs	r1, #0
 8002654:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002658:	f009 fca8 	bl	800bfac <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 800265c:	2269      	movs	r2, #105	@ 0x69
 800265e:	2100      	movs	r1, #0
 8002660:	483e      	ldr	r0, [pc, #248]	@ (800275c <DioIrqHndlr+0xc5c>)
 8002662:	f009 fca3 	bl	800bfac <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8002666:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 8002668:	461a      	mov	r2, r3
 800266a:	2100      	movs	r1, #0
 800266c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002670:	f009 fc9c 	bl	800bfac <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8002674:	462b      	mov	r3, r5
 8002676:	461a      	mov	r2, r3
 8002678:	2100      	movs	r1, #0
 800267a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800267e:	f009 fc95 	bl	800bfac <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8002682:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002686:	2264      	movs	r2, #100	@ 0x64
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f009 fc8e 	bl	800bfac <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002690:	4b37      	ldr	r3, [pc, #220]	@ (8002770 <DioIrqHndlr+0xc70>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e144      	b.n	8002922 <DioIrqHndlr+0xe22>

						} else if (main_gs_cmd[18] == 0xDF
 8002698:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800269c:	7c9b      	ldrb	r3, [r3, #18]
 800269e:	2bdf      	cmp	r3, #223	@ 0xdf
 80026a0:	f040 80b0 	bne.w	8002804 <DioIrqHndlr+0xd04>
								&& main_gs_cmd[19] == 0xAB
 80026a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026a8:	7cdb      	ldrb	r3, [r3, #19]
 80026aa:	2bab      	cmp	r3, #171	@ 0xab
 80026ac:	f040 80aa 	bne.w	8002804 <DioIrqHndlr+0xd04>
								&& main_gs_cmd[20] == 0xD1) {
 80026b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026b4:	7d1b      	ldrb	r3, [r3, #20]
 80026b6:	2bd1      	cmp	r3, #209	@ 0xd1
 80026b8:	f040 80a4 	bne.w	8002804 <DioIrqHndlr+0xd04>

							BEACON_COUNT = 0;
 80026bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002778 <DioIrqHndlr+0xc78>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80026c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <DioIrqHndlr+0xc70>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 1;
 80026c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <DioIrqHndlr+0xc74>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
							DIGIPEATER_RX_FLAG = 1;
 80026ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <DioIrqHndlr+0xc88>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE ON\n\n");
 80026d4:	482d      	ldr	r0, [pc, #180]	@ (800278c <DioIrqHndlr+0xc8c>)
 80026d6:	f7fe f84b 	bl	8000770 <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 80026da:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <DioIrqHndlr+0xc68>)
 80026dc:	2253      	movs	r2, #83	@ 0x53
 80026de:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 80026e0:	4b21      	ldr	r3, [pc, #132]	@ (8002768 <DioIrqHndlr+0xc68>)
 80026e2:	22ac      	movs	r2, #172	@ 0xac
 80026e4:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <DioIrqHndlr+0xc68>)
 80026e8:	2204      	movs	r2, #4
 80026ea:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 80026ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <DioIrqHndlr+0xc68>)
 80026ee:	2202      	movs	r2, #2
 80026f0:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x01;	//Digipeater ON
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <DioIrqHndlr+0xc68>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 80026f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <DioIrqHndlr+0xc68>)
 80026fa:	22dd      	movs	r2, #221	@ 0xdd
 80026fc:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 80026fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <DioIrqHndlr+0xc68>)
 8002700:	789a      	ldrb	r2, [r3, #2]
 8002702:	4b1a      	ldr	r3, [pc, #104]	@ (800276c <DioIrqHndlr+0xc6c>)
 8002704:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8002706:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800270a:	481e      	ldr	r0, [pc, #120]	@ (8002784 <DioIrqHndlr+0xc84>)
 800270c:	f7fe f830 	bl	8000770 <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002710:	b2a2      	uxth	r2, r4
 8002712:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002716:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800271a:	480c      	ldr	r0, [pc, #48]	@ (800274c <DioIrqHndlr+0xc4c>)
 800271c:	f004 fa0e 	bl	8006b3c <HAL_UART_Transmit>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <DioIrqHndlr+0xc3e>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002726:	b2a2      	uxth	r2, r4
 8002728:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800272c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002730:	4807      	ldr	r0, [pc, #28]	@ (8002750 <DioIrqHndlr+0xc50>)
 8002732:	f004 fa03 	bl	8006b3c <HAL_UART_Transmit>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80f1 	beq.w	8002920 <DioIrqHndlr+0xe20>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002744:	e033      	b.n	80027ae <DioIrqHndlr+0xcae>
 8002746:	bf00      	nop
 8002748:	0800ced0 	.word	0x0800ced0
 800274c:	200003a4 	.word	0x200003a4
 8002750:	2000027c 	.word	0x2000027c
 8002754:	0800cacc 	.word	0x0800cacc
 8002758:	0800cad4 	.word	0x0800cad4
 800275c:	2000074c 	.word	0x2000074c
 8002760:	0800cf00 	.word	0x0800cf00
 8002764:	0800ce4c 	.word	0x0800ce4c
 8002768:	200007b8 	.word	0x200007b8
 800276c:	200007b6 	.word	0x200007b6
 8002770:	20000810 	.word	0x20000810
 8002774:	2000094c 	.word	0x2000094c
 8002778:	20000004 	.word	0x20000004
 800277c:	20000954 	.word	0x20000954
 8002780:	0800ce70 	.word	0x0800ce70
 8002784:	0800ce90 	.word	0x0800ce90
 8002788:	20000958 	.word	0x20000958
 800278c:	0800cf28 	.word	0x0800cf28
									myDebug("%02x ", main_gs_cmd[i]);
 8002790:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	487f      	ldr	r0, [pc, #508]	@ (800299c <DioIrqHndlr+0xe9c>)
 80027a0:	f7fd ffe6 	bl	8000770 <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80027a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027a8:	3301      	adds	r3, #1
 80027aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80027ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80027b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbea      	blt.n	8002790 <DioIrqHndlr+0xc90>
								}

								myDebug("\r\n");
 80027ba:	4879      	ldr	r0, [pc, #484]	@ (80029a0 <DioIrqHndlr+0xea0>)
 80027bc:	f7fd ffd8 	bl	8000770 <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80027c0:	4623      	mov	r3, r4
 80027c2:	461a      	mov	r2, r3
 80027c4:	2100      	movs	r1, #0
 80027c6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80027ca:	f009 fbef 	bl	800bfac <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80027ce:	2269      	movs	r2, #105	@ 0x69
 80027d0:	2100      	movs	r1, #0
 80027d2:	4874      	ldr	r0, [pc, #464]	@ (80029a4 <DioIrqHndlr+0xea4>)
 80027d4:	f009 fbea 	bl	800bfac <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80027d8:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 80027da:	461a      	mov	r2, r3
 80027dc:	2100      	movs	r1, #0
 80027de:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80027e2:	f009 fbe3 	bl	800bfac <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 80027e6:	462b      	mov	r3, r5
 80027e8:	461a      	mov	r2, r3
 80027ea:	2100      	movs	r1, #0
 80027ec:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80027f0:	f009 fbdc 	bl	800bfac <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80027f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027f8:	2264      	movs	r2, #100	@ 0x64
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f009 fbd5 	bl	800bfac <memset>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002802:	e08d      	b.n	8002920 <DioIrqHndlr+0xe20>
							}

						} else if (main_gs_cmd[18] == 0x53
 8002804:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002808:	7c9b      	ldrb	r3, [r3, #18]
 800280a:	2b53      	cmp	r3, #83	@ 0x53
 800280c:	d12d      	bne.n	800286a <DioIrqHndlr+0xd6a>
								&& main_gs_cmd[19] == 0x02
 800280e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002812:	7cdb      	ldrb	r3, [r3, #19]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d128      	bne.n	800286a <DioIrqHndlr+0xd6a>
								&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 8002818:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800281c:	7d1b      	ldrb	r3, [r3, #20]
 800281e:	2b53      	cmp	r3, #83	@ 0x53
 8002820:	d123      	bne.n	800286a <DioIrqHndlr+0xd6a>

							myDebug("\n********GS Command failed: 0x%x\r\n");
 8002822:	4861      	ldr	r0, [pc, #388]	@ (80029a8 <DioIrqHndlr+0xea8>)
 8002824:	f7fd ffa4 	bl	8000770 <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 8002828:	4b60      	ldr	r3, [pc, #384]	@ (80029ac <DioIrqHndlr+0xeac>)
 800282a:	2253      	movs	r2, #83	@ 0x53
 800282c:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 800282e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002830:	22ac      	movs	r2, #172	@ 0xac
 8002832:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8002834:	4b5d      	ldr	r3, [pc, #372]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002836:	2204      	movs	r2, #4
 8002838:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 800283a:	4b5c      	ldr	r3, [pc, #368]	@ (80029ac <DioIrqHndlr+0xeac>)
 800283c:	2202      	movs	r2, #2
 800283e:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 8002840:	4b5a      	ldr	r3, [pc, #360]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002842:	22fc      	movs	r2, #252	@ 0xfc
 8002844:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 8002846:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002848:	22ee      	movs	r2, #238	@ 0xee
 800284a:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 800284c:	4b57      	ldr	r3, [pc, #348]	@ (80029ac <DioIrqHndlr+0xeac>)
 800284e:	789a      	ldrb	r2, [r3, #2]
 8002850:	4b57      	ldr	r3, [pc, #348]	@ (80029b0 <DioIrqHndlr+0xeb0>)
 8002852:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002854:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <DioIrqHndlr+0xeb4>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 800285a:	4623      	mov	r3, r4
 800285c:	461a      	mov	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002864:	f009 fba2 	bl	800bfac <memset>
 8002868:	e05b      	b.n	8002922 <DioIrqHndlr+0xe22>

						} else {
							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 800286a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800286e:	4852      	ldr	r0, [pc, #328]	@ (80029b8 <DioIrqHndlr+0xeb8>)
 8002870:	f7fd ff7e 	bl	8000770 <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002874:	b2a2      	uxth	r2, r4
 8002876:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800287a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800287e:	484f      	ldr	r0, [pc, #316]	@ (80029bc <DioIrqHndlr+0xebc>)
 8002880:	f004 f95c 	bl	8006b3c <HAL_UART_Transmit>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <DioIrqHndlr+0xda0>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800288a:	b2a2      	uxth	r2, r4
 800288c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002890:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002894:	484a      	ldr	r0, [pc, #296]	@ (80029c0 <DioIrqHndlr+0xec0>)
 8002896:	f004 f951 	bl	8006b3c <HAL_UART_Transmit>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d040      	beq.n	8002922 <DioIrqHndlr+0xe22>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028a6:	e00e      	b.n	80028c6 <DioIrqHndlr+0xdc6>
									myDebug("%02x ", main_gs_cmd[i]);
 80028a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80028ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028b0:	4413      	add	r3, r2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4839      	ldr	r0, [pc, #228]	@ (800299c <DioIrqHndlr+0xe9c>)
 80028b8:	f7fd ff5a 	bl	8000770 <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80028bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028c0:	3301      	adds	r3, #1
 80028c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80028ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dbea      	blt.n	80028a8 <DioIrqHndlr+0xda8>
								}

								myDebug("\r\n");
 80028d2:	4833      	ldr	r0, [pc, #204]	@ (80029a0 <DioIrqHndlr+0xea0>)
 80028d4:	f7fd ff4c 	bl	8000770 <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80028d8:	4623      	mov	r3, r4
 80028da:	461a      	mov	r2, r3
 80028dc:	2100      	movs	r1, #0
 80028de:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80028e2:	f009 fb63 	bl	800bfac <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80028e6:	2269      	movs	r2, #105	@ 0x69
 80028e8:	2100      	movs	r1, #0
 80028ea:	482e      	ldr	r0, [pc, #184]	@ (80029a4 <DioIrqHndlr+0xea4>)
 80028ec:	f009 fb5e 	bl	800bfac <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80028f0:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 80028f2:	461a      	mov	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80028fa:	f009 fb57 	bl	800bfac <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 80028fe:	462b      	mov	r3, r5
 8002900:	461a      	mov	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002908:	f009 fb50 	bl	800bfac <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800290c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002910:	2264      	movs	r2, #100	@ 0x64
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f009 fb49 	bl	800bfac <memset>
 800291a:	e002      	b.n	8002922 <DioIrqHndlr+0xe22>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800291c:	bf00      	nop
 800291e:	e000      	b.n	8002922 <DioIrqHndlr+0xe22>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002920:	bf00      	nop
 8002922:	46b5      	mov	sp, r6
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8002924:	e01b      	b.n	800295e <DioIrqHndlr+0xe5e>

						}
					}
				}
			} else {
				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 8002926:	4827      	ldr	r0, [pc, #156]	@ (80029c4 <DioIrqHndlr+0xec4>)
 8002928:	f7fd ff22 	bl	8000770 <myDebug>

				OBC_UART_RX[0] = 0x53;	//header
 800292c:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <DioIrqHndlr+0xeac>)
 800292e:	2253      	movs	r2, #83	@ 0x53
 8002930:	701a      	strb	r2, [r3, #0]
				OBC_UART_RX[1] = 0xac;	//packet_ type
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002934:	22ac      	movs	r2, #172	@ 0xac
 8002936:	705a      	strb	r2, [r3, #1]
				OBC_UART_RX[2] = 0x04;	//length of info
 8002938:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <DioIrqHndlr+0xeac>)
 800293a:	2204      	movs	r2, #4
 800293c:	709a      	strb	r2, [r3, #2]
				OBC_UART_RX[3] = 0x02;	//mcu_no
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002940:	2202      	movs	r2, #2
 8002942:	70da      	strb	r2, [r3, #3]
				OBC_UART_RX[4] = 0xcc;	//checksum_error
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002946:	22cc      	movs	r2, #204	@ 0xcc
 8002948:	711a      	strb	r2, [r3, #4]
				OBC_UART_RX[5] = 0xee;	//error prefix
 800294a:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <DioIrqHndlr+0xeac>)
 800294c:	22ee      	movs	r2, #238	@ 0xee
 800294e:	715a      	strb	r2, [r3, #5]
				obc_ilen = OBC_UART_RX[2];
 8002950:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <DioIrqHndlr+0xeac>)
 8002952:	789a      	ldrb	r2, [r3, #2]
 8002954:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <DioIrqHndlr+0xeb0>)
 8002956:	701a      	strb	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002958:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <DioIrqHndlr+0xeb4>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	46cd      	mov	sp, r9
			obc_ilen = OBC_UART_RX[2];

			OBC_SUCCESS_DATA_RX_FLAG = 1;
		}

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8002960:	4819      	ldr	r0, [pc, #100]	@ (80029c8 <DioIrqHndlr+0xec8>)
 8002962:	f008 f8f1 	bl	800ab48 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002966:	2100      	movs	r1, #0
 8002968:	2001      	movs	r0, #1
 800296a:	f008 fd35 	bl	800b3d8 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800296e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8002972:	f007 ff15 	bl	800a7a0 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <DioIrqHndlr+0xecc>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	490b      	ldr	r1, [pc, #44]	@ (80029ac <DioIrqHndlr+0xeac>)
 800297e:	480f      	ldr	r0, [pc, #60]	@ (80029bc <DioIrqHndlr+0xebc>)
 8002980:	f004 fa26 	bl	8006dd0 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <DioIrqHndlr+0xecc>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	@ (80029ac <DioIrqHndlr+0xeac>)
 800298c:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <DioIrqHndlr+0xec0>)
 800298e:	f004 fa1f 	bl	8006dd0 <HAL_UART_Receive_DMA>

	}

}
 8002992:	bf00      	nop
 8002994:	37ec      	adds	r7, #236	@ 0xec
 8002996:	46bd      	mov	sp, r7
 8002998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800299c:	0800cacc 	.word	0x0800cacc
 80029a0:	0800cad4 	.word	0x0800cad4
 80029a4:	2000074c 	.word	0x2000074c
 80029a8:	0800ce4c 	.word	0x0800ce4c
 80029ac:	200007b8 	.word	0x200007b8
 80029b0:	200007b6 	.word	0x200007b6
 80029b4:	20000810 	.word	0x20000810
 80029b8:	0800ce90 	.word	0x0800ce90
 80029bc:	200003a4 	.word	0x200003a4
 80029c0:	2000027c 	.word	0x2000027c
 80029c4:	0800cf48 	.word	0x0800cf48
 80029c8:	19f25968 	.word	0x19f25968
 80029cc:	20000001 	.word	0x20000001

080029d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d4:	b672      	cpsid	i
}
 80029d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <Error_Handler+0x8>

080029dc <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 80029e2:	2207      	movs	r2, #7
 80029e4:	2100      	movs	r1, #0
 80029e6:	486c      	ldr	r0, [pc, #432]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80029e8:	f009 fae0 	bl	800bfac <memset>
	OBC_HANDSHAKE_FLAG = 0;
 80029ec:	4b6b      	ldr	r3, [pc, #428]	@ (8002b9c <WAIT_FOR_HANDSHAKE+0x1c0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 80029f2:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80029f6:	2207      	movs	r2, #7
 80029f8:	4967      	ldr	r1, [pc, #412]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80029fa:	4869      	ldr	r0, [pc, #420]	@ (8002ba0 <WAIT_FOR_HANDSHAKE+0x1c4>)
 80029fc:	f004 f924 	bl	8006c48 <HAL_UART_Receive>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002a06:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	4962      	ldr	r1, [pc, #392]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a0e:	4865      	ldr	r0, [pc, #404]	@ (8002ba4 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002a10:	f004 f91a 	bl	8006c48 <HAL_UART_Receive>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 80aa 	bne.w	8002b70 <WAIT_FOR_HANDSHAKE+0x194>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 8002a1c:	4862      	ldr	r0, [pc, #392]	@ (8002ba8 <WAIT_FOR_HANDSHAKE+0x1cc>)
 8002a1e:	f7fd fea7 	bl	8000770 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e00a      	b.n	8002a3e <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 8002a28:	4a5b      	ldr	r2, [pc, #364]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	485e      	ldr	r0, [pc, #376]	@ (8002bac <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002a34:	f7fd fe9c 	bl	8000770 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	ddf1      	ble.n	8002a28 <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 8002a44:	485a      	ldr	r0, [pc, #360]	@ (8002bb0 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002a46:	f7fd fe93 	bl	8000770 <myDebug>

		uint8_t header = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 8002a4e:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	79fa      	ldrb	r2, [r7, #7]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d111      	bne.n	8002a7c <WAIT_FOR_HANDSHAKE+0xa0>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e00b      	b.n	8002a76 <WAIT_FOR_HANDSHAKE+0x9a>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3301      	adds	r3, #1
 8002a62:	4a4d      	ldr	r2, [pc, #308]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a64:	5cd1      	ldrb	r1, [r2, r3]
 8002a66:	4a4c      	ldr	r2, [pc, #304]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	460a      	mov	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	3301      	adds	r3, #1
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d9f0      	bls.n	8002a5e <WAIT_FOR_HANDSHAKE+0x82>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 8002a7c:	4b46      	ldr	r3, [pc, #280]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b53      	cmp	r3, #83	@ 0x53
 8002a82:	d13a      	bne.n	8002afa <WAIT_FOR_HANDSHAKE+0x11e>
 8002a84:	4b44      	ldr	r3, [pc, #272]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a86:	795b      	ldrb	r3, [r3, #5]
 8002a88:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a8a:	d136      	bne.n	8002afa <WAIT_FOR_HANDSHAKE+0x11e>
			myDebug("--> Command Acknowledged successful!\n");
 8002a8c:	4849      	ldr	r0, [pc, #292]	@ (8002bb4 <WAIT_FOR_HANDSHAKE+0x1d8>)
 8002a8e:	f7fd fe6f 	bl	8000770 <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002a92:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a96:	2207      	movs	r2, #7
 8002a98:	493f      	ldr	r1, [pc, #252]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a9a:	4841      	ldr	r0, [pc, #260]	@ (8002ba0 <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002a9c:	f004 f84e 	bl	8006b3c <HAL_UART_Transmit>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <WAIT_FOR_HANDSHAKE+0xde>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 2000)
 8002aa6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002aaa:	2207      	movs	r2, #7
 8002aac:	493a      	ldr	r1, [pc, #232]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002aae:	483d      	ldr	r0, [pc, #244]	@ (8002ba4 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002ab0:	f004 f844 	bl	8006b3c <HAL_UART_Transmit>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d158      	bne.n	8002b6c <WAIT_FOR_HANDSHAKE+0x190>
							== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 8002aba:	483f      	ldr	r0, [pc, #252]	@ (8002bb8 <WAIT_FOR_HANDSHAKE+0x1dc>)
 8002abc:	f7fd fe58 	bl	8000770 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e00a      	b.n	8002adc <WAIT_FOR_HANDSHAKE+0x100>
					myDebug("%02x ", MainCMDHs[i]);
 8002ac6:	4a34      	ldr	r2, [pc, #208]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4836      	ldr	r0, [pc, #216]	@ (8002bac <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002ad2:	f7fd fe4d 	bl	8000770 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	ddf1      	ble.n	8002ac6 <WAIT_FOR_HANDSHAKE+0xea>
				}
				myDebug("\n");
 8002ae2:	4833      	ldr	r0, [pc, #204]	@ (8002bb0 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002ae4:	f7fd fe44 	bl	8000770 <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b9c <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8002aee:	2207      	movs	r2, #7
 8002af0:	2100      	movs	r1, #0
 8002af2:	4829      	ldr	r0, [pc, #164]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002af4:	f009 fa5a 	bl	800bfac <memset>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002af8:	e038      	b.n	8002b6c <WAIT_FOR_HANDSHAKE+0x190>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 8002afa:	4830      	ldr	r0, [pc, #192]	@ (8002bbc <WAIT_FOR_HANDSHAKE+0x1e0>)
 8002afc:	f7fd fe38 	bl	8000770 <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002b00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b04:	2207      	movs	r2, #7
 8002b06:	4924      	ldr	r1, [pc, #144]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002b08:	4825      	ldr	r0, [pc, #148]	@ (8002ba0 <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002b0a:	f004 f817 	bl	8006b3c <HAL_UART_Transmit>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <WAIT_FOR_HANDSHAKE+0x14c>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002b14:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002b18:	2207      	movs	r2, #7
 8002b1a:	491f      	ldr	r1, [pc, #124]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002b1c:	4821      	ldr	r0, [pc, #132]	@ (8002ba4 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002b1e:	f004 f80d 	bl	8006b3c <HAL_UART_Transmit>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d131      	bne.n	8002b8c <WAIT_FOR_HANDSHAKE+0x1b0>
							== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 8002b28:	4825      	ldr	r0, [pc, #148]	@ (8002bc0 <WAIT_FOR_HANDSHAKE+0x1e4>)
 8002b2a:	f7fd fe21 	bl	8000770 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	e00a      	b.n	8002b4a <WAIT_FOR_HANDSHAKE+0x16e>
					myDebug("%02x ", MainCMDHs[i]);
 8002b34:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4413      	add	r3, r2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481b      	ldr	r0, [pc, #108]	@ (8002bac <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002b40:	f7fd fe16 	bl	8000770 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	ddf1      	ble.n	8002b34 <WAIT_FOR_HANDSHAKE+0x158>
				}
				myDebug("\n");
 8002b50:	4817      	ldr	r0, [pc, #92]	@ (8002bb0 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002b52:	f7fd fe0d 	bl	8000770 <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8002b56:	2207      	movs	r2, #7
 8002b58:	2100      	movs	r1, #0
 8002b5a:	480f      	ldr	r0, [pc, #60]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002b5c:	f009 fa26 	bl	800bfac <memset>
				OBC_HANDSHAKE_FLAG = 0;
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 8002b66:	f7ff ff39 	bl	80029dc <WAIT_FOR_HANDSHAKE>
					== HAL_OK) {
 8002b6a:	e00f      	b.n	8002b8c <WAIT_FOR_HANDSHAKE+0x1b0>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002b6c:	bf00      	nop
					== HAL_OK) {
 8002b6e:	e00d      	b.n	8002b8c <WAIT_FOR_HANDSHAKE+0x1b0>
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 8002b70:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 8002b76:	4813      	ldr	r0, [pc, #76]	@ (8002bc4 <WAIT_FOR_HANDSHAKE+0x1e8>)
 8002b78:	f7fd fdfa 	bl	8000770 <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4805      	ldr	r0, [pc, #20]	@ (8002b98 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002b82:	f009 fa13 	bl	800bfac <memset>
		WAIT_FOR_HANDSHAKE();
 8002b86:	f7ff ff29 	bl	80029dc <WAIT_FOR_HANDSHAKE>
	}
}
 8002b8a:	e000      	b.n	8002b8e <WAIT_FOR_HANDSHAKE+0x1b2>
					== HAL_OK) {
 8002b8c:	bf00      	nop
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000978 	.word	0x20000978
 8002b9c:	20000948 	.word	0x20000948
 8002ba0:	200003a4 	.word	0x200003a4
 8002ba4:	2000027c 	.word	0x2000027c
 8002ba8:	0800cf78 	.word	0x0800cf78
 8002bac:	0800cfa8 	.word	0x0800cfa8
 8002bb0:	0800cfb0 	.word	0x0800cfb0
 8002bb4:	0800cfb4 	.word	0x0800cfb4
 8002bb8:	0800cfdc 	.word	0x0800cfdc
 8002bbc:	0800d008 	.word	0x0800d008
 8002bc0:	0800d034 	.word	0x0800d034
 8002bc4:	0800d064 	.word	0x0800d064

08002bc8 <LL_AHB2_GRP1_EnableClock>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cac:	68fb      	ldr	r3, [r7, #12]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b096      	sub	sp, #88	@ 0x58
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	2238      	movs	r2, #56	@ 0x38
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f009 f961 	bl	800bfac <memset>
  if(huart->Instance==LPUART1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a99      	ldr	r2, [pc, #612]	@ (8002f54 <HAL_UART_MspInit+0x290>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f040 8092 	bne.w	8002e1a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fc40 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d0e:	f7ff fe5f 	bl	80029d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7ff ff88 	bl	8002c28 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d18:	2004      	movs	r0, #4
 8002d1a:	f7ff ff55 	bl	8002bc8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d2e:	2308      	movs	r3, #8
 8002d30:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d32:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d36:	4619      	mov	r1, r3
 8002d38:	4887      	ldr	r0, [pc, #540]	@ (8002f58 <HAL_UART_MspInit+0x294>)
 8002d3a:	f001 f899 	bl	8003e70 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002d3e:	4b87      	ldr	r3, [pc, #540]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d40:	4a87      	ldr	r2, [pc, #540]	@ (8002f60 <HAL_UART_MspInit+0x29c>)
 8002d42:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002d44:	4b85      	ldr	r3, [pc, #532]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d46:	2215      	movs	r2, #21
 8002d48:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d4a:	4b84      	ldr	r3, [pc, #528]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d50:	4b82      	ldr	r3, [pc, #520]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d56:	4b81      	ldr	r3, [pc, #516]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d58:	2280      	movs	r2, #128	@ 0x80
 8002d5a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d5c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d62:	4b7e      	ldr	r3, [pc, #504]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002d68:	4b7c      	ldr	r3, [pc, #496]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002d74:	4879      	ldr	r0, [pc, #484]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d76:	f000 fcf9 	bl	800376c <HAL_DMA_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002d80:	f7ff fe26 	bl	80029d0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d84:	2110      	movs	r1, #16
 8002d86:	4875      	ldr	r0, [pc, #468]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d88:	f000 ff9a 	bl	8003cc0 <HAL_DMA_ConfigChannelAttributes>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002d92:	f7ff fe1d 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a70      	ldr	r2, [pc, #448]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002d9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d9e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f5c <HAL_UART_MspInit+0x298>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002da4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002da6:	4a70      	ldr	r2, [pc, #448]	@ (8002f68 <HAL_UART_MspInit+0x2a4>)
 8002da8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002daa:	4b6e      	ldr	r3, [pc, #440]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002dac:	2216      	movs	r2, #22
 8002dae:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002db0:	4b6c      	ldr	r3, [pc, #432]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002db2:	2210      	movs	r2, #16
 8002db4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db6:	4b6b      	ldr	r3, [pc, #428]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dbc:	4b69      	ldr	r3, [pc, #420]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002dbe:	2280      	movs	r2, #128	@ 0x80
 8002dc0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc2:	4b68      	ldr	r3, [pc, #416]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc8:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002dce:	4b65      	ldr	r3, [pc, #404]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd4:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002dda:	4862      	ldr	r0, [pc, #392]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002ddc:	f000 fcc6 	bl	800376c <HAL_DMA_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002de6:	f7ff fdf3 	bl	80029d0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002dea:	2110      	movs	r1, #16
 8002dec:	485d      	ldr	r0, [pc, #372]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002dee:	f000 ff67 	bl	8003cc0 <HAL_DMA_ConfigChannelAttributes>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002df8:	f7ff fdea 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a59      	ldr	r2, [pc, #356]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002e00:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002e02:	4a58      	ldr	r2, [pc, #352]	@ (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2026      	movs	r0, #38	@ 0x26
 8002e0e:	f000 fc78 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002e12:	2026      	movs	r0, #38	@ 0x26
 8002e14:	f000 fc8f 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e18:	e14c      	b.n	80030b4 <HAL_UART_MspInit+0x3f0>
  else if(huart->Instance==USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a53      	ldr	r2, [pc, #332]	@ (8002f6c <HAL_UART_MspInit+0x2a8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	f040 80ad 	bne.w	8002f80 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e2a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002e2e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4618      	mov	r0, r3
 8002e36:	f002 fba7 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8002e40:	f7ff fdc6 	bl	80029d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e44:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e48:	f7ff ff06 	bl	8002c58 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7ff febb 	bl	8002bc8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002e52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e56:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e60:	2300      	movs	r3, #0
 8002e62:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e64:	2307      	movs	r3, #7
 8002e66:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e68:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e72:	f000 fffd 	bl	8003e70 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002e76:	4b3e      	ldr	r3, [pc, #248]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e78:	4a3e      	ldr	r2, [pc, #248]	@ (8002f74 <HAL_UART_MspInit+0x2b0>)
 8002e7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e7e:	2211      	movs	r2, #17
 8002e80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e88:	4b39      	ldr	r3, [pc, #228]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e8e:	4b38      	ldr	r3, [pc, #224]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e90:	2280      	movs	r2, #128	@ 0x80
 8002e92:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e94:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e9a:	4b35      	ldr	r3, [pc, #212]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ea0:	4b33      	ldr	r3, [pc, #204]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea6:	4b32      	ldr	r3, [pc, #200]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002eac:	4830      	ldr	r0, [pc, #192]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002eae:	f000 fc5d 	bl	800376c <HAL_DMA_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8002eb8:	f7ff fd8a 	bl	80029d0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	482c      	ldr	r0, [pc, #176]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002ec0:	f000 fefe 	bl	8003cc0 <HAL_DMA_ConfigChannelAttributes>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8002eca:	f7ff fd81 	bl	80029d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a27      	ldr	r2, [pc, #156]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002ed2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ed6:	4a26      	ldr	r2, [pc, #152]	@ (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002edc:	4b26      	ldr	r3, [pc, #152]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002ede:	4a27      	ldr	r2, [pc, #156]	@ (8002f7c <HAL_UART_MspInit+0x2b8>)
 8002ee0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ee2:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002ee4:	2212      	movs	r2, #18
 8002ee6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002eea:	2210      	movs	r2, #16
 8002eec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eee:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef4:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002ef6:	2280      	movs	r2, #128	@ 0x80
 8002ef8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002efa:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f12:	4819      	ldr	r0, [pc, #100]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002f14:	f000 fc2a 	bl	800376c <HAL_DMA_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8002f1e:	f7ff fd57 	bl	80029d0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f22:	2110      	movs	r1, #16
 8002f24:	4814      	ldr	r0, [pc, #80]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002f26:	f000 fecb 	bl	8003cc0 <HAL_DMA_ConfigChannelAttributes>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8002f30:	f7ff fd4e 	bl	80029d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002f38:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	2024      	movs	r0, #36	@ 0x24
 8002f46:	f000 fbdc 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f4a:	2024      	movs	r0, #36	@ 0x24
 8002f4c:	f000 fbf3 	bl	8003736 <HAL_NVIC_EnableIRQ>
}
 8002f50:	e0b0      	b.n	80030b4 <HAL_UART_MspInit+0x3f0>
 8002f52:	bf00      	nop
 8002f54:	40008000 	.word	0x40008000
 8002f58:	48000800 	.word	0x48000800
 8002f5c:	20000438 	.word	0x20000438
 8002f60:	40020008 	.word	0x40020008
 8002f64:	20000498 	.word	0x20000498
 8002f68:	4002001c 	.word	0x4002001c
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	200004f8 	.word	0x200004f8
 8002f74:	40020030 	.word	0x40020030
 8002f78:	20000558 	.word	0x20000558
 8002f7c:	40020044 	.word	0x40020044
  else if(huart->Instance==USART2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4d      	ldr	r2, [pc, #308]	@ (80030bc <HAL_UART_MspInit+0x3f8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	f040 8094 	bne.w	80030b4 <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f90:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002f94:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 faf4 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 8002fa6:	f7ff fd13 	bl	80029d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002faa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002fae:	f7ff fe23 	bl	8002bf8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f7ff fe08 	bl	8002bc8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002fb8:	230c      	movs	r3, #12
 8002fba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fc8:	2307      	movs	r3, #7
 8002fca:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd6:	f000 ff4b 	bl	8003e70 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8002fda:	4b39      	ldr	r3, [pc, #228]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8002fdc:	4a39      	ldr	r2, [pc, #228]	@ (80030c4 <HAL_UART_MspInit+0x400>)
 8002fde:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002fe0:	4b37      	ldr	r3, [pc, #220]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8002fe2:	2213      	movs	r2, #19
 8002fe4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe6:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff2:	4b33      	ldr	r3, [pc, #204]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff8:	4b31      	ldr	r3, [pc, #196]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ffe:	4b30      	ldr	r3, [pc, #192]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003004:	4b2e      	ldr	r3, [pc, #184]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800300a:	4b2d      	ldr	r3, [pc, #180]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 800300c:	2200      	movs	r2, #0
 800300e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003010:	482b      	ldr	r0, [pc, #172]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8003012:	f000 fbab 	bl	800376c <HAL_DMA_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 800301c:	f7ff fcd8 	bl	80029d0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003020:	2110      	movs	r1, #16
 8003022:	4827      	ldr	r0, [pc, #156]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8003024:	f000 fe4c 	bl	8003cc0 <HAL_DMA_ConfigChannelAttributes>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_MspInit+0x36e>
      Error_Handler();
 800302e:	f7ff fccf 	bl	80029d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a22      	ldr	r2, [pc, #136]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 8003036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800303a:	4a21      	ldr	r2, [pc, #132]	@ (80030c0 <HAL_UART_MspInit+0x3fc>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel6;
 8003040:	4b21      	ldr	r3, [pc, #132]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 8003042:	4a22      	ldr	r2, [pc, #136]	@ (80030cc <HAL_UART_MspInit+0x408>)
 8003044:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003046:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 8003048:	2214      	movs	r2, #20
 800304a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800304c:	4b1e      	ldr	r3, [pc, #120]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 800304e:	2210      	movs	r2, #16
 8003050:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003052:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003058:	4b1b      	ldr	r3, [pc, #108]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 800305a:	2280      	movs	r2, #128	@ 0x80
 800305c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800305e:	4b1a      	ldr	r3, [pc, #104]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003064:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 8003066:	2200      	movs	r2, #0
 8003068:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800306a:	4b17      	ldr	r3, [pc, #92]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003076:	4814      	ldr	r0, [pc, #80]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 8003078:	f000 fb78 	bl	800376c <HAL_DMA_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 8003082:	f7ff fca5 	bl	80029d0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003086:	2110      	movs	r1, #16
 8003088:	480f      	ldr	r0, [pc, #60]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 800308a:	f000 fe19 	bl	8003cc0 <HAL_DMA_ConfigChannelAttributes>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_UART_MspInit+0x3d4>
      Error_Handler();
 8003094:	f7ff fc9c 	bl	80029d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0b      	ldr	r2, [pc, #44]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 800309c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_UART_MspInit+0x404>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	2025      	movs	r0, #37	@ 0x25
 80030aa:	f000 fb2a 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030ae:	2025      	movs	r0, #37	@ 0x25
 80030b0:	f000 fb41 	bl	8003736 <HAL_NVIC_EnableIRQ>
}
 80030b4:	bf00      	nop
 80030b6:	3758      	adds	r7, #88	@ 0x58
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40004400 	.word	0x40004400
 80030c0:	200005b8 	.word	0x200005b8
 80030c4:	40020058 	.word	0x40020058
 80030c8:	20000618 	.word	0x20000618
 80030cc:	4002006c 	.word	0x4002006c

080030d0 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80030d8:	2001      	movs	r0, #1
 80030da:	f7ff fdd5 	bl	8002c88 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2032      	movs	r0, #50	@ 0x32
 80030e4:	f000 fb0d 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80030e8:	2032      	movs	r0, #50	@ 0x32
 80030ea:	f000 fb24 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <HAL_TIM_Base_MspInit+0x44>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800310a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800310e:	f7ff fda3 	bl	8002c58 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	2018      	movs	r0, #24
 8003118:	f000 faf3 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800311c:	2018      	movs	r0, #24
 800311e:	f000 fb0a 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003122:	e007      	b.n	8003134 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312c:	d102      	bne.n	8003134 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800312e:	2001      	movs	r0, #1
 8003130:	f7ff fd62 	bl	8002bf8 <LL_APB1_GRP1_EnableClock>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40012c00 	.word	0x40012c00

08003140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003144:	bf00      	nop
 8003146:	e7fd      	b.n	8003144 <NMI_Handler+0x4>

08003148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <HardFault_Handler+0x4>

08003150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <MemManage_Handler+0x4>

08003158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <BusFault_Handler+0x4>

08003160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <UsageFault_Handler+0x4>

08003168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003190:	f000 f9ce 	bl	8003530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}

08003198 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800319c:	4802      	ldr	r0, [pc, #8]	@ (80031a8 <DMA1_Channel1_IRQHandler+0x10>)
 800319e:	f000 fcc9 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000438 	.word	0x20000438

080031ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80031b0:	4802      	ldr	r0, [pc, #8]	@ (80031bc <DMA1_Channel2_IRQHandler+0x10>)
 80031b2:	f000 fcbf 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000498 	.word	0x20000498

080031c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031c4:	4802      	ldr	r0, [pc, #8]	@ (80031d0 <DMA1_Channel3_IRQHandler+0x10>)
 80031c6:	f000 fcb5 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200004f8 	.word	0x200004f8

080031d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80031d8:	4802      	ldr	r0, [pc, #8]	@ (80031e4 <DMA1_Channel4_IRQHandler+0x10>)
 80031da:	f000 fcab 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000558 	.word	0x20000558

080031e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031ec:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <DMA1_Channel5_IRQHandler+0x10>)
 80031ee:	f000 fca1 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200005b8 	.word	0x200005b8

080031fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003200:	4802      	ldr	r0, [pc, #8]	@ (800320c <DMA1_Channel6_IRQHandler+0x10>)
 8003202:	f000 fc97 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000618 	.word	0x20000618

08003210 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003214:	4802      	ldr	r0, [pc, #8]	@ (8003220 <TIM1_UP_IRQHandler+0x10>)
 8003216:	f003 f8a1 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000684 	.word	0x20000684

08003224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003228:	4802      	ldr	r0, [pc, #8]	@ (8003234 <USART1_IRQHandler+0x10>)
 800322a:	f003 fe1d 	bl	8006e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000310 	.word	0x20000310

08003238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800323c:	4802      	ldr	r0, [pc, #8]	@ (8003248 <USART2_IRQHandler+0x10>)
 800323e:	f003 fe13 	bl	8006e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200003a4 	.word	0x200003a4

0800324c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003250:	4802      	ldr	r0, [pc, #8]	@ (800325c <LPUART1_IRQHandler+0x10>)
 8003252:	f003 fe09 	bl	8006e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	2000027c 	.word	0x2000027c

08003260 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8003264:	4802      	ldr	r0, [pc, #8]	@ (8003270 <SUBGHZ_Radio_IRQHandler+0x10>)
 8003266:	f002 fdc5 	bl	8005df4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000678 	.word	0x20000678

08003274 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_GetTick+0x24>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8003292:	f000 f892 	bl	80033ba <TIMER_IF_GetTimerValue>
 8003296:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8003298:	687b      	ldr	r3, [r7, #4]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000097f 	.word	0x2000097f

080032a8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f8af 	bl	8003416 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c8:	4a14      	ldr	r2, [pc, #80]	@ (800331c <_sbrk+0x5c>)
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <_sbrk+0x60>)
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d4:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <_sbrk+0x64>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <_sbrk+0x64>)
 80032de:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <_sbrk+0x68>)
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <_sbrk+0x64>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d207      	bcs.n	8003300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032f0:	f008 fe64 	bl	800bfbc <__errno>
 80032f4:	4603      	mov	r3, r0
 80032f6:	220c      	movs	r2, #12
 80032f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	e009      	b.n	8003314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003300:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <_sbrk+0x64>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003306:	4b07      	ldr	r3, [pc, #28]	@ (8003324 <_sbrk+0x64>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <_sbrk+0x64>)
 8003310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20010000 	.word	0x20010000
 8003320:	00000400 	.word	0x00000400
 8003324:	20000980 	.word	0x20000980
 8003328:	20000c98 	.word	0x20000c98

0800332c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8003342:	79fb      	ldrb	r3, [r7, #7]
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8003370:	79fb      	ldrb	r3, [r7, #7]
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8003380:	4b02      	ldr	r3, [pc, #8]	@ (800338c <TIMER_IF_SetTimerContext+0x10>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000984 	.word	0x20000984

08003390 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8003394:	4b02      	ldr	r3, [pc, #8]	@ (80033a0 <TIMER_IF_GetTimerContext+0x10>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	20000984 	.word	0x20000984

080033a4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 80033ae:	687b      	ldr	r3, [r7, #4]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80033da:	687b      	ldr	r3, [r7, #4]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003428:	480d      	ldr	r0, [pc, #52]	@ (8003460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800342a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800342c:	f7ff ff7e 	bl	800332c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003430:	480c      	ldr	r0, [pc, #48]	@ (8003464 <LoopForever+0x6>)
  ldr r1, =_edata
 8003432:	490d      	ldr	r1, [pc, #52]	@ (8003468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003434:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <LoopForever+0xe>)
  movs r3, #0
 8003436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003438:	e002      	b.n	8003440 <LoopCopyDataInit>

0800343a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800343c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343e:	3304      	adds	r3, #4

08003440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003444:	d3f9      	bcc.n	800343a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003446:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003448:	4c0a      	ldr	r4, [pc, #40]	@ (8003474 <LoopForever+0x16>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800344c:	e001      	b.n	8003452 <LoopFillZerobss>

0800344e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003450:	3204      	adds	r2, #4

08003452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003454:	d3fb      	bcc.n	800344e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003456:	f008 fdb7 	bl	800bfc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800345a:	f7fd ff23 	bl	80012a4 <main>

0800345e <LoopForever>:

LoopForever:
    b LoopForever
 800345e:	e7fe      	b.n	800345e <LoopForever>
  ldr   r0, =_estack
 8003460:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003468:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800346c:	0800d350 	.word	0x0800d350
  ldr r2, =_sbss
 8003470:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003474:	20000c94 	.word	0x20000c94

08003478 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003478:	e7fe      	b.n	8003478 <ADC_IRQHandler>
	...

0800347c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003486:	2003      	movs	r0, #3
 8003488:	f000 f930 	bl	80036ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800348c:	f001 fe9e 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8003490:	4603      	mov	r3, r0
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_Init+0x3c>)
 8003494:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003496:	2000      	movs	r0, #0
 8003498:	f000 f810 	bl	80034bc <HAL_InitTick>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	71fb      	strb	r3, [r7, #7]
 80034a6:	e001      	b.n	80034ac <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034a8:	f7ff fc06 	bl	8002cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034ac:	79fb      	ldrb	r3, [r7, #7]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000000c 	.word	0x2000000c

080034bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <HAL_InitTick+0x6c>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d024      	beq.n	800351a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034d0:	f001 fe7c 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_InitTick+0x6c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f932 	bl	8003752 <HAL_SYSTICK_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10f      	bne.n	8003514 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	d809      	bhi.n	800350e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034fa:	2200      	movs	r2, #0
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003502:	f000 f8fe 	bl	8003702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003506:	4a09      	ldr	r2, [pc, #36]	@ (800352c <HAL_InitTick+0x70>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e007      	b.n	800351e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e004      	b.n	800351e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e001      	b.n	800351e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000014 	.word	0x20000014
 800352c:	20000010 	.word	0x20000010

08003530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_IncTick+0x1c>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_IncTick+0x20>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4413      	add	r3, r2
 8003540:	4a03      	ldr	r2, [pc, #12]	@ (8003550 <HAL_IncTick+0x20>)
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	20000014 	.word	0x20000014
 8003550:	20000988 	.word	0x20000988

08003554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003564:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800357c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003586:	4a04      	ldr	r2, [pc, #16]	@ (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	60d3      	str	r3, [r2, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a0:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <__NVIC_GetPriorityGrouping+0x18>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0307 	and.w	r3, r3, #7
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	db0b      	blt.n	80035e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4906      	ldr	r1, [pc, #24]	@ (80035ec <__NVIC_EnableIRQ+0x34>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2001      	movs	r0, #1
 80035da:	fa00 f202 	lsl.w	r2, r0, r2
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	@ (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	@ (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	@ 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	@ 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b8:	d301      	bcc.n	80036be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <SysTick_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f7ff ff90 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <SysTick_Config+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <SysTick_Config+0x40>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff2d 	bl	8003554 <__NVIC_SetPriorityGrouping>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003710:	f7ff ff44 	bl	800359c <__NVIC_GetPriorityGrouping>
 8003714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f7ff ff92 	bl	8003644 <NVIC_EncodePriority>
 8003720:	4602      	mov	r2, r0
 8003722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff61 	bl	80035f0 <__NVIC_SetPriority>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff37 	bl	80035b8 <__NVIC_EnableIRQ>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffa4 	bl	80036a8 <SysTick_Config>
 8003760:	4603      	mov	r3, r0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e08e      	b.n	800389c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	4b47      	ldr	r3, [pc, #284]	@ (80038a4 <HAL_DMA_Init+0x138>)
 8003786:	429a      	cmp	r2, r3
 8003788:	d80f      	bhi.n	80037aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	4b45      	ldr	r3, [pc, #276]	@ (80038a8 <HAL_DMA_Init+0x13c>)
 8003792:	4413      	add	r3, r2
 8003794:	4a45      	ldr	r2, [pc, #276]	@ (80038ac <HAL_DMA_Init+0x140>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	009a      	lsls	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a42      	ldr	r2, [pc, #264]	@ (80038b0 <HAL_DMA_Init+0x144>)
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80037a8:	e00e      	b.n	80037c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_DMA_Init+0x148>)
 80037b2:	4413      	add	r3, r2
 80037b4:	4a3d      	ldr	r2, [pc, #244]	@ (80038ac <HAL_DMA_Init+0x140>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a3c      	ldr	r2, [pc, #240]	@ (80038b8 <HAL_DMA_Init+0x14c>)
 80037c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fabc 	bl	8003d98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003828:	d102      	bne.n	8003830 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003838:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800383c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003846:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <HAL_DMA_Init+0x106>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d80c      	bhi.n	8003872 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fae5 	bl	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	e008      	b.n	8003884 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40020407 	.word	0x40020407
 80038a8:	bffdfff8 	.word	0xbffdfff8
 80038ac:	cccccccd 	.word	0xcccccccd
 80038b0:	40020000 	.word	0x40020000
 80038b4:	bffdfbf8 	.word	0xbffdfbf8
 80038b8:	40020400 	.word	0x40020400

080038bc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_DMA_Start_IT+0x20>
 80038d8:	2302      	movs	r3, #2
 80038da:	e069      	b.n	80039b0 <HAL_DMA_Start_IT+0xf4>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d155      	bne.n	800399c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa02 	bl	8003d1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 020e 	orr.w	r2, r2, #14
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e00f      	b.n	8003954 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 020a 	orr.w	r2, r2, #10
 8003952:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003970:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003988:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e008      	b.n	80039ae <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2280      	movs	r2, #128	@ 0x80
 80039a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e04f      	b.n	8003a6a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d008      	beq.n	80039e8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2204      	movs	r2, #4
 80039da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e040      	b.n	8003a6a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 020e 	bic.w	r2, r2, #14
 80039f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1c:	f003 021c 	and.w	r2, r3, #28
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00c      	beq.n	8003a58 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d005      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2204      	movs	r2, #4
 8003a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	e047      	b.n	8003b28 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 020e 	bic.w	r2, r2, #14
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003acc:	f003 021c 	and.w	r2, r3, #28
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ada:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ae4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
    }
  }
  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	f003 031c 	and.w	r3, r3, #28
 8003b54:	2204      	movs	r2, #4
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d027      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x7c>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d022      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d107      	bne.n	8003b88 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0204 	bic.w	r2, r2, #4
 8003b86:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8c:	f003 021c 	and.w	r2, r3, #28
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	2104      	movs	r1, #4
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8081 	beq.w	8003ca8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003bae:	e07b      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb4:	f003 031c 	and.w	r3, r3, #28
 8003bb8:	2202      	movs	r2, #2
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d03d      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x10c>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d038      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 020a 	bic.w	r2, r2, #10
 8003bea:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb4 <HAL_DMA_IRQHandler+0x180>)
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d909      	bls.n	8003c14 <HAL_DMA_IRQHandler+0xe0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f003 031c 	and.w	r3, r3, #28
 8003c08:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb8 <HAL_DMA_IRQHandler+0x184>)
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	e008      	b.n	8003c26 <HAL_DMA_IRQHandler+0xf2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c18:	f003 031c 	and.w	r3, r3, #28
 8003c1c:	4a27      	ldr	r2, [pc, #156]	@ (8003cbc <HAL_DMA_IRQHandler+0x188>)
 8003c1e:	2102      	movs	r1, #2
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d038      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003c3e:	e033      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	f003 031c 	and.w	r3, r3, #28
 8003c48:	2208      	movs	r2, #8
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02a      	beq.n	8003caa <HAL_DMA_IRQHandler+0x176>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d025      	beq.n	8003caa <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020e 	bic.w	r2, r2, #14
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f003 021c 	and.w	r2, r3, #28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
}
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40020080 	.word	0x40020080
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	40020000 	.word	0x40020000

08003cc0 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	72fb      	strb	r3, [r7, #11]
    return status;
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
 8003cda:	e01b      	b.n	8003d14 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e003      	b.n	8003d0a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d08:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]

  return status;
 8003d12:	7afb      	ldrb	r3, [r7, #11]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d34:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4c:	f003 021c 	and.w	r2, r3, #28
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d108      	bne.n	8003d7e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d7c:	e007      	b.n	8003d8e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d813      	bhi.n	8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3b08      	subs	r3, #8
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e011      	b.n	8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	009a      	lsls	r2, r3, #2
 8003ddc:	4b10      	ldr	r3, [pc, #64]	@ (8003e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003dde:	4413      	add	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3b08      	subs	r3, #8
 8003dec:	4a0b      	ldr	r2, [pc, #44]	@ (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	3307      	adds	r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003dfc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40020407 	.word	0x40020407
 8003e1c:	cccccccd 	.word	0xcccccccd
 8003e20:	4002081c 	.word	0x4002081c
 8003e24:	40020880 	.word	0x40020880

08003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e38:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a08      	ldr	r2, [pc, #32]	@ (8003e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2201      	movs	r2, #1
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	1000823f 	.word	0x1000823f
 8003e6c:	40020940 	.word	0x40020940

08003e70 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7e:	e140      	b.n	8004102 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2101      	movs	r1, #1
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8132 	beq.w	80040fc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d005      	beq.n	8003eb0 <HAL_GPIO_Init+0x40>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d130      	bne.n	8003f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2203      	movs	r2, #3
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 0201 	and.w	r2, r3, #1
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d017      	beq.n	8003f4e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d123      	bne.n	8003fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	08da      	lsrs	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3208      	adds	r2, #8
 8003f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	220f      	movs	r2, #15
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	08da      	lsrs	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	6939      	ldr	r1, [r7, #16]
 8003f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	2203      	movs	r2, #3
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0203 	and.w	r2, r3, #3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 808c 	beq.w	80040fc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003fe4:	4a4e      	ldr	r2, [pc, #312]	@ (8004120 <HAL_GPIO_Init+0x2b0>)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800400e:	d00d      	beq.n	800402c <HAL_GPIO_Init+0x1bc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a44      	ldr	r2, [pc, #272]	@ (8004124 <HAL_GPIO_Init+0x2b4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <HAL_GPIO_Init+0x1b8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a43      	ldr	r2, [pc, #268]	@ (8004128 <HAL_GPIO_Init+0x2b8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_GPIO_Init+0x1b4>
 8004020:	2302      	movs	r3, #2
 8004022:	e004      	b.n	800402e <HAL_GPIO_Init+0x1be>
 8004024:	2307      	movs	r3, #7
 8004026:	e002      	b.n	800402e <HAL_GPIO_Init+0x1be>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <HAL_GPIO_Init+0x1be>
 800402c:	2300      	movs	r3, #0
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	f002 0203 	and.w	r2, r2, #3
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	4093      	lsls	r3, r2
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800403e:	4938      	ldr	r1, [pc, #224]	@ (8004120 <HAL_GPIO_Init+0x2b0>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3302      	adds	r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800404c:	4b37      	ldr	r3, [pc, #220]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004070:	4a2e      	ldr	r2, [pc, #184]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004076:	4b2d      	ldr	r3, [pc, #180]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409a:	4a24      	ldr	r2, [pc, #144]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80040a0:	4b22      	ldr	r3, [pc, #136]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 80040a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040a6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80040c6:	4a19      	ldr	r2, [pc, #100]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80040ce:	4b17      	ldr	r3, [pc, #92]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80040f4:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <HAL_GPIO_Init+0x2bc>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	f47f aeb7 	bne.w	8003e80 <HAL_GPIO_Init+0x10>
  }
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	48000400 	.word	0x48000400
 8004128:	48000800 	.word	0x48000800
 800412c:	58000800 	.word	0x58000800

08004130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
 800413c:	4613      	mov	r3, r2
 800413e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004140:	787b      	ldrb	r3, [r7, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800414c:	e002      	b.n	8004154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
	...

08004160 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004164:	4b04      	ldr	r3, [pc, #16]	@ (8004178 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a03      	ldr	r2, [pc, #12]	@ (8004178 <HAL_PWR_EnableBkUpAccess+0x18>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416e:	6013      	str	r3, [r2, #0]
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	58000400 	.word	0x58000400

0800417c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <HAL_PWREx_GetVoltageRange+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	58000400 	.word	0x58000400

08004194 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a4:	d101      	bne.n	80041aa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <LL_PWR_IsEnabledBkUpAccess+0x18>
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	58000400 	.word	0x58000400

080041b8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041ca:	6013      	str	r3, [r2, #0]
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004202:	d101      	bne.n	8004208 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004224:	6013      	str	r3, [r2, #0]
}
 8004226:	bf00      	nop
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800423c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004240:	6013      	str	r3, [r2, #0]
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800425c:	d101      	bne.n	8004262 <LL_RCC_HSE_IsReady+0x18>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <LL_RCC_HSE_IsReady+0x1a>
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800427a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800429a:	6013      	str	r3, [r2, #0]
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b6:	d101      	bne.n	80042bc <LL_RCC_HSI_IsReady+0x18>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <LL_RCC_HSI_IsReady+0x1a>
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d101      	bne.n	8004306 <LL_RCC_LSE_IsReady+0x18>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <LL_RCC_LSE_IsReady+0x1a>
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800431c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800433c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d101      	bne.n	8004368 <LL_RCC_LSI_IsReady+0x18>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <LL_RCC_LSI_IsReady+0x1a>
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6013      	str	r3, [r2, #0]
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800438e:	b480      	push	{r7}
 8004390:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d101      	bne.n	80043c0 <LL_RCC_MSI_IsReady+0x16>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <LL_RCC_MSI_IsReady+0x18>
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80043ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d101      	bne.n	80043e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f023 0203 	bic.w	r2, r3, #3
 8004452:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4313      	orrs	r3, r2
 800445a:	608b      	str	r3, [r1, #8]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 030c 	and.w	r3, r3, #12
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800448e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044dc:	f023 020f 	bic.w	r2, r3, #15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800450a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004562:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800458e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ea:	d101      	bne.n	80045f0 <LL_RCC_PLL_IsReady+0x18>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <LL_RCC_PLL_IsReady+0x1a>
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800462c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0303 	and.w	r3, r3, #3
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004666:	d101      	bne.n	800466c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800467e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800468a:	d101      	bne.n	8004690 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80046a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ae:	d101      	bne.n	80046b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046d0:	d101      	bne.n	80046d6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046f2:	d101      	bne.n	80046f8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
	...

08004704 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e36f      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004716:	f7ff fea6 	bl	8004466 <LL_RCC_GetSysClkSource>
 800471a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800471c:	f7ff ff8f 	bl	800463e <LL_RCC_PLL_GetMainSource>
 8004720:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80c4 	beq.w	80048b8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x3e>
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2b0c      	cmp	r3, #12
 800473a:	d176      	bne.n	800482a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d173      	bne.n	800482a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e353      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_OscConfig+0x68>
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800476a:	e006      	b.n	800477a <HAL_RCC_OscConfig+0x76>
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800477a:	4293      	cmp	r3, r2
 800477c:	d222      	bcs.n	80047c4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fd5a 	bl	800523c <RCC_SetFlashLatencyFromMSIRange>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e331      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fe2b 	bl	8004418 <LL_RCC_MSI_SetCalibTrimming>
 80047c2:	e021      	b.n	8004808 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ce:	f043 0308 	orr.w	r3, r3, #8
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fe12 	bl	8004418 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fd1f 	bl	800523c <RCC_SetFlashLatencyFromMSIRange>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e2f6      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004808:	f000 fce0 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 800480c:	4603      	mov	r3, r0
 800480e:	4aa7      	ldr	r2, [pc, #668]	@ (8004aac <HAL_RCC_OscConfig+0x3a8>)
 8004810:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004812:	4ba7      	ldr	r3, [pc, #668]	@ (8004ab0 <HAL_RCC_OscConfig+0x3ac>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fe50 	bl	80034bc <HAL_InitTick>
 800481c:	4603      	mov	r3, r0
 800481e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d047      	beq.n	80048b6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004826:	7cfb      	ldrb	r3, [r7, #19]
 8004828:	e2e5      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02c      	beq.n	800488c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004832:	f7ff fd9e 	bl	8004372 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004836:	f7fe fd23 	bl	8003280 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800483e:	f7fe fd1f 	bl	8003280 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e2d2      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004850:	f7ff fdab 	bl	80043aa <LL_RCC_MSI_IsReady>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f1      	beq.n	800483e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fdc7 	bl	8004418 <LL_RCC_MSI_SetCalibTrimming>
 800488a:	e015      	b.n	80048b8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800488c:	f7ff fd7f 	bl	800438e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004890:	f7fe fcf6 	bl	8003280 <HAL_GetTick>
 8004894:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004898:	f7fe fcf2 	bl	8003280 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e2a5      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80048aa:	f7ff fd7e 	bl	80043aa <LL_RCC_MSI_IsReady>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f1      	bne.n	8004898 <HAL_RCC_OscConfig+0x194>
 80048b4:	e000      	b.n	80048b8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048b6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d058      	beq.n	8004976 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d005      	beq.n	80048d6 <HAL_RCC_OscConfig+0x1d2>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d108      	bne.n	80048e2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d105      	bne.n	80048e2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d14b      	bne.n	8004976 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e289      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004900:	d102      	bne.n	8004908 <HAL_RCC_OscConfig+0x204>
 8004902:	f7ff fc86 	bl	8004212 <LL_RCC_HSE_Enable>
 8004906:	e00d      	b.n	8004924 <HAL_RCC_OscConfig+0x220>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004910:	d104      	bne.n	800491c <HAL_RCC_OscConfig+0x218>
 8004912:	f7ff fc51 	bl	80041b8 <LL_RCC_HSE_EnableTcxo>
 8004916:	f7ff fc7c 	bl	8004212 <LL_RCC_HSE_Enable>
 800491a:	e003      	b.n	8004924 <HAL_RCC_OscConfig+0x220>
 800491c:	f7ff fc87 	bl	800422e <LL_RCC_HSE_Disable>
 8004920:	f7ff fc58 	bl	80041d4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d012      	beq.n	8004952 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fe fca8 	bl	8003280 <HAL_GetTick>
 8004930:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004934:	f7fe fca4 	bl	8003280 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	@ 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e257      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004946:	f7ff fc80 	bl	800424a <LL_RCC_HSE_IsReady>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f1      	beq.n	8004934 <HAL_RCC_OscConfig+0x230>
 8004950:	e011      	b.n	8004976 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fe fc95 	bl	8003280 <HAL_GetTick>
 8004956:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800495a:	f7fe fc91 	bl	8003280 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b64      	cmp	r3, #100	@ 0x64
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e244      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800496c:	f7ff fc6d 	bl	800424a <LL_RCC_HSE_IsReady>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f1      	bne.n	800495a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d046      	beq.n	8004a10 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d005      	beq.n	8004994 <HAL_RCC_OscConfig+0x290>
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d10e      	bne.n	80049ac <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d10b      	bne.n	80049ac <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e22a      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fc8e 	bl	80042c6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049aa:	e031      	b.n	8004a10 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d019      	beq.n	80049e8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b4:	f7ff fc5a 	bl	800426c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fe fc62 	bl	8003280 <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c0:	f7fe fc5e 	bl	8003280 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e211      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049d2:	f7ff fc67 	bl	80042a4 <LL_RCC_HSI_IsReady>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f1      	beq.n	80049c0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fc70 	bl	80042c6 <LL_RCC_HSI_SetCalibTrimming>
 80049e6:	e013      	b.n	8004a10 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e8:	f7ff fc4e 	bl	8004288 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fe fc48 	bl	8003280 <HAL_GetTick>
 80049f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fe fc44 	bl	8003280 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1f7      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a06:	f7ff fc4d 	bl	80042a4 <LL_RCC_HSI_IsReady>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f1      	bne.n	80049f4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d06e      	beq.n	8004afa <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d056      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d031      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e1d0      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d013      	beq.n	8004a86 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004a5e:	f7ff fc67 	bl	8004330 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a62:	f7fe fc0d 	bl	8003280 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fe fc09 	bl	8003280 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b11      	cmp	r3, #17
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e1bc      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a7c:	f7ff fc68 	bl	8004350 <LL_RCC_LSI_IsReady>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f1      	bne.n	8004a6a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a8e:	f023 0210 	bic.w	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa0:	f7ff fc36 	bl	8004310 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fe fbec 	bl	8003280 <HAL_GetTick>
 8004aa8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004aaa:	e00c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x3c2>
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fe fbe4 	bl	8003280 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b11      	cmp	r3, #17
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e197      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004ac6:	f7ff fc43 	bl	8004350 <LL_RCC_LSI_IsReady>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f1      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3b0>
 8004ad0:	e013      	b.n	8004afa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad2:	f7ff fc2d 	bl	8004330 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fe fbd3 	bl	8003280 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fe fbcf 	bl	8003280 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b11      	cmp	r3, #17
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e182      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004af0:	f7ff fc2e 	bl	8004350 <LL_RCC_LSI_IsReady>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f1      	bne.n	8004ade <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80d8 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004b08:	f7ff fb44 	bl	8004194 <LL_PWR_IsEnabledBkUpAccess>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d113      	bne.n	8004b3a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b12:	f7ff fb25 	bl	8004160 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b16:	f7fe fbb3 	bl	8003280 <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1e:	f7fe fbaf 	bl	8003280 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e162      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004b30:	f7ff fb30 	bl	8004194 <LL_PWR_IsEnabledBkUpAccess>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f1      	beq.n	8004b1e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d07b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b85      	cmp	r3, #133	@ 0x85
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7fe fb8b 	bl	8003280 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f7fe fb7d 	bl	8003280 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e12e      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b98:	f7ff fba9 	bl	80042ee <LL_RCC_LSE_IsReady>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ef      	beq.n	8004b82 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b81      	cmp	r3, #129	@ 0x81
 8004ba8:	d003      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b85      	cmp	r3, #133	@ 0x85
 8004bb0:	d121      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fe fb65 	bl	8003280 <HAL_GetTick>
 8004bb6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fe fb57 	bl	8003280 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e108      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ec      	beq.n	8004bce <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004bf4:	e060      	b.n	8004cb8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fe fb43 	bl	8003280 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fe fb35 	bl	8003280 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0e6      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ec      	bne.n	8004c12 <HAL_RCC_OscConfig+0x50e>
 8004c38:	e03e      	b.n	8004cb8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fb21 	bl	8003280 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fe fb13 	bl	8003280 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e0c4      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ec      	bne.n	8004c56 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7c:	f7fe fb00 	bl	8003280 <HAL_GetTick>
 8004c80:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c98:	f7fe faf2 	bl	8003280 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e0a3      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004cae:	f7ff fb1e 	bl	80042ee <LL_RCC_LSE_IsReady>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ef      	bne.n	8004c98 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8099 	beq.w	8004df4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2b0c      	cmp	r3, #12
 8004cc6:	d06c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d14b      	bne.n	8004d68 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd0:	f7ff fc74 	bl	80045bc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fad4 	bl	8003280 <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fe fad0 	bl	8003280 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b0a      	cmp	r3, #10
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e083      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cee:	f7ff fc73 	bl	80045d8 <LL_RCC_PLL_IsReady>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f1      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	4b40      	ldr	r3, [pc, #256]	@ (8004e00 <HAL_RCC_OscConfig+0x6fc>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d10:	0212      	lsls	r2, r2, #8
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d1e:	4311      	orrs	r1, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d24:	430a      	orrs	r2, r1
 8004d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2e:	f7ff fc37 	bl	80045a0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d42:	f7fe fa9d 	bl	8003280 <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4a:	f7fe fa99 	bl	8003280 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b0a      	cmp	r3, #10
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e04c      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d5c:	f7ff fc3c 	bl	80045d8 <LL_RCC_PLL_IsReady>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f1      	beq.n	8004d4a <HAL_RCC_OscConfig+0x646>
 8004d66:	e045      	b.n	8004df4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d68:	f7ff fc28 	bl	80045bc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fe fa88 	bl	8003280 <HAL_GetTick>
 8004d70:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fe fa84 	bl	8003280 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b0a      	cmp	r3, #10
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e037      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d86:	f7ff fc27 	bl	80045d8 <LL_RCC_PLL_IsReady>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f1      	bne.n	8004d74 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e04 <HAL_RCC_OscConfig+0x700>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60cb      	str	r3, [r1, #12]
 8004da0:	e028      	b.n	8004df4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e023      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d115      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d10e      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d106      	bne.n	8004df0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	11c1808c 	.word	0x11c1808c
 8004e04:	eefefffc 	.word	0xeefefffc

08004e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e12c      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b98      	ldr	r3, [pc, #608]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d91b      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b95      	ldr	r3, [pc, #596]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0207 	bic.w	r2, r3, #7
 8004e32:	4993      	ldr	r1, [pc, #588]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e3a:	f7fe fa21 	bl	8003280 <HAL_GetTick>
 8004e3e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e42:	f7fe fa1d 	bl	8003280 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e110      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e54:	4b8a      	ldr	r3, [pc, #552]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d1ef      	bne.n	8004e42 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fb02 	bl	800447c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e78:	f7fe fa02 	bl	8003280 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e80:	f7fe f9fe 	bl	8003280 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0f1      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e92:	f7ff fbdf 	bl	8004654 <LL_RCC_IsActiveFlag_HPRE>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f1      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d016      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff faf8 	bl	80044a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004eb2:	f7fe f9e5 	bl	8003280 <HAL_GetTick>
 8004eb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004eba:	f7fe f9e1 	bl	8003280 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0d4      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ecc:	f7ff fbd3 	bl	8004676 <LL_RCC_IsActiveFlag_C2HPRE>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f1      	beq.n	8004eba <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff faf0 	bl	80044cc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004eec:	f7fe f9c8 	bl	8003280 <HAL_GetTick>
 8004ef0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ef4:	f7fe f9c4 	bl	8003280 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0b7      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f06:	f7ff fbc8 	bl	800469a <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f1      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d016      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff fae9 	bl	80044f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f26:	f7fe f9ab 	bl	8003280 <HAL_GetTick>
 8004f2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f2e:	f7fe f9a7 	bl	8003280 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e09a      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f40:	f7ff fbbd 	bl	80046be <LL_RCC_IsActiveFlag_PPRE1>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f1      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff fade 	bl	800451e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f62:	f7fe f98d 	bl	8003280 <HAL_GetTick>
 8004f66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f6a:	f7fe f989 	bl	8003280 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e07c      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f7c:	f7ff fbb0 	bl	80046e0 <LL_RCC_IsActiveFlag_PPRE2>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f1      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d043      	beq.n	800501a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f9a:	f7ff f956 	bl	800424a <LL_RCC_HSE_IsReady>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d11e      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e066      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d106      	bne.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004fb0:	f7ff fb12 	bl	80045d8 <LL_RCC_PLL_IsReady>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d113      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e05b      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004fc6:	f7ff f9f0 	bl	80043aa <LL_RCC_MSI_IsReady>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e050      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004fd4:	f7ff f966 	bl	80042a4 <LL_RCC_HSI_IsReady>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e049      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff fa2a 	bl	8004440 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fe f948 	bl	8003280 <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff4:	f7fe f944 	bl	8003280 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e035      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	f7ff fa2c 	bl	8004466 <LL_RCC_GetSysClkSource>
 800500e:	4602      	mov	r2, r0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	429a      	cmp	r2, r3
 8005018:	d1ec      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800501a:	4b19      	ldr	r3, [pc, #100]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d21b      	bcs.n	8005060 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005028:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 0207 	bic.w	r2, r3, #7
 8005030:	4913      	ldr	r1, [pc, #76]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005038:	f7fe f922 	bl	8003280 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	e008      	b.n	8005052 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005040:	f7fe f91e 	bl	8003280 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e011      	b.n	8005076 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_RCC_ClockConfig+0x278>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d1ef      	bne.n	8005040 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005060:	f000 f8b4 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8005064:	4603      	mov	r3, r0
 8005066:	4a07      	ldr	r2, [pc, #28]	@ (8005084 <HAL_RCC_ClockConfig+0x27c>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800506a:	4b07      	ldr	r3, [pc, #28]	@ (8005088 <HAL_RCC_ClockConfig+0x280>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fa24 	bl	80034bc <HAL_InitTick>
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	58004000 	.word	0x58004000
 8005084:	2000000c 	.word	0x2000000c
 8005088:	20000010 	.word	0x20000010

0800508c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509a:	f7ff f9e4 	bl	8004466 <LL_RCC_GetSysClkSource>
 800509e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a0:	f7ff facd 	bl	800463e <LL_RCC_PLL_GetMainSource>
 80050a4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x2c>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d139      	bne.n	8005126 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d136      	bne.n	8005126 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80050b8:	f7ff f987 	bl	80043ca <LL_RCC_MSI_IsEnabledRangeSelect>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d115      	bne.n	80050ee <HAL_RCC_GetSysClockFreq+0x62>
 80050c2:	f7ff f982 	bl	80043ca <LL_RCC_MSI_IsEnabledRangeSelect>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d106      	bne.n	80050da <HAL_RCC_GetSysClockFreq+0x4e>
 80050cc:	f7ff f98d 	bl	80043ea <LL_RCC_MSI_GetRange>
 80050d0:	4603      	mov	r3, r0
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	e005      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x5a>
 80050da:	f7ff f991 	bl	8004400 <LL_RCC_MSI_GetRangeAfterStandby>
 80050de:	4603      	mov	r3, r0
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	4a36      	ldr	r2, [pc, #216]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x134>)
 80050e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ec:	e014      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x8c>
 80050ee:	f7ff f96c 	bl	80043ca <LL_RCC_MSI_IsEnabledRangeSelect>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x7a>
 80050f8:	f7ff f977 	bl	80043ea <LL_RCC_MSI_GetRange>
 80050fc:	4603      	mov	r3, r0
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	e005      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x86>
 8005106:	f7ff f97b 	bl	8004400 <LL_RCC_MSI_GetRangeAfterStandby>
 800510a:	4603      	mov	r3, r0
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005118:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d115      	bne.n	800514c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005124:	e012      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d102      	bne.n	8005132 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800512c:	4b25      	ldr	r3, [pc, #148]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e00c      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d109      	bne.n	800514c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005138:	f7ff f85a 	bl	80041f0 <LL_RCC_HSE_IsEnabledDiv2>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d102      	bne.n	8005148 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005142:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e001      	b.n	800514c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005148:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800514a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800514c:	f7ff f98b 	bl	8004466 <LL_RCC_GetSysClkSource>
 8005150:	4603      	mov	r3, r0
 8005152:	2b0c      	cmp	r3, #12
 8005154:	d12f      	bne.n	80051b6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005156:	f7ff fa72 	bl	800463e <LL_RCC_PLL_GetMainSource>
 800515a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d003      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0xde>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d003      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0xe4>
 8005168:	e00d      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800516a:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800516c:	60fb      	str	r3, [r7, #12]
        break;
 800516e:	e00d      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005170:	f7ff f83e 	bl	80041f0 <LL_RCC_HSE_IsEnabledDiv2>
 8005174:	4603      	mov	r3, r0
 8005176:	2b01      	cmp	r3, #1
 8005178:	d102      	bne.n	8005180 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800517a:	4b12      	ldr	r3, [pc, #72]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800517c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800517e:	e005      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005180:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005182:	60fb      	str	r3, [r7, #12]
        break;
 8005184:	e002      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	60fb      	str	r3, [r7, #12]
        break;
 800518a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800518c:	f7ff fa35 	bl	80045fa <LL_RCC_PLL_GetN>
 8005190:	4602      	mov	r2, r0
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	fb03 f402 	mul.w	r4, r3, r2
 8005198:	f7ff fa46 	bl	8004628 <LL_RCC_PLL_GetDivider>
 800519c:	4603      	mov	r3, r0
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	3301      	adds	r3, #1
 80051a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80051a6:	f7ff fa34 	bl	8004612 <LL_RCC_PLL_GetR>
 80051aa:	4603      	mov	r3, r0
 80051ac:	0f5b      	lsrs	r3, r3, #29
 80051ae:	3301      	adds	r3, #1
 80051b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80051b4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80051b6:	697b      	ldr	r3, [r7, #20]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}
 80051c0:	0800d138 	.word	0x0800d138
 80051c4:	00f42400 	.word	0x00f42400
 80051c8:	01e84800 	.word	0x01e84800

080051cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051cc:	b598      	push	{r3, r4, r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051d0:	f7ff ff5c 	bl	800508c <HAL_RCC_GetSysClockFreq>
 80051d4:	4604      	mov	r4, r0
 80051d6:	f7ff f9b5 	bl	8004544 <LL_RCC_GetAHBPrescaler>
 80051da:	4603      	mov	r3, r0
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	4a03      	ldr	r2, [pc, #12]	@ (80051f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80051e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd98      	pop	{r3, r4, r7, pc}
 80051f0:	0800d0d8 	.word	0x0800d0d8

080051f4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f4:	b598      	push	{r3, r4, r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051f8:	f7ff ffe8 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 80051fc:	4604      	mov	r4, r0
 80051fe:	f7ff f9b9 	bl	8004574 <LL_RCC_GetAPB1Prescaler>
 8005202:	4603      	mov	r3, r0
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	4a03      	ldr	r2, [pc, #12]	@ (8005214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005210:	4618      	mov	r0, r3
 8005212:	bd98      	pop	{r3, r4, r7, pc}
 8005214:	0800d118 	.word	0x0800d118

08005218 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005218:	b598      	push	{r3, r4, r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800521c:	f7ff ffd6 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8005220:	4604      	mov	r4, r0
 8005222:	f7ff f9b2 	bl	800458a <LL_RCC_GetAPB2Prescaler>
 8005226:	4603      	mov	r3, r0
 8005228:	0adb      	lsrs	r3, r3, #11
 800522a:	4a03      	ldr	r2, [pc, #12]	@ (8005238 <HAL_RCC_GetPCLK2Freq+0x20>)
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd98      	pop	{r3, r4, r7, pc}
 8005238:	0800d118 	.word	0x0800d118

0800523c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4a10      	ldr	r2, [pc, #64]	@ (8005290 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005252:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005254:	f7ff f981 	bl	800455a <LL_RCC_GetAHB3Prescaler>
 8005258:	4603      	mov	r3, r0
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	4a0c      	ldr	r2, [pc, #48]	@ (8005294 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4a09      	ldr	r2, [pc, #36]	@ (8005298 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	0c9c      	lsrs	r4, r3, #18
 8005278:	f7fe ff80 	bl	800417c <HAL_PWREx_GetVoltageRange>
 800527c:	4603      	mov	r3, r0
 800527e:	4619      	mov	r1, r3
 8005280:	4620      	mov	r0, r4
 8005282:	f000 f80b 	bl	800529c <RCC_SetFlashLatency>
 8005286:	4603      	mov	r3, r0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}
 8005290:	0800d138 	.word	0x0800d138
 8005294:	0800d0d8 	.word	0x0800d0d8
 8005298:	431bde83 	.word	0x431bde83

0800529c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	@ 0x38
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80052a6:	4a3a      	ldr	r2, [pc, #232]	@ (8005390 <RCC_SetFlashLatency+0xf4>)
 80052a8:	f107 0320 	add.w	r3, r7, #32
 80052ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052b0:	6018      	str	r0, [r3, #0]
 80052b2:	3304      	adds	r3, #4
 80052b4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80052b6:	4a37      	ldr	r2, [pc, #220]	@ (8005394 <RCC_SetFlashLatency+0xf8>)
 80052b8:	f107 0318 	add.w	r3, r7, #24
 80052bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052c0:	6018      	str	r0, [r3, #0]
 80052c2:	3304      	adds	r3, #4
 80052c4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80052c6:	4a34      	ldr	r2, [pc, #208]	@ (8005398 <RCC_SetFlashLatency+0xfc>)
 80052c8:	f107 030c 	add.w	r3, r7, #12
 80052cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80052ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80052d2:	2300      	movs	r3, #0
 80052d4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052dc:	d11b      	bne.n	8005316 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052de:	2300      	movs	r3, #0
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052e2:	e014      	b.n	800530e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	3338      	adds	r3, #56	@ 0x38
 80052ea:	443b      	add	r3, r7
 80052ec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80052f0:	461a      	mov	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d807      	bhi.n	8005308 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	3338      	adds	r3, #56	@ 0x38
 80052fe:	443b      	add	r3, r7
 8005300:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005304:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005306:	e021      	b.n	800534c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	3301      	adds	r3, #1
 800530c:	633b      	str	r3, [r7, #48]	@ 0x30
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	2b02      	cmp	r3, #2
 8005312:	d9e7      	bls.n	80052e4 <RCC_SetFlashLatency+0x48>
 8005314:	e01a      	b.n	800534c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005316:	2300      	movs	r3, #0
 8005318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800531a:	e014      	b.n	8005346 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	3338      	adds	r3, #56	@ 0x38
 8005322:	443b      	add	r3, r7
 8005324:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4293      	cmp	r3, r2
 800532e:	d807      	bhi.n	8005340 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	3338      	adds	r3, #56	@ 0x38
 8005336:	443b      	add	r3, r7
 8005338:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800533e:	e005      	b.n	800534c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	3301      	adds	r3, #1
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	2b02      	cmp	r3, #2
 800534a:	d9e7      	bls.n	800531c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800534c:	4b13      	ldr	r3, [pc, #76]	@ (800539c <RCC_SetFlashLatency+0x100>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 0207 	bic.w	r2, r3, #7
 8005354:	4911      	ldr	r1, [pc, #68]	@ (800539c <RCC_SetFlashLatency+0x100>)
 8005356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800535c:	f7fd ff90 	bl	8003280 <HAL_GetTick>
 8005360:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005362:	e008      	b.n	8005376 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005364:	f7fd ff8c 	bl	8003280 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e007      	b.n	8005386 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <RCC_SetFlashLatency+0x100>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005380:	429a      	cmp	r2, r3
 8005382:	d1ef      	bne.n	8005364 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3738      	adds	r7, #56	@ 0x38
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	0800d098 	.word	0x0800d098
 8005394:	0800d0a0 	.word	0x0800d0a0
 8005398:	0800d0a8 	.word	0x0800d0a8
 800539c:	58004000 	.word	0x58004000

080053a0 <LL_RCC_LSE_IsReady>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d101      	bne.n	80053b8 <LL_RCC_LSE_IsReady+0x18>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <LL_RCC_LSE_IsReady+0x1a>
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <LL_RCC_SetUSARTClockSource>:
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	43db      	mvns	r3, r3
 80053d8:	401a      	ands	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr

080053f2 <LL_RCC_SetI2SClockSource>:
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <LL_RCC_SetLPUARTClockSource>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005430:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr

08005446 <LL_RCC_SetI2CClockSource>:
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800544e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005452:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800545e:	43db      	mvns	r3, r3
 8005460:	401a      	ands	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <LL_RCC_SetLPTIMClockSource>:
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800548a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	43db      	mvns	r3, r3
 8005496:	401a      	ands	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <LL_RCC_SetRNGClockSource>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80054b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <LL_RCC_SetADCClockSource>:
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <LL_RCC_SetRTCClockSource>:
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005518:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <LL_RCC_GetRTCClockSource>:
{
 800552e:	b480      	push	{r7}
 8005530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <LL_RCC_ForceBackupDomainReset>:
{
 8005546:	b480      	push	{r7}
 8005548:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005552:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800555e:	bf00      	nop
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800557e:	bf00      	nop
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr
	...

08005588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005594:	2300      	movs	r3, #0
 8005596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005598:	2300      	movs	r3, #0
 800559a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d058      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80055a8:	f7fe fdda 	bl	8004160 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055ac:	f7fd fe68 	bl	8003280 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80055b2:	e009      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b4:	f7fd fe64 	bl	8003280 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d902      	bls.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	74fb      	strb	r3, [r7, #19]
        break;
 80055c6:	e006      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80055c8:	4b7b      	ldr	r3, [pc, #492]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d4:	d1ee      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80055d6:	7cfb      	ldrb	r3, [r7, #19]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d13c      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80055dc:	f7ff ffa7 	bl	800552e <LL_RCC_GetRTCClockSource>
 80055e0:	4602      	mov	r2, r0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d00f      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055f8:	f7ff ffa5 	bl	8005546 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055fc:	f7ff ffb3 	bl	8005566 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fd fe34 	bl	8003280 <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800561a:	e00b      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fd fe30 	bl	8003280 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d902      	bls.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	74fb      	strb	r3, [r7, #19]
            break;
 8005632:	e004      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005634:	f7ff feb4 	bl	80053a0 <LL_RCC_LSE_IsReady>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d1ee      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff ff5b 	bl	8005504 <LL_RCC_SetRTCClockSource>
 800564e:	e004      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	74bb      	strb	r3, [r7, #18]
 8005654:	e001      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fea9 	bl	80053c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fe9e 	bl	80053c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fec0 	bl	800541c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fee6 	bl	800547e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fedb 	bl	800547e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fed0 	bl	800547e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fea9 	bl	8005446 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff fe9e 	bl	8005446 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fe93 	bl	8005446 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fe5e 	bl	80053f2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573e:	d107      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800574e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fea5 	bl	80054b0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	2b00      	cmp	r3, #0
 800576c:	d107      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800576e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800577c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d011      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff fea3 	bl	80054da <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800579c:	d107      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80057ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	58000400 	.word	0x58000400

080057bc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80057c4:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057cc:	4904      	ldr	r1, [pc, #16]	@ (80057e0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	58000400 	.word	0x58000400

080057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057e8:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ee:	4a04      	ldr	r2, [pc, #16]	@ (8005800 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80057f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr
 8005800:	58000400 	.word	0x58000400

08005804 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005808:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	4a04      	ldr	r2, [pc, #16]	@ (8005820 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005810:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005818:	bf00      	nop
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	58000400 	.word	0x58000400

08005824 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005828:	4b03      	ldr	r3, [pc, #12]	@ (8005838 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800582a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800582e:	619a      	str	r2, [r3, #24]
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	58000400 	.word	0x58000400

0800583c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005840:	4b06      	ldr	r3, [pc, #24]	@ (800585c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b02      	cmp	r3, #2
 800584a:	d101      	bne.n	8005850 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	58000400 	.word	0x58000400

08005860 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005864:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b04      	cmp	r3, #4
 800586e:	d101      	bne.n	8005874 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	58000400 	.word	0x58000400

08005884 <LL_RCC_RF_DisableReset>:
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005890:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005894:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005898:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr

080058a4 <LL_RCC_IsRFUnderReset>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058b8:	d101      	bne.n	80058be <LL_RCC_IsRFUnderReset+0x1a>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <LL_RCC_IsRFUnderReset+0x1c>
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <LL_EXTI_EnableIT_32_63+0x24>)
 80058d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80058d6:	4905      	ldr	r1, [pc, #20]	@ (80058ec <LL_EXTI_EnableIT_32_63+0x24>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	58000800 	.word	0x58000800

080058f0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
    return status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	e052      	b.n	80059ac <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	799b      	ldrb	r3, [r3, #6]
 800590e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_SUBGHZ_Init+0x2c>
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d109      	bne.n	8005930 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fd fbd4 	bl	80030d0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005928:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800592c:	f7ff ffcc 	bl	80058c8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005930:	7bbb      	ldrb	r3, [r7, #14]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d126      	bne.n	8005984 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800593c:	f7ff ffa2 	bl	8005884 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005940:	4b1c      	ldr	r3, [pc, #112]	@ (80059b4 <HAL_SUBGHZ_Init+0xc4>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	0cdb      	lsrs	r3, r3, #19
 800594e:	2264      	movs	r2, #100	@ 0x64
 8005950:	fb02 f303 	mul.w	r3, r2, r3
 8005954:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d105      	bne.n	8005968 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	609a      	str	r2, [r3, #8]
        break;
 8005966:	e007      	b.n	8005978 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3b01      	subs	r3, #1
 800596c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800596e:	f7ff ff99 	bl	80058a4 <LL_RCC_IsRFUnderReset>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1ee      	bne.n	8005956 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005978:	f7ff ff34 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800597c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005980:	f7ff ff1c 	bl	80057bc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005984:	f7ff ff4e 	bl	8005824 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10a      	bne.n	80059a4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 faac 	bl	8005ef0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	719a      	strb	r2, [r3, #6]

  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2000000c 	.word	0x2000000c

080059b8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	607a      	str	r2, [r7, #4]
 80059c2:	461a      	mov	r2, r3
 80059c4:	460b      	mov	r3, r1
 80059c6:	817b      	strh	r3, [r7, #10]
 80059c8:	4613      	mov	r3, r2
 80059ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	799b      	ldrb	r3, [r3, #6]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d14a      	bne.n	8005a6c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	795b      	ldrb	r3, [r3, #5]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e045      	b.n	8005a6e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2202      	movs	r2, #2
 80059ec:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fb4c 	bl	800608c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80059f4:	f7ff ff06 	bl	8005804 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80059f8:	210d      	movs	r1, #13
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fa98 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005a00:	897b      	ldrh	r3, [r7, #10]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	4619      	mov	r1, r3
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fa90 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005a10:	897b      	ldrh	r3, [r7, #10]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	4619      	mov	r1, r3
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fa8a 	bl	8005f30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	82bb      	strh	r3, [r7, #20]
 8005a20:	e00a      	b.n	8005a38 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a22:	8abb      	ldrh	r3, [r7, #20]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fa7f 	bl	8005f30 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a32:	8abb      	ldrh	r3, [r7, #20]
 8005a34:	3301      	adds	r3, #1
 8005a36:	82bb      	strh	r3, [r7, #20]
 8005a38:	8aba      	ldrh	r2, [r7, #20]
 8005a3a:	893b      	ldrh	r3, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d3f0      	bcc.n	8005a22 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a40:	f7ff fed0 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fb45 	bl	80060d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
 8005a56:	e001      	b.n	8005a5c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	715a      	strb	r2, [r3, #5]

    return status;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	e000      	b.n	8005a6e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b088      	sub	sp, #32
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	461a      	mov	r2, r3
 8005a82:	460b      	mov	r3, r1
 8005a84:	817b      	strh	r3, [r7, #10]
 8005a86:	4613      	mov	r3, r2
 8005a88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	799b      	ldrb	r3, [r3, #6]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d14a      	bne.n	8005b2e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	795b      	ldrb	r3, [r3, #5]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e045      	b.n	8005b30 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 faee 	bl	800608c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005ab0:	f7ff fea8 	bl	8005804 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005ab4:	211d      	movs	r1, #29
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fa3a 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fa32 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005acc:	897b      	ldrh	r3, [r7, #10]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fa2c 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005ad8:	2100      	movs	r1, #0
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fa28 	bl	8005f30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	82fb      	strh	r3, [r7, #22]
 8005ae4:	e009      	b.n	8005afa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005ae6:	69b9      	ldr	r1, [r7, #24]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fa77 	bl	8005fdc <SUBGHZSPI_Receive>
      pData++;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	3301      	adds	r3, #1
 8005af2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005af4:	8afb      	ldrh	r3, [r7, #22]
 8005af6:	3301      	adds	r3, #1
 8005af8:	82fb      	strh	r3, [r7, #22]
 8005afa:	8afa      	ldrh	r2, [r7, #22]
 8005afc:	893b      	ldrh	r3, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d3f1      	bcc.n	8005ae6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b02:	f7ff fe6f 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fae4 	bl	80060d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e001      	b.n	8005b1e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	715a      	strb	r2, [r3, #5]

    return status;
 8005b2a:	7ffb      	ldrb	r3, [r7, #31]
 8005b2c:	e000      	b.n	8005b30 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
  }
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	461a      	mov	r2, r3
 8005b44:	460b      	mov	r3, r1
 8005b46:	72fb      	strb	r3, [r7, #11]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	799b      	ldrb	r3, [r3, #6]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d14a      	bne.n	8005bec <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	795b      	ldrb	r3, [r3, #5]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e045      	b.n	8005bee <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fa8f 	bl	800608c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	2b84      	cmp	r3, #132	@ 0x84
 8005b72:	d002      	beq.n	8005b7a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005b74:	7afb      	ldrb	r3, [r7, #11]
 8005b76:	2b94      	cmp	r3, #148	@ 0x94
 8005b78:	d103      	bne.n	8005b82 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	711a      	strb	r2, [r3, #4]
 8005b80:	e002      	b.n	8005b88 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b88:	f7ff fe3c 	bl	8005804 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f9cd 	bl	8005f30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	82bb      	strh	r3, [r7, #20]
 8005b9a:	e00a      	b.n	8005bb2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005b9c:	8abb      	ldrh	r3, [r7, #20]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f9c2 	bl	8005f30 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005bac:	8abb      	ldrh	r3, [r7, #20]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	82bb      	strh	r3, [r7, #20]
 8005bb2:	8aba      	ldrh	r2, [r7, #20]
 8005bb4:	893b      	ldrh	r3, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3f0      	bcc.n	8005b9c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005bba:	f7ff fe13 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	2b84      	cmp	r3, #132	@ 0x84
 8005bc2:	d002      	beq.n	8005bca <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fa85 	bl	80060d4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
 8005bd6:	e001      	b.n	8005bdc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	715a      	strb	r2, [r3, #5]

    return status;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	e000      	b.n	8005bee <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
  }
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b088      	sub	sp, #32
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	461a      	mov	r2, r3
 8005c02:	460b      	mov	r3, r1
 8005c04:	72fb      	strb	r3, [r7, #11]
 8005c06:	4613      	mov	r3, r2
 8005c08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	799b      	ldrb	r3, [r3, #6]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d13d      	bne.n	8005c94 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	795b      	ldrb	r3, [r3, #5]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e038      	b.n	8005c96 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fa2e 	bl	800608c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c30:	f7ff fde8 	bl	8005804 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	4619      	mov	r1, r3
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f979 	bl	8005f30 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005c3e:	2100      	movs	r1, #0
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f975 	bl	8005f30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c46:	2300      	movs	r3, #0
 8005c48:	82fb      	strh	r3, [r7, #22]
 8005c4a:	e009      	b.n	8005c60 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005c4c:	69b9      	ldr	r1, [r7, #24]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f9c4 	bl	8005fdc <SUBGHZSPI_Receive>
      pData++;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005c5a:	8afb      	ldrh	r3, [r7, #22]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	82fb      	strh	r3, [r7, #22]
 8005c60:	8afa      	ldrh	r2, [r7, #22]
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d3f1      	bcc.n	8005c4c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c68:	f7ff fdbc 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fa31 	bl	80060d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e001      	b.n	8005c84 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	715a      	strb	r2, [r3, #5]

    return status;
 8005c90:	7ffb      	ldrb	r3, [r7, #31]
 8005c92:	e000      	b.n	8005c96 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	460b      	mov	r3, r1
 8005cac:	72fb      	strb	r3, [r7, #11]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	799b      	ldrb	r3, [r3, #6]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d13e      	bne.n	8005d3a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	795b      	ldrb	r3, [r3, #5]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e039      	b.n	8005d3c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f9dc 	bl	800608c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005cd4:	f7ff fd96 	bl	8005804 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005cd8:	210e      	movs	r1, #14
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f928 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005ce0:	7afb      	ldrb	r3, [r7, #11]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f923 	bl	8005f30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005cea:	2300      	movs	r3, #0
 8005cec:	82bb      	strh	r3, [r7, #20]
 8005cee:	e00a      	b.n	8005d06 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005cf0:	8abb      	ldrh	r3, [r7, #20]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f918 	bl	8005f30 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d00:	8abb      	ldrh	r3, [r7, #20]
 8005d02:	3301      	adds	r3, #1
 8005d04:	82bb      	strh	r3, [r7, #20]
 8005d06:	8aba      	ldrh	r2, [r7, #20]
 8005d08:	893b      	ldrh	r3, [r7, #8]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d3f0      	bcc.n	8005cf0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d0e:	f7ff fd69 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f9de 	bl	80060d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
 8005d24:	e001      	b.n	8005d2a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	715a      	strb	r2, [r3, #5]

    return status;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	e000      	b.n	8005d3c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	460b      	mov	r3, r1
 8005d52:	72fb      	strb	r3, [r7, #11]
 8005d54:	4613      	mov	r3, r2
 8005d56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	799b      	ldrb	r3, [r3, #6]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d141      	bne.n	8005dea <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	795b      	ldrb	r3, [r3, #5]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e03c      	b.n	8005dec <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f987 	bl	800608c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d7e:	f7ff fd41 	bl	8005804 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005d82:	211e      	movs	r1, #30
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f8d3 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005d8a:	7afb      	ldrb	r3, [r7, #11]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f8ce 	bl	8005f30 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005d94:	2100      	movs	r1, #0
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f8ca 	bl	8005f30 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	82fb      	strh	r3, [r7, #22]
 8005da0:	e009      	b.n	8005db6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005da2:	69b9      	ldr	r1, [r7, #24]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f919 	bl	8005fdc <SUBGHZSPI_Receive>
      pData++;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	3301      	adds	r3, #1
 8005dae:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005db0:	8afb      	ldrh	r3, [r7, #22]
 8005db2:	3301      	adds	r3, #1
 8005db4:	82fb      	strh	r3, [r7, #22]
 8005db6:	8afa      	ldrh	r2, [r7, #22]
 8005db8:	893b      	ldrh	r3, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3f1      	bcc.n	8005da2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005dbe:	f7ff fd11 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f986 	bl	80060d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e001      	b.n	8005dda <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	715a      	strb	r2, [r3, #5]

    return status;
 8005de6:	7ffb      	ldrb	r3, [r7, #31]
 8005de8:	e000      	b.n	8005dec <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005dea:	2302      	movs	r3, #2
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005e00:	f107 020c 	add.w	r2, r7, #12
 8005e04:	2302      	movs	r3, #2
 8005e06:	2112      	movs	r1, #18
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fef4 	bl	8005bf6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005e0e:	7b3b      	ldrb	r3, [r7, #12]
 8005e10:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005e12:	89fb      	ldrh	r3, [r7, #14]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	b21a      	sxth	r2, r3
 8005e18:	7b7b      	ldrb	r3, [r7, #13]
 8005e1a:	b21b      	sxth	r3, r3
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005e22:	f107 020c 	add.w	r2, r7, #12
 8005e26:	2302      	movs	r3, #2
 8005e28:	2102      	movs	r1, #2
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fe84 	bl	8005b38 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005e30:	89fb      	ldrh	r3, [r7, #14]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f005 fb30 	bl	800b4a0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f005 fb36 	bl	800b4bc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f005 fb86 	bl	800b56c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005e60:	89fb      	ldrh	r3, [r7, #14]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f005 fb8c 	bl	800b588 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f005 fb92 	bl	800b5a4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005e80:	89fb      	ldrh	r3, [r7, #14]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f005 fb60 	bl	800b550 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005e90:	89fb      	ldrh	r3, [r7, #14]
 8005e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f005 fb1c 	bl	800b4d8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005ea0:	89fb      	ldrh	r3, [r7, #14]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005eaa:	89fb      	ldrh	r3, [r7, #14]
 8005eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f005 fb1c 	bl	800b4f4 <HAL_SUBGHZ_CADStatusCallback>
 8005ebc:	e003      	b.n	8005ec6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f005 fb17 	bl	800b4f4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f005 fb2d 	bl	800b530 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f005 fb6d 	bl	800b5c0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f2c <SUBGHZSPI_Init+0x3c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a0b      	ldr	r2, [pc, #44]	@ (8005f2c <SUBGHZSPI_Init+0x3c>)
 8005efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f02:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005f04:	4a09      	ldr	r2, [pc, #36]	@ (8005f2c <SUBGHZSPI_Init+0x3c>)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8005f0c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005f0e:	4b07      	ldr	r3, [pc, #28]	@ (8005f2c <SUBGHZSPI_Init+0x3c>)
 8005f10:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005f14:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005f16:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <SUBGHZSPI_Init+0x3c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a04      	ldr	r2, [pc, #16]	@ (8005f2c <SUBGHZSPI_Init+0x3c>)
 8005f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f20:	6013      	str	r3, [r2, #0]
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	58010000 	.word	0x58010000

08005f30 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f40:	4b23      	ldr	r3, [pc, #140]	@ (8005fd0 <SUBGHZSPI_Transmit+0xa0>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	0cdb      	lsrs	r3, r3, #19
 8005f4e:	2264      	movs	r2, #100	@ 0x64
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	609a      	str	r2, [r3, #8]
      break;
 8005f66:	e008      	b.n	8005f7a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005f6e:	4b19      	ldr	r3, [pc, #100]	@ (8005fd4 <SUBGHZSPI_Transmit+0xa4>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d1ed      	bne.n	8005f56 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005f7a:	4b17      	ldr	r3, [pc, #92]	@ (8005fd8 <SUBGHZSPI_Transmit+0xa8>)
 8005f7c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f84:	4b12      	ldr	r3, [pc, #72]	@ (8005fd0 <SUBGHZSPI_Transmit+0xa0>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	0cdb      	lsrs	r3, r3, #19
 8005f92:	2264      	movs	r2, #100	@ 0x64
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d105      	bne.n	8005fac <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	609a      	str	r2, [r3, #8]
      break;
 8005faa:	e008      	b.n	8005fbe <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005fb2:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <SUBGHZSPI_Transmit+0xa4>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d1ed      	bne.n	8005f9a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005fbe:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <SUBGHZSPI_Transmit+0xa4>)
 8005fc0:	68db      	ldr	r3, [r3, #12]

  return status;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc80      	pop	{r7}
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	2000000c 	.word	0x2000000c
 8005fd4:	58010000 	.word	0x58010000
 8005fd8:	5801000c 	.word	0x5801000c

08005fdc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005fea:	4b25      	ldr	r3, [pc, #148]	@ (8006080 <SUBGHZSPI_Receive+0xa4>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	0cdb      	lsrs	r3, r3, #19
 8005ff8:	2264      	movs	r2, #100	@ 0x64
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d105      	bne.n	8006012 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	609a      	str	r2, [r3, #8]
      break;
 8006010:	e008      	b.n	8006024 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3b01      	subs	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006018:	4b1a      	ldr	r3, [pc, #104]	@ (8006084 <SUBGHZSPI_Receive+0xa8>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b02      	cmp	r3, #2
 8006022:	d1ed      	bne.n	8006000 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006024:	4b18      	ldr	r3, [pc, #96]	@ (8006088 <SUBGHZSPI_Receive+0xac>)
 8006026:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	22ff      	movs	r2, #255	@ 0xff
 800602c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800602e:	4b14      	ldr	r3, [pc, #80]	@ (8006080 <SUBGHZSPI_Receive+0xa4>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	0cdb      	lsrs	r3, r3, #19
 800603c:	2264      	movs	r2, #100	@ 0x64
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d105      	bne.n	8006056 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	609a      	str	r2, [r3, #8]
      break;
 8006054:	e008      	b.n	8006068 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3b01      	subs	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800605c:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <SUBGHZSPI_Receive+0xa8>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d1ed      	bne.n	8006044 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006068:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <SUBGHZSPI_Receive+0xa8>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	701a      	strb	r2, [r3, #0]

  return status;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	2000000c 	.word	0x2000000c
 8006084:	58010000 	.word	0x58010000
 8006088:	5801000c 	.word	0x5801000c

0800608c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	791b      	ldrb	r3, [r3, #4]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d111      	bne.n	80060c0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800609c:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <SUBGHZ_CheckDeviceReady+0x44>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	0c1b      	lsrs	r3, r3, #16
 80060aa:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80060ac:	f7ff fbaa 	bl	8005804 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f9      	bne.n	80060b0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80060bc:	f7ff fb92 	bl	80057e4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f807 	bl	80060d4 <SUBGHZ_WaitOnBusy>
 80060c6:	4603      	mov	r3, r0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	2000000c 	.word	0x2000000c

080060d4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80060e0:	4b12      	ldr	r3, [pc, #72]	@ (800612c <SUBGHZ_WaitOnBusy+0x58>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	0d1b      	lsrs	r3, r3, #20
 80060ee:	2264      	movs	r2, #100	@ 0x64
 80060f0:	fb02 f303 	mul.w	r3, r2, r3
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80060f6:	f7ff fbb3 	bl	8005860 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80060fa:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	609a      	str	r2, [r3, #8]
      break;
 800610c:	e009      	b.n	8006122 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b01      	subs	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006114:	f7ff fb92 	bl	800583c <LL_PWR_IsActiveFlag_RFBUSYS>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4013      	ands	r3, r2
 800611e:	2b01      	cmp	r3, #1
 8006120:	d0e9      	beq.n	80060f6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	2000000c 	.word	0x2000000c

08006130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e049      	b.n	80061d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fc ffce 	bl	80030f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f000 fb00 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e02e      	b.n	8006256 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a16      	ldr	r2, [pc, #88]	@ (8006260 <HAL_TIM_Base_Start+0x80>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <HAL_TIM_Base_Start+0x34>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006212:	d115      	bne.n	8006240 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	4b12      	ldr	r3, [pc, #72]	@ (8006264 <HAL_TIM_Base_Start+0x84>)
 800621c:	4013      	ands	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b06      	cmp	r3, #6
 8006224:	d015      	beq.n	8006252 <HAL_TIM_Base_Start+0x72>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622c:	d011      	beq.n	8006252 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	e008      	b.n	8006252 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e000      	b.n	8006254 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006252:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	40012c00 	.word	0x40012c00
 8006264:	00010007 	.word	0x00010007

08006268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e036      	b.n	80062ee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <HAL_TIM_Base_Start_IT+0x90>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_TIM_Base_Start_IT+0x44>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062aa:	d115      	bne.n	80062d8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <HAL_TIM_Base_Start_IT+0x94>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b06      	cmp	r3, #6
 80062bc:	d015      	beq.n	80062ea <HAL_TIM_Base_Start_IT+0x82>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c4:	d011      	beq.n	80062ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	e008      	b.n	80062ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e000      	b.n	80062ec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	00010007 	.word	0x00010007

08006300 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006322:	4013      	ands	r3, r2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10f      	bne.n	8006348 <HAL_TIM_Base_Stop_IT+0x48>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6a1a      	ldr	r2, [r3, #32]
 800632e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d107      	bne.n	8006348 <HAL_TIM_Base_Stop_IT+0x48>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0202 	mvn.w	r2, #2
 8006388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9cd 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9c0 	bl	800672c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9cf 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0204 	mvn.w	r2, #4
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9a3 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f996 	bl	800672c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9a5 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b08      	cmp	r3, #8
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0208 	mvn.w	r2, #8
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f979 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f96c 	bl	800672c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f97b 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0210 	mvn.w	r2, #16
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2208      	movs	r2, #8
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f94f 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f942 	bl	800672c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f951 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0201 	mvn.w	r2, #1
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fa fb58 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ea:	2b80      	cmp	r3, #128	@ 0x80
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f8:	2b80      	cmp	r3, #128	@ 0x80
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa95 	bl	8006a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa87 	bl	8006a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006544:	2b40      	cmp	r3, #64	@ 0x40
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006552:	2b40      	cmp	r3, #64	@ 0x40
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8fe 	bl	8006762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b20      	cmp	r3, #32
 8006572:	d10e      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d107      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0220 	mvn.w	r2, #32
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa49 	bl	8006a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_ConfigClockSource+0x1c>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0b6      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x18a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80065d4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f2:	d03e      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0xd8>
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f8:	f200 8087 	bhi.w	800670a <HAL_TIM_ConfigClockSource+0x170>
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006600:	f000 8086 	beq.w	8006710 <HAL_TIM_ConfigClockSource+0x176>
 8006604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006608:	d87f      	bhi.n	800670a <HAL_TIM_ConfigClockSource+0x170>
 800660a:	2b70      	cmp	r3, #112	@ 0x70
 800660c:	d01a      	beq.n	8006644 <HAL_TIM_ConfigClockSource+0xaa>
 800660e:	2b70      	cmp	r3, #112	@ 0x70
 8006610:	d87b      	bhi.n	800670a <HAL_TIM_ConfigClockSource+0x170>
 8006612:	2b60      	cmp	r3, #96	@ 0x60
 8006614:	d050      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0x11e>
 8006616:	2b60      	cmp	r3, #96	@ 0x60
 8006618:	d877      	bhi.n	800670a <HAL_TIM_ConfigClockSource+0x170>
 800661a:	2b50      	cmp	r3, #80	@ 0x50
 800661c:	d03c      	beq.n	8006698 <HAL_TIM_ConfigClockSource+0xfe>
 800661e:	2b50      	cmp	r3, #80	@ 0x50
 8006620:	d873      	bhi.n	800670a <HAL_TIM_ConfigClockSource+0x170>
 8006622:	2b40      	cmp	r3, #64	@ 0x40
 8006624:	d058      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0x13e>
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d86f      	bhi.n	800670a <HAL_TIM_ConfigClockSource+0x170>
 800662a:	2b30      	cmp	r3, #48	@ 0x30
 800662c:	d064      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0x15e>
 800662e:	2b30      	cmp	r3, #48	@ 0x30
 8006630:	d86b      	bhi.n	800670a <HAL_TIM_ConfigClockSource+0x170>
 8006632:	2b20      	cmp	r3, #32
 8006634:	d060      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0x15e>
 8006636:	2b20      	cmp	r3, #32
 8006638:	d867      	bhi.n	800670a <HAL_TIM_ConfigClockSource+0x170>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d05c      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0x15e>
 800663e:	2b10      	cmp	r3, #16
 8006640:	d05a      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0x15e>
 8006642:	e062      	b.n	800670a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006654:	f000 f969 	bl	800692a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006666:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	609a      	str	r2, [r3, #8]
      break;
 8006670:	e04f      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	f000 f952 	bl	800692a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006694:	609a      	str	r2, [r3, #8]
      break;
 8006696:	e03c      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a4:	461a      	mov	r2, r3
 80066a6:	f000 f8c7 	bl	8006838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2150      	movs	r1, #80	@ 0x50
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 f91e 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 80066b6:	e02c      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066c4:	461a      	mov	r2, r3
 80066c6:	f000 f8e5 	bl	8006894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2160      	movs	r1, #96	@ 0x60
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f90e 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 80066d6:	e01c      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e4:	461a      	mov	r2, r3
 80066e6:	f000 f8a7 	bl	8006838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2140      	movs	r1, #64	@ 0x40
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f8fe 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 80066f6:	e00c      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f000 f8f5 	bl	80068f2 <TIM_ITRx_SetConfig>
      break;
 8006708:	e003      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
      break;
 800670e:	e000      	b.n	8006712 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr

0800673e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a29      	ldr	r2, [pc, #164]	@ (800682c <TIM_Base_SetConfig+0xb8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_Base_SetConfig+0x20>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006792:	d108      	bne.n	80067a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a20      	ldr	r2, [pc, #128]	@ (800682c <TIM_Base_SetConfig+0xb8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_Base_SetConfig+0x52>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067b4:	d007      	beq.n	80067c6 <TIM_Base_SetConfig+0x52>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006830 <TIM_Base_SetConfig+0xbc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0x52>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006834 <TIM_Base_SetConfig+0xc0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d108      	bne.n	80067d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a0b      	ldr	r2, [pc, #44]	@ (800682c <TIM_Base_SetConfig+0xb8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_Base_SetConfig+0xa0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a0a      	ldr	r2, [pc, #40]	@ (8006830 <TIM_Base_SetConfig+0xbc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_Base_SetConfig+0xa0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a09      	ldr	r2, [pc, #36]	@ (8006834 <TIM_Base_SetConfig+0xc0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d103      	bne.n	800681c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	615a      	str	r2, [r3, #20]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 030a 	bic.w	r3, r3, #10
 8006874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr

08006894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f023 0210 	bic.w	r2, r3, #16
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	031b      	lsls	r3, r3, #12
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr

080068f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	f043 0307 	orr.w	r3, r3, #7
 8006918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	021a      	lsls	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	431a      	orrs	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4313      	orrs	r3, r2
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	609a      	str	r2, [r3, #8]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800697c:	2302      	movs	r3, #2
 800697e:	e04a      	b.n	8006a16 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d108      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a11      	ldr	r2, [pc, #68]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e8:	d10c      	bne.n	8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr
 8006a20:	40012c00 	.word	0x40012c00

08006a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <LL_RCC_GetUSARTClockSource>:
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	401a      	ands	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	4313      	orrs	r3, r2
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <LL_RCC_GetLPUARTClockSource>:
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4013      	ands	r3, r2
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e042      	b.n	8006b34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fc f8ff 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2224      	movs	r2, #36	@ 0x24
 8006aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fd0c 	bl	80074fc <UART_SetConfig>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e022      	b.n	8006b34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 ff74 	bl	80079e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fffa 	bl	8007b26 <UART_CheckIdleState>
 8006b32:	4603      	mov	r3, r0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	@ 0x28
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d173      	bne.n	8006c3e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_UART_Transmit+0x26>
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e06c      	b.n	8006c40 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2221      	movs	r2, #33	@ 0x21
 8006b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b76:	f7fc fb83 	bl	8003280 <HAL_GetTick>
 8006b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	88fa      	ldrh	r2, [r7, #6]
 8006b80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	88fa      	ldrh	r2, [r7, #6]
 8006b88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b94:	d108      	bne.n	8006ba8 <HAL_UART_Transmit+0x6c>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e003      	b.n	8006bb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bb0:	e02c      	b.n	8006c0c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2180      	movs	r1, #128	@ 0x80
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f001 f800 	bl	8007bc2 <UART_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e039      	b.n	8006c40 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10b      	bne.n	8006bea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3302      	adds	r3, #2
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	e007      	b.n	8006bfa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1cc      	bne.n	8006bb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2140      	movs	r1, #64	@ 0x40
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 ffcd 	bl	8007bc2 <UART_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e006      	b.n	8006c40 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e000      	b.n	8006c40 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006c3e:	2302      	movs	r3, #2
  }
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	@ 0x28
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	f040 80b1 	bne.w	8006dc6 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_UART_Receive+0x28>
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0a9      	b.n	8006dc8 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2222      	movs	r2, #34	@ 0x22
 8006c80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c8a:	f7fc faf9 	bl	8003280 <HAL_GetTick>
 8006c8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	88fa      	ldrh	r2, [r7, #6]
 8006c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca8:	d10e      	bne.n	8006cc8 <HAL_UART_Receive+0x80>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <HAL_UART_Receive+0x76>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cbc:	e02d      	b.n	8006d1a <HAL_UART_Receive+0xd2>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22ff      	movs	r2, #255	@ 0xff
 8006cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cc6:	e028      	b.n	8006d1a <HAL_UART_Receive+0xd2>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <HAL_UART_Receive+0xa4>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d104      	bne.n	8006ce2 <HAL_UART_Receive+0x9a>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	22ff      	movs	r2, #255	@ 0xff
 8006cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ce0:	e01b      	b.n	8006d1a <HAL_UART_Receive+0xd2>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	227f      	movs	r2, #127	@ 0x7f
 8006ce6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cea:	e016      	b.n	8006d1a <HAL_UART_Receive+0xd2>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf4:	d10d      	bne.n	8006d12 <HAL_UART_Receive+0xca>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <HAL_UART_Receive+0xc0>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	227f      	movs	r2, #127	@ 0x7f
 8006d02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d06:	e008      	b.n	8006d1a <HAL_UART_Receive+0xd2>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	223f      	movs	r2, #63	@ 0x3f
 8006d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d10:	e003      	b.n	8006d1a <HAL_UART_Receive+0xd2>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2a:	d108      	bne.n	8006d3e <HAL_UART_Receive+0xf6>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	e003      	b.n	8006d46 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d46:	e032      	b.n	8006dae <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2120      	movs	r1, #32
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 ff35 	bl	8007bc2 <UART_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e032      	b.n	8006dc8 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10c      	bne.n	8006d82 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	8a7b      	ldrh	r3, [r7, #18]
 8006d72:	4013      	ands	r3, r2
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	61bb      	str	r3, [r7, #24]
 8006d80:	e00c      	b.n	8006d9c <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	8a7b      	ldrh	r3, [r7, #18]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	4013      	ands	r3, r2
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1c6      	bne.n	8006d48 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e000      	b.n	8006dc8 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006dc6:	2302      	movs	r3, #2
  }
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3720      	adds	r7, #32
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	@ 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d137      	bne.n	8006e58 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_UART_Receive_DMA+0x24>
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e030      	b.n	8006e5a <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a18      	ldr	r2, [pc, #96]	@ (8006e64 <HAL_UART_Receive_DMA+0x94>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d01f      	beq.n	8006e48 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d018      	beq.n	8006e48 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	613b      	str	r3, [r7, #16]
   return(result);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	623b      	str	r3, [r7, #32]
 8006e36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	69f9      	ldr	r1, [r7, #28]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 ff80 	bl	8007d54 <UART_Start_Receive_DMA>
 8006e54:	4603      	mov	r3, r0
 8006e56:	e000      	b.n	8006e5a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e58:	2302      	movs	r3, #2
  }
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3728      	adds	r7, #40	@ 0x28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40008000 	.word	0x40008000

08006e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e96:	4013      	ands	r3, r2
 8006e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d11b      	bne.n	8006edc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d015      	beq.n	8006edc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 82e3 	beq.w	8007498 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
      }
      return;
 8006eda:	e2dd      	b.n	8007498 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8123 	beq.w	800712c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ee6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006eea:	4b8d      	ldr	r3, [pc, #564]	@ (8007120 <HAL_UART_IRQHandler+0x2b8>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8007124 <HAL_UART_IRQHandler+0x2bc>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 8116 	beq.w	800712c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d011      	beq.n	8006f30 <HAL_UART_IRQHandler+0xc8>
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f26:	f043 0201 	orr.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d011      	beq.n	8006f60 <HAL_UART_IRQHandler+0xf8>
 8006f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d011      	beq.n	8006f90 <HAL_UART_IRQHandler+0x128>
 8006f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f86:	f043 0202 	orr.w	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d017      	beq.n	8006fcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fa8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fac:	4b5c      	ldr	r3, [pc, #368]	@ (8007120 <HAL_UART_IRQHandler+0x2b8>)
 8006fae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d012      	beq.n	8006ffe <HAL_UART_IRQHandler+0x196>
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff4:	f043 0220 	orr.w	r2, r3, #32
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8249 	beq.w	800749c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d013      	beq.n	800703e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d105      	bne.n	800702e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007044:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007052:	2b40      	cmp	r3, #64	@ 0x40
 8007054:	d005      	beq.n	8007062 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800705a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800705e:	2b00      	cmp	r3, #0
 8007060:	d054      	beq.n	800710c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 ff5c 	bl	8007f20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	d146      	bne.n	8007104 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800708c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3308      	adds	r3, #8
 800709e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1d9      	bne.n	8007076 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d017      	beq.n	80070fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d2:	4a15      	ldr	r2, [pc, #84]	@ (8007128 <HAL_UART_IRQHandler+0x2c0>)
 80070d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fc fcc9 	bl	8003a74 <HAL_DMA_Abort_IT>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d019      	beq.n	800711c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80070f6:	4610      	mov	r0, r2
 80070f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fa:	e00f      	b.n	800711c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9e9 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007102:	e00b      	b.n	800711c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f9e5 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710a:	e007      	b.n	800711c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f9e1 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800711a:	e1bf      	b.n	800749c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	bf00      	nop
    return;
 800711e:	e1bd      	b.n	800749c <HAL_UART_IRQHandler+0x634>
 8007120:	10000001 	.word	0x10000001
 8007124:	04000120 	.word	0x04000120
 8007128:	080081d5 	.word	0x080081d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007130:	2b01      	cmp	r3, #1
 8007132:	f040 8153 	bne.w	80073dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713a:	f003 0310 	and.w	r3, r3, #16
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 814c 	beq.w	80073dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8145 	beq.w	80073dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2210      	movs	r2, #16
 8007158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007164:	2b40      	cmp	r3, #64	@ 0x40
 8007166:	f040 80bb 	bne.w	80072e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007178:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 818f 	beq.w	80074a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800718c:	429a      	cmp	r2, r3
 800718e:	f080 8187 	bcs.w	80074a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007198:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 8087 	bne.w	80072be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1da      	bne.n	80071b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800720a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800721e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007222:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e1      	bne.n	80071fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3308      	adds	r3, #8
 800723c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800724c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3308      	adds	r3, #8
 8007256:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800725a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800725c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007260:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e3      	bne.n	8007236 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800728a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800728c:	f023 0310 	bic.w	r3, r3, #16
 8007290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800729e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e4      	bne.n	800727c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fc fb7d 	bl	80039b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f904 	bl	80074e6 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072de:	e0df      	b.n	80074a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 80d1 	beq.w	80074a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80cc 	beq.w	80074a4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800732e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007330:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800733c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e4      	bne.n	800730c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	623b      	str	r3, [r7, #32]
   return(result);
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800736a:	633a      	str	r2, [r7, #48]	@ 0x30
 800736c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e1      	bne.n	8007342 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0310 	bic.w	r3, r3, #16
 80073a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	69b9      	ldr	r1, [r7, #24]
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	617b      	str	r3, [r7, #20]
   return(result);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e4      	bne.n	8007392 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f886 	bl	80074e6 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073da:	e063      	b.n	80074a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <HAL_UART_IRQHandler+0x59e>
 80073e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80073fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 ff29 	bl	8008256 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007404:	e051      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800740a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740e:	2b00      	cmp	r3, #0
 8007410:	d014      	beq.n	800743c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800741a:	2b00      	cmp	r3, #0
 800741c:	d105      	bne.n	800742a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800741e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d008      	beq.n	800743c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800742e:	2b00      	cmp	r3, #0
 8007430:	d03a      	beq.n	80074a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
    }
    return;
 800743a:	e035      	b.n	80074a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800743c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d009      	beq.n	800745c <HAL_UART_IRQHandler+0x5f4>
 8007448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800744c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fed3 	bl	8008200 <UART_EndTransmit_IT>
    return;
 800745a:	e026      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800745c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <HAL_UART_IRQHandler+0x614>
 8007468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800746c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 ff00 	bl	800827a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800747a:	e016      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800747c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d010      	beq.n	80074aa <HAL_UART_IRQHandler+0x642>
 8007488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800748c:	2b00      	cmp	r3, #0
 800748e:	da0c      	bge.n	80074aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fee9 	bl	8008268 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007496:	e008      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
      return;
 8007498:	bf00      	nop
 800749a:	e006      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
    return;
 800749c:	bf00      	nop
 800749e:	e004      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
      return;
 80074a0:	bf00      	nop
 80074a2:	e002      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
      return;
 80074a4:	bf00      	nop
 80074a6:	e000      	b.n	80074aa <HAL_UART_IRQHandler+0x642>
    return;
 80074a8:	bf00      	nop
  }
}
 80074aa:	37e8      	adds	r7, #232	@ 0xe8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr

080074c2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr

080074e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007500:	b08c      	sub	sp, #48	@ 0x30
 8007502:	af00      	add	r7, sp, #0
 8007504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	431a      	orrs	r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	431a      	orrs	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	4313      	orrs	r3, r2
 8007522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4b94      	ldr	r3, [pc, #592]	@ (800777c <UART_SetConfig+0x280>)
 800752c:	4013      	ands	r3, r2
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007534:	430b      	orrs	r3, r1
 8007536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a89      	ldr	r2, [pc, #548]	@ (8007780 <UART_SetConfig+0x284>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007564:	4313      	orrs	r3, r2
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007572:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800757c:	430b      	orrs	r3, r1
 800757e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	f023 010f 	bic.w	r1, r3, #15
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a7a      	ldr	r2, [pc, #488]	@ (8007784 <UART_SetConfig+0x288>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d127      	bne.n	80075f0 <UART_SetConfig+0xf4>
 80075a0:	2003      	movs	r0, #3
 80075a2:	f7ff fa5a 	bl	8006a5a <LL_RCC_GetUSARTClockSource>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d81b      	bhi.n	80075e8 <UART_SetConfig+0xec>
 80075b0:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <UART_SetConfig+0xbc>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075d9 	.word	0x080075d9
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	2301      	movs	r3, #1
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ce:	e080      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80075d0:	2302      	movs	r3, #2
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d6:	e07c      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80075d8:	2304      	movs	r3, #4
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075de:	e078      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80075e0:	2308      	movs	r3, #8
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e6:	e074      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80075e8:	2310      	movs	r3, #16
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ee:	e070      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a64      	ldr	r2, [pc, #400]	@ (8007788 <UART_SetConfig+0x28c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d138      	bne.n	800766c <UART_SetConfig+0x170>
 80075fa:	200c      	movs	r0, #12
 80075fc:	f7ff fa2d 	bl	8006a5a <LL_RCC_GetUSARTClockSource>
 8007600:	4603      	mov	r3, r0
 8007602:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8007606:	2b0c      	cmp	r3, #12
 8007608:	d82c      	bhi.n	8007664 <UART_SetConfig+0x168>
 800760a:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <UART_SetConfig+0x114>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007645 	.word	0x08007645
 8007614:	08007665 	.word	0x08007665
 8007618:	08007665 	.word	0x08007665
 800761c:	08007665 	.word	0x08007665
 8007620:	08007655 	.word	0x08007655
 8007624:	08007665 	.word	0x08007665
 8007628:	08007665 	.word	0x08007665
 800762c:	08007665 	.word	0x08007665
 8007630:	0800764d 	.word	0x0800764d
 8007634:	08007665 	.word	0x08007665
 8007638:	08007665 	.word	0x08007665
 800763c:	08007665 	.word	0x08007665
 8007640:	0800765d 	.word	0x0800765d
 8007644:	2300      	movs	r3, #0
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e042      	b.n	80076d2 <UART_SetConfig+0x1d6>
 800764c:	2302      	movs	r3, #2
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007652:	e03e      	b.n	80076d2 <UART_SetConfig+0x1d6>
 8007654:	2304      	movs	r3, #4
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765a:	e03a      	b.n	80076d2 <UART_SetConfig+0x1d6>
 800765c:	2308      	movs	r3, #8
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007662:	e036      	b.n	80076d2 <UART_SetConfig+0x1d6>
 8007664:	2310      	movs	r3, #16
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766a:	e032      	b.n	80076d2 <UART_SetConfig+0x1d6>
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a43      	ldr	r2, [pc, #268]	@ (8007780 <UART_SetConfig+0x284>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d12a      	bne.n	80076cc <UART_SetConfig+0x1d0>
 8007676:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800767a:	f7ff fa00 	bl	8006a7e <LL_RCC_GetLPUARTClockSource>
 800767e:	4603      	mov	r3, r0
 8007680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007684:	d01a      	beq.n	80076bc <UART_SetConfig+0x1c0>
 8007686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800768a:	d81b      	bhi.n	80076c4 <UART_SetConfig+0x1c8>
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007690:	d00c      	beq.n	80076ac <UART_SetConfig+0x1b0>
 8007692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007696:	d815      	bhi.n	80076c4 <UART_SetConfig+0x1c8>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <UART_SetConfig+0x1a8>
 800769c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a0:	d008      	beq.n	80076b4 <UART_SetConfig+0x1b8>
 80076a2:	e00f      	b.n	80076c4 <UART_SetConfig+0x1c8>
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076aa:	e012      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80076ac:	2302      	movs	r3, #2
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	e00e      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ba:	e00a      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c2:	e006      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ca:	e002      	b.n	80076d2 <UART_SetConfig+0x1d6>
 80076cc:	2310      	movs	r3, #16
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007780 <UART_SetConfig+0x284>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	f040 80a4 	bne.w	8007826 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d823      	bhi.n	800772e <UART_SetConfig+0x232>
 80076e6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <UART_SetConfig+0x1f0>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007711 	.word	0x08007711
 80076f0:	0800772f 	.word	0x0800772f
 80076f4:	08007719 	.word	0x08007719
 80076f8:	0800772f 	.word	0x0800772f
 80076fc:	0800771f 	.word	0x0800771f
 8007700:	0800772f 	.word	0x0800772f
 8007704:	0800772f 	.word	0x0800772f
 8007708:	0800772f 	.word	0x0800772f
 800770c:	08007727 	.word	0x08007727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007710:	f7fd fd70 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8007714:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007716:	e010      	b.n	800773a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007718:	4b1c      	ldr	r3, [pc, #112]	@ (800778c <UART_SetConfig+0x290>)
 800771a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800771c:	e00d      	b.n	800773a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771e:	f7fd fcb5 	bl	800508c <HAL_RCC_GetSysClockFreq>
 8007722:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007724:	e009      	b.n	800773a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800772c:	e005      	b.n	800773a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8137 	beq.w	80079b0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007746:	4a12      	ldr	r2, [pc, #72]	@ (8007790 <UART_SetConfig+0x294>)
 8007748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800774c:	461a      	mov	r2, r3
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	fbb3 f3f2 	udiv	r3, r3, r2
 8007754:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	4413      	add	r3, r2
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	429a      	cmp	r2, r3
 8007764:	d305      	bcc.n	8007772 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	429a      	cmp	r2, r3
 8007770:	d910      	bls.n	8007794 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007778:	e11a      	b.n	80079b0 <UART_SetConfig+0x4b4>
 800777a:	bf00      	nop
 800777c:	cfff69f3 	.word	0xcfff69f3
 8007780:	40008000 	.word	0x40008000
 8007784:	40013800 	.word	0x40013800
 8007788:	40004400 	.word	0x40004400
 800778c:	00f42400 	.word	0x00f42400
 8007790:	0800d1a4 	.word	0x0800d1a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	2200      	movs	r2, #0
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	60fa      	str	r2, [r7, #12]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	4a8e      	ldr	r2, [pc, #568]	@ (80079dc <UART_SetConfig+0x4e0>)
 80077a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2200      	movs	r2, #0
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077b6:	f7f8 fd33 	bl	8000220 <__aeabi_uldivmod>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	f04f 0300 	mov.w	r3, #0
 80077ca:	020b      	lsls	r3, r1, #8
 80077cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077d0:	0202      	lsls	r2, r0, #8
 80077d2:	6979      	ldr	r1, [r7, #20]
 80077d4:	6849      	ldr	r1, [r1, #4]
 80077d6:	0849      	lsrs	r1, r1, #1
 80077d8:	2000      	movs	r0, #0
 80077da:	460c      	mov	r4, r1
 80077dc:	4605      	mov	r5, r0
 80077de:	eb12 0804 	adds.w	r8, r2, r4
 80077e2:	eb43 0905 	adc.w	r9, r3, r5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	469a      	mov	sl, r3
 80077ee:	4693      	mov	fp, r2
 80077f0:	4652      	mov	r2, sl
 80077f2:	465b      	mov	r3, fp
 80077f4:	4640      	mov	r0, r8
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7f8 fd12 	bl	8000220 <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4613      	mov	r3, r2
 8007802:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800780a:	d308      	bcc.n	800781e <UART_SetConfig+0x322>
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007812:	d204      	bcs.n	800781e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6a3a      	ldr	r2, [r7, #32]
 800781a:	60da      	str	r2, [r3, #12]
 800781c:	e0c8      	b.n	80079b0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007824:	e0c4      	b.n	80079b0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800782e:	d167      	bne.n	8007900 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007830:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007834:	2b08      	cmp	r3, #8
 8007836:	d828      	bhi.n	800788a <UART_SetConfig+0x38e>
 8007838:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <UART_SetConfig+0x344>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007865 	.word	0x08007865
 8007844:	0800786d 	.word	0x0800786d
 8007848:	08007875 	.word	0x08007875
 800784c:	0800788b 	.word	0x0800788b
 8007850:	0800787b 	.word	0x0800787b
 8007854:	0800788b 	.word	0x0800788b
 8007858:	0800788b 	.word	0x0800788b
 800785c:	0800788b 	.word	0x0800788b
 8007860:	08007883 	.word	0x08007883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007864:	f7fd fcc6 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8007868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800786a:	e014      	b.n	8007896 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800786c:	f7fd fcd4 	bl	8005218 <HAL_RCC_GetPCLK2Freq>
 8007870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007872:	e010      	b.n	8007896 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007874:	4b5a      	ldr	r3, [pc, #360]	@ (80079e0 <UART_SetConfig+0x4e4>)
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007878:	e00d      	b.n	8007896 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800787a:	f7fd fc07 	bl	800508c <HAL_RCC_GetSysClockFreq>
 800787e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007880:	e009      	b.n	8007896 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007888:	e005      	b.n	8007896 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007894:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8089 	beq.w	80079b0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a2:	4a4e      	ldr	r2, [pc, #312]	@ (80079dc <UART_SetConfig+0x4e0>)
 80078a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b0:	005a      	lsls	r2, r3, #1
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	441a      	add	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	2b0f      	cmp	r3, #15
 80078c8:	d916      	bls.n	80078f8 <UART_SetConfig+0x3fc>
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d0:	d212      	bcs.n	80078f8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	f023 030f 	bic.w	r3, r3, #15
 80078da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	8bfb      	ldrh	r3, [r7, #30]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	8bfa      	ldrh	r2, [r7, #30]
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	e05b      	b.n	80079b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078fe:	e057      	b.n	80079b0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007900:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007904:	2b08      	cmp	r3, #8
 8007906:	d828      	bhi.n	800795a <UART_SetConfig+0x45e>
 8007908:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <UART_SetConfig+0x414>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007935 	.word	0x08007935
 8007914:	0800793d 	.word	0x0800793d
 8007918:	08007945 	.word	0x08007945
 800791c:	0800795b 	.word	0x0800795b
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800795b 	.word	0x0800795b
 8007928:	0800795b 	.word	0x0800795b
 800792c:	0800795b 	.word	0x0800795b
 8007930:	08007953 	.word	0x08007953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007934:	f7fd fc5e 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8007938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800793a:	e014      	b.n	8007966 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800793c:	f7fd fc6c 	bl	8005218 <HAL_RCC_GetPCLK2Freq>
 8007940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007942:	e010      	b.n	8007966 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007944:	4b26      	ldr	r3, [pc, #152]	@ (80079e0 <UART_SetConfig+0x4e4>)
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007948:	e00d      	b.n	8007966 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800794a:	f7fd fb9f 	bl	800508c <HAL_RCC_GetSysClockFreq>
 800794e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007950:	e009      	b.n	8007966 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007958:	e005      	b.n	8007966 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007964:	bf00      	nop
    }

    if (pclk != 0U)
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d021      	beq.n	80079b0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	4a1a      	ldr	r2, [pc, #104]	@ (80079dc <UART_SetConfig+0x4e0>)
 8007972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007976:	461a      	mov	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	fbb3 f2f2 	udiv	r2, r3, r2
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	441a      	add	r2, r3
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d909      	bls.n	80079aa <UART_SetConfig+0x4ae>
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800799c:	d205      	bcs.n	80079aa <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60da      	str	r2, [r3, #12]
 80079a8:	e002      	b.n	80079b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2200      	movs	r2, #0
 80079ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3730      	adds	r7, #48	@ 0x30
 80079d4:	46bd      	mov	sp, r7
 80079d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079da:	bf00      	nop
 80079dc:	0800d1a4 	.word	0x0800d1a4
 80079e0:	00f42400 	.word	0x00f42400

080079e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01a      	beq.n	8007afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae2:	d10a      	bne.n	8007afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	605a      	str	r2, [r3, #4]
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af02      	add	r7, sp, #8
 8007b2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b36:	f7fb fba3 	bl	8003280 <HAL_GetTick>
 8007b3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d10e      	bne.n	8007b68 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f832 	bl	8007bc2 <UART_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e028      	b.n	8007bba <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d10e      	bne.n	8007b94 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f81c 	bl	8007bc2 <UART_WaitOnFlagUntilTimeout>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e012      	b.n	8007bba <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b09c      	sub	sp, #112	@ 0x70
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd2:	e0a9      	b.n	8007d28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	f000 80a5 	beq.w	8007d28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bde:	f7fb fb4f 	bl	8003280 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d302      	bcc.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d140      	bne.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c04:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007c08:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c14:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e6      	bne.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	f023 0301 	bic.w	r3, r3, #1
 8007c3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c46:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007c48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e5      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e069      	b.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d051      	beq.n	8007d28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c92:	d149      	bne.n	8007d28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cbe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e6      	bne.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f023 0301 	bic.w	r3, r3, #1
 8007ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007cf0:	623a      	str	r2, [r7, #32]
 8007cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	69f9      	ldr	r1, [r7, #28]
 8007cf6:	6a3a      	ldr	r2, [r7, #32]
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e5      	bne.n	8007cd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e010      	b.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4013      	ands	r3, r2
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	bf0c      	ite	eq
 8007d38:	2301      	moveq	r3, #1
 8007d3a:	2300      	movne	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	f43f af46 	beq.w	8007bd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3770      	adds	r7, #112	@ 0x70
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b096      	sub	sp, #88	@ 0x58
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2222      	movs	r2, #34	@ 0x22
 8007d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d02d      	beq.n	8007de6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d90:	4a40      	ldr	r2, [pc, #256]	@ (8007e94 <UART_Start_Receive_DMA+0x140>)
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e98 <UART_Start_Receive_DMA+0x144>)
 8007d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da4:	4a3d      	ldr	r2, [pc, #244]	@ (8007e9c <UART_Start_Receive_DMA+0x148>)
 8007da6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dae:	2200      	movs	r2, #0
 8007db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3324      	adds	r3, #36	@ 0x24
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	f7fb fd78 	bl	80038bc <HAL_DMA_Start_IT>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2210      	movs	r2, #16
 8007dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e051      	b.n	8007e8a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e02:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e40:	637a      	str	r2, [r7, #52]	@ 0x34
 8007e42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e5      	bne.n	8007e20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	613b      	str	r3, [r7, #16]
   return(result);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e74:	623a      	str	r2, [r7, #32]
 8007e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	69f9      	ldr	r1, [r7, #28]
 8007e7a:	6a3a      	ldr	r2, [r7, #32]
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e5      	bne.n	8007e54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3758      	adds	r7, #88	@ 0x58
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	08007feb 	.word	0x08007feb
 8007e98:	08008117 	.word	0x08008117
 8007e9c:	08008155 	.word	0x08008155

08007ea0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b08f      	sub	sp, #60	@ 0x3c
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ec8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e6      	bne.n	8007ea8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007efa:	61ba      	str	r2, [r7, #24]
 8007efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	613b      	str	r3, [r7, #16]
   return(result);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e5      	bne.n	8007eda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007f16:	bf00      	nop
 8007f18:	373c      	adds	r7, #60	@ 0x3c
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b095      	sub	sp, #84	@ 0x54
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e6      	bne.n	8007f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e3      	bne.n	8007f5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d118      	bne.n	8007fcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f023 0310 	bic.w	r3, r3, #16
 8007fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6979      	ldr	r1, [r7, #20]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e6      	bne.n	8007f9a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fe0:	bf00      	nop
 8007fe2:	3754      	adds	r7, #84	@ 0x54
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr

08007fea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b09c      	sub	sp, #112	@ 0x70
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d171      	bne.n	80080ea <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008008:	2200      	movs	r2, #0
 800800a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800800e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800801c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800801e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008022:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800802c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800802e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008032:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800803a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3308      	adds	r3, #8
 8008046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	667b      	str	r3, [r7, #100]	@ 0x64
 8008058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008060:	647a      	str	r2, [r7, #68]	@ 0x44
 8008062:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800806e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3308      	adds	r3, #8
 800807a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	623b      	str	r3, [r7, #32]
   return(result);
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800808a:	663b      	str	r3, [r7, #96]	@ 0x60
 800808c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008094:	633a      	str	r2, [r7, #48]	@ 0x30
 8008096:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800809a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e5      	bne.n	8008074 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080aa:	2220      	movs	r2, #32
 80080ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d118      	bne.n	80080ea <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f023 0310 	bic.w	r3, r3, #16
 80080cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	69b9      	ldr	r1, [r7, #24]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	617b      	str	r3, [r7, #20]
   return(result);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ec:	2200      	movs	r2, #0
 80080ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d107      	bne.n	8008108 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080fe:	4619      	mov	r1, r3
 8008100:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008102:	f7ff f9f0 	bl	80074e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008106:	e002      	b.n	800810e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008108:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800810a:	f7f8 fe85 	bl	8000e18 <HAL_UART_RxCpltCallback>
}
 800810e:	bf00      	nop
 8008110:	3770      	adds	r7, #112	@ 0x70
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008122:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800812e:	2b01      	cmp	r3, #1
 8008130:	d109      	bne.n	8008146 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	b29b      	uxth	r3, r3
 800813c:	4619      	mov	r1, r3
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff f9d1 	bl	80074e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008144:	e002      	b.n	800814c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff f9bb 	bl	80074c2 <HAL_UART_RxHalfCpltCallback>
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008168:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008170:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800817c:	2b80      	cmp	r3, #128	@ 0x80
 800817e:	d109      	bne.n	8008194 <UART_DMAError+0x40>
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	2b21      	cmp	r3, #33	@ 0x21
 8008184:	d106      	bne.n	8008194 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2200      	movs	r2, #0
 800818a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800818e:	6978      	ldr	r0, [r7, #20]
 8008190:	f7ff fe86 	bl	8007ea0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819e:	2b40      	cmp	r3, #64	@ 0x40
 80081a0:	d109      	bne.n	80081b6 <UART_DMAError+0x62>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b22      	cmp	r3, #34	@ 0x22
 80081a6:	d106      	bne.n	80081b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80081b0:	6978      	ldr	r0, [r7, #20]
 80081b2:	f7ff feb5 	bl	8007f20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081bc:	f043 0210 	orr.w	r2, r3, #16
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081c6:	6978      	ldr	r0, [r7, #20]
 80081c8:	f7ff f984 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081cc:	bf00      	nop
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff f96e 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	60bb      	str	r3, [r7, #8]
   return(result);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	61bb      	str	r3, [r7, #24]
 8008228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6979      	ldr	r1, [r7, #20]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	613b      	str	r3, [r7, #16]
   return(result);
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff f931 	bl	80074b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800824e:	bf00      	nop
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr

0800827a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	bc80      	pop	{r7}
 800828a:	4770      	bx	lr

0800828c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800829e:	2302      	movs	r3, #2
 80082a0:	e027      	b.n	80082f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2224      	movs	r2, #36	@ 0x24
 80082ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0201 	bic.w	r2, r2, #1
 80082c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80082d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr

080082fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008310:	2302      	movs	r3, #2
 8008312:	e02d      	b.n	8008370 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2224      	movs	r2, #36	@ 0x24
 8008320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0201 	bic.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f84f 	bl	80083f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2220      	movs	r2, #32
 8008362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800838c:	2302      	movs	r3, #2
 800838e:	e02d      	b.n	80083ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2224      	movs	r2, #36	@ 0x24
 800839c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0201 	bic.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f811 	bl	80083f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008400:	2b00      	cmp	r3, #0
 8008402:	d108      	bne.n	8008416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008414:	e031      	b.n	800847a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008416:	2308      	movs	r3, #8
 8008418:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800841a:	2308      	movs	r3, #8
 800841c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	0e5b      	lsrs	r3, r3, #25
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	0f5b      	lsrs	r3, r3, #29
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	7b3a      	ldrb	r2, [r7, #12]
 8008442:	4910      	ldr	r1, [pc, #64]	@ (8008484 <UARTEx_SetNbDataToProcess+0x90>)
 8008444:	5c8a      	ldrb	r2, [r1, r2]
 8008446:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800844a:	7b3a      	ldrb	r2, [r7, #12]
 800844c:	490e      	ldr	r1, [pc, #56]	@ (8008488 <UARTEx_SetNbDataToProcess+0x94>)
 800844e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008450:	fb93 f3f2 	sdiv	r3, r3, r2
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	7b7a      	ldrb	r2, [r7, #13]
 8008460:	4908      	ldr	r1, [pc, #32]	@ (8008484 <UARTEx_SetNbDataToProcess+0x90>)
 8008462:	5c8a      	ldrb	r2, [r1, r2]
 8008464:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008468:	7b7a      	ldrb	r2, [r7, #13]
 800846a:	4907      	ldr	r1, [pc, #28]	@ (8008488 <UARTEx_SetNbDataToProcess+0x94>)
 800846c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800846e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr
 8008484:	0800d1bc 	.word	0x0800d1bc
 8008488:	0800d1c4 	.word	0x0800d1c4

0800848c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af02      	add	r7, sp, #8
 8008492:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8008494:	4a24      	ldr	r2, [pc, #144]	@ (8008528 <RadioInit+0x9c>)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800849a:	4b24      	ldr	r3, [pc, #144]	@ (800852c <RadioInit+0xa0>)
 800849c:	2200      	movs	r2, #0
 800849e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80084a0:	4b22      	ldr	r3, [pc, #136]	@ (800852c <RadioInit+0xa0>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80084a6:	4b21      	ldr	r3, [pc, #132]	@ (800852c <RadioInit+0xa0>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80084ac:	4b1f      	ldr	r3, [pc, #124]	@ (800852c <RadioInit+0xa0>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80084b2:	481f      	ldr	r0, [pc, #124]	@ (8008530 <RadioInit+0xa4>)
 80084b4:	f001 ff86 	bl	800a3c4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80084b8:	4b1c      	ldr	r3, [pc, #112]	@ (800852c <RadioInit+0xa0>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80084be:	4b1b      	ldr	r3, [pc, #108]	@ (800852c <RadioInit+0xa0>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80084c4:	f002 fa1a 	bl	800a8fc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80084c8:	2100      	movs	r1, #0
 80084ca:	2000      	movs	r0, #0
 80084cc:	f002 fde6 	bl	800b09c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80084d0:	2204      	movs	r2, #4
 80084d2:	2100      	movs	r1, #0
 80084d4:	2001      	movs	r0, #1
 80084d6:	f002 fba3 	bl	800ac20 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80084da:	2300      	movs	r3, #0
 80084dc:	2200      	movs	r2, #0
 80084de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80084e2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80084e6:	f002 fad3 	bl	800aa90 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80084ea:	f000 fe91 	bl	8009210 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80084ee:	2300      	movs	r3, #0
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <RadioInit+0xa8>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	f04f 31ff 	mov.w	r1, #4294967295
 80084fa:	480f      	ldr	r0, [pc, #60]	@ (8008538 <RadioInit+0xac>)
 80084fc:	f003 fb1c 	bl	800bb38 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008500:	2300      	movs	r3, #0
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <RadioInit+0xb0>)
 8008506:	2200      	movs	r2, #0
 8008508:	f04f 31ff 	mov.w	r1, #4294967295
 800850c:	480c      	ldr	r0, [pc, #48]	@ (8008540 <RadioInit+0xb4>)
 800850e:	f003 fb13 	bl	800bb38 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008512:	4809      	ldr	r0, [pc, #36]	@ (8008538 <RadioInit+0xac>)
 8008514:	f003 fbb4 	bl	800bc80 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008518:	4809      	ldr	r0, [pc, #36]	@ (8008540 <RadioInit+0xb4>)
 800851a:	f003 fbb1 	bl	800bc80 <UTIL_TIMER_Stop>
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20000a8c 	.word	0x20000a8c
 800852c:	20000a90 	.word	0x20000a90
 8008530:	08009605 	.word	0x08009605
 8008534:	0800958d 	.word	0x0800958d
 8008538:	20000aec 	.word	0x20000aec
 800853c:	080095a1 	.word	0x080095a1
 8008540:	20000b04 	.word	0x20000b04

08008544 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008548:	f001 ff84 	bl	800a454 <SUBGRF_GetOperatingMode>
 800854c:	4603      	mov	r3, r0
 800854e:	2b07      	cmp	r3, #7
 8008550:	d00a      	beq.n	8008568 <RadioGetStatus+0x24>
 8008552:	2b07      	cmp	r3, #7
 8008554:	dc0a      	bgt.n	800856c <RadioGetStatus+0x28>
 8008556:	2b04      	cmp	r3, #4
 8008558:	d002      	beq.n	8008560 <RadioGetStatus+0x1c>
 800855a:	2b05      	cmp	r3, #5
 800855c:	d002      	beq.n	8008564 <RadioGetStatus+0x20>
 800855e:	e005      	b.n	800856c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008560:	2302      	movs	r3, #2
 8008562:	e004      	b.n	800856e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008564:	2301      	movs	r3, #1
 8008566:	e002      	b.n	800856e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008568:	2303      	movs	r3, #3
 800856a:	e000      	b.n	800856e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800856c:	2300      	movs	r3, #0
    }
}
 800856e:	4618      	mov	r0, r3
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800857e:	4a2a      	ldr	r2, [pc, #168]	@ (8008628 <RadioSetModem+0xb4>)
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	4618      	mov	r0, r3
 8008588:	f003 f95b 	bl	800b842 <RFW_SetRadioModem>
    switch( modem )
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b05      	cmp	r3, #5
 8008590:	d80e      	bhi.n	80085b0 <RadioSetModem+0x3c>
 8008592:	a201      	add	r2, pc, #4	@ (adr r2, 8008598 <RadioSetModem+0x24>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085bf 	.word	0x080085bf
 800859c:	080085cd 	.word	0x080085cd
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085f3 	.word	0x080085f3
 80085a8:	08008601 	.word	0x08008601
 80085ac:	0800860f 	.word	0x0800860f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80085b0:	2003      	movs	r0, #3
 80085b2:	f002 fb0f 	bl	800abd4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80085b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008628 <RadioSetModem+0xb4>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	735a      	strb	r2, [r3, #13]
        break;
 80085bc:	e02f      	b.n	800861e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80085be:	2000      	movs	r0, #0
 80085c0:	f002 fb08 	bl	800abd4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80085c4:	4b18      	ldr	r3, [pc, #96]	@ (8008628 <RadioSetModem+0xb4>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	735a      	strb	r2, [r3, #13]
        break;
 80085ca:	e028      	b.n	800861e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80085cc:	2001      	movs	r0, #1
 80085ce:	f002 fb01 	bl	800abd4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80085d2:	4b15      	ldr	r3, [pc, #84]	@ (8008628 <RadioSetModem+0xb4>)
 80085d4:	7b5a      	ldrb	r2, [r3, #13]
 80085d6:	4b14      	ldr	r3, [pc, #80]	@ (8008628 <RadioSetModem+0xb4>)
 80085d8:	7b1b      	ldrb	r3, [r3, #12]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d01e      	beq.n	800861c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80085de:	4b12      	ldr	r3, [pc, #72]	@ (8008628 <RadioSetModem+0xb4>)
 80085e0:	7b1a      	ldrb	r2, [r3, #12]
 80085e2:	4b11      	ldr	r3, [pc, #68]	@ (8008628 <RadioSetModem+0xb4>)
 80085e4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80085e6:	4b10      	ldr	r3, [pc, #64]	@ (8008628 <RadioSetModem+0xb4>)
 80085e8:	7b5b      	ldrb	r3, [r3, #13]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 ff98 	bl	8009520 <RadioSetPublicNetwork>
        }
        break;
 80085f0:	e014      	b.n	800861c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80085f2:	2002      	movs	r0, #2
 80085f4:	f002 faee 	bl	800abd4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80085f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008628 <RadioSetModem+0xb4>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	735a      	strb	r2, [r3, #13]
        break;
 80085fe:	e00e      	b.n	800861e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008600:	2002      	movs	r0, #2
 8008602:	f002 fae7 	bl	800abd4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008606:	4b08      	ldr	r3, [pc, #32]	@ (8008628 <RadioSetModem+0xb4>)
 8008608:	2200      	movs	r2, #0
 800860a:	735a      	strb	r2, [r3, #13]
        break;
 800860c:	e007      	b.n	800861e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800860e:	2000      	movs	r0, #0
 8008610:	f002 fae0 	bl	800abd4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008614:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <RadioSetModem+0xb4>)
 8008616:	2200      	movs	r2, #0
 8008618:	735a      	strb	r2, [r3, #13]
        break;
 800861a:	e000      	b.n	800861e <RadioSetModem+0xaa>
        break;
 800861c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000a90 	.word	0x20000a90

0800862c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f002 fa87 	bl	800ab48 <SUBGRF_SetRfFrequency>
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b090      	sub	sp, #64	@ 0x40
 8008646:	af0a      	add	r7, sp, #40	@ 0x28
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800865e:	f000 fdea 	bl	8009236 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008662:	2000      	movs	r0, #0
 8008664:	f7ff ff86 	bl	8008574 <RadioSetModem>

    RadioSetChannel( freq );
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff ffdf 	bl	800862c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800866e:	2301      	movs	r3, #1
 8008670:	9309      	str	r3, [sp, #36]	@ 0x24
 8008672:	2300      	movs	r3, #0
 8008674:	9308      	str	r3, [sp, #32]
 8008676:	2300      	movs	r3, #0
 8008678:	9307      	str	r3, [sp, #28]
 800867a:	2300      	movs	r3, #0
 800867c:	9306      	str	r3, [sp, #24]
 800867e:	2300      	movs	r3, #0
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	2300      	movs	r3, #0
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	2300      	movs	r3, #0
 8008688:	9303      	str	r3, [sp, #12]
 800868a:	2300      	movs	r3, #0
 800868c:	9302      	str	r3, [sp, #8]
 800868e:	2303      	movs	r3, #3
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	2300      	movs	r3, #0
 8008698:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	2000      	movs	r0, #0
 80086a0:	f000 f83c 	bl	800871c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80086a4:	2000      	movs	r0, #0
 80086a6:	f000 fdcd 	bl	8009244 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80086aa:	f000 ff67 	bl	800957c <RadioGetWakeupTime>
 80086ae:	4603      	mov	r3, r0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fa fdf9 	bl	80032a8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80086b6:	f003 fb7d 	bl	800bdb4 <UTIL_TIMER_GetCurrentTime>
 80086ba:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80086bc:	e00d      	b.n	80086da <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80086be:	2000      	movs	r0, #0
 80086c0:	f000 feae 	bl	8009420 <RadioRssi>
 80086c4:	4603      	mov	r3, r0
 80086c6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80086c8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80086cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	dd02      	ble.n	80086da <RadioIsChannelFree+0x98>
        {
            status = false;
 80086d4:	2300      	movs	r3, #0
 80086d6:	75fb      	strb	r3, [r7, #23]
            break;
 80086d8:	e006      	b.n	80086e8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80086da:	6938      	ldr	r0, [r7, #16]
 80086dc:	f003 fb7c 	bl	800bdd8 <UTIL_TIMER_GetElapsedTime>
 80086e0:	4602      	mov	r2, r0
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d8ea      	bhi.n	80086be <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80086e8:	f000 fda5 	bl	8009236 <RadioStandby>

    return status;
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008700:	2300      	movs	r3, #0
 8008702:	2200      	movs	r2, #0
 8008704:	2100      	movs	r1, #0
 8008706:	2000      	movs	r0, #0
 8008708:	f002 f9c2 	bl	800aa90 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800870c:	f001 ff73 	bl	800a5f6 <SUBGRF_GetRandom>
 8008710:	6078      	str	r0, [r7, #4]

    return rnd;
 8008712:	687b      	ldr	r3, [r7, #4]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	@ 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	461a      	mov	r2, r3
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
 800872c:	4613      	mov	r3, r2
 800872e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008730:	4ab9      	ldr	r2, [pc, #740]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008732:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008736:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008738:	f003 f841 	bl	800b7be <RFW_DeInit>
    if( rxContinuous == true )
 800873c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008748:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008750:	4ab2      	ldr	r2, [pc, #712]	@ (8008a1c <RadioSetRxConfig+0x300>)
 8008752:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008756:	7013      	strb	r3, [r2, #0]
 8008758:	e002      	b.n	8008760 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800875a:	4bb0      	ldr	r3, [pc, #704]	@ (8008a1c <RadioSetRxConfig+0x300>)
 800875c:	22ff      	movs	r2, #255	@ 0xff
 800875e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	2b05      	cmp	r3, #5
 8008764:	d009      	beq.n	800877a <RadioSetRxConfig+0x5e>
 8008766:	2b05      	cmp	r3, #5
 8008768:	f300 81d7 	bgt.w	8008b1a <RadioSetRxConfig+0x3fe>
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 80bf 	beq.w	80088f0 <RadioSetRxConfig+0x1d4>
 8008772:	2b01      	cmp	r3, #1
 8008774:	f000 8124 	beq.w	80089c0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008778:	e1cf      	b.n	8008b1a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800877a:	2001      	movs	r0, #1
 800877c:	f002 f880 	bl	800a880 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008780:	4ba5      	ldr	r3, [pc, #660]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008788:	4aa3      	ldr	r2, [pc, #652]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800878e:	4ba2      	ldr	r3, [pc, #648]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008790:	2209      	movs	r2, #9
 8008792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8008796:	4ba0      	ldr	r3, [pc, #640]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008798:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800879c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800879e:	68b8      	ldr	r0, [r7, #8]
 80087a0:	f002 ff40 	bl	800b624 <SUBGRF_GetFskBandwidthRegValue>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	4b9b      	ldr	r3, [pc, #620]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80087ae:	4b9a      	ldr	r3, [pc, #616]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80087b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	4b97      	ldr	r3, [pc, #604]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087bc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80087be:	4b96      	ldr	r3, [pc, #600]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80087c4:	4b94      	ldr	r3, [pc, #592]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087c6:	2210      	movs	r2, #16
 80087c8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80087ca:	4b93      	ldr	r3, [pc, #588]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80087d0:	4b91      	ldr	r3, [pc, #580]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80087d6:	4b91      	ldr	r3, [pc, #580]	@ (8008a1c <RadioSetRxConfig+0x300>)
 80087d8:	781a      	ldrb	r2, [r3, #0]
 80087da:	4b8f      	ldr	r3, [pc, #572]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087dc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80087de:	4b8e      	ldr	r3, [pc, #568]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80087e4:	4b8c      	ldr	r3, [pc, #560]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80087ea:	2005      	movs	r0, #5
 80087ec:	f7ff fec2 	bl	8008574 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087f0:	488b      	ldr	r0, [pc, #556]	@ (8008a20 <RadioSetRxConfig+0x304>)
 80087f2:	f002 fae3 	bl	800adbc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087f6:	488b      	ldr	r0, [pc, #556]	@ (8008a24 <RadioSetRxConfig+0x308>)
 80087f8:	f002 fbb2 	bl	800af60 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80087fc:	4a8a      	ldr	r2, [pc, #552]	@ (8008a28 <RadioSetRxConfig+0x30c>)
 80087fe:	f107 031c 	add.w	r3, r7, #28
 8008802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008806:	e883 0003 	stmia.w	r3, {r0, r1}
 800880a:	f107 031c 	add.w	r3, r7, #28
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fe6f 	bl	800a4f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008814:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008818:	f001 feba 	bl	800a590 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800881c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008820:	f000 fe1c 	bl	800945c <RadioRead>
 8008824:	4603      	mov	r3, r0
 8008826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800882a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800882e:	f023 0310 	bic.w	r3, r3, #16
 8008832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8008836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800883a:	4619      	mov	r1, r3
 800883c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008840:	f000 fdfa 	bl	8009438 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008844:	2104      	movs	r1, #4
 8008846:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800884a:	f000 fdf5 	bl	8009438 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800884e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008852:	f000 fe03 	bl	800945c <RadioRead>
 8008856:	4603      	mov	r3, r0
 8008858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800885c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008860:	f023 031c 	bic.w	r3, r3, #28
 8008864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	b2db      	uxtb	r3, r3
 8008872:	4619      	mov	r1, r3
 8008874:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008878:	f000 fdde 	bl	8009438 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800887c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008880:	f000 fdec 	bl	800945c <RadioRead>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800888a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800888e:	f023 0318 	bic.w	r3, r3, #24
 8008892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8008896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800889a:	f043 0318 	orr.w	r3, r3, #24
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	4619      	mov	r1, r3
 80088a2:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80088a6:	f000 fdc7 	bl	8009438 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80088aa:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80088ae:	f000 fdd5 	bl	800945c <RadioRead>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80088b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80088c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088c8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	4619      	mov	r1, r3
 80088d0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80088d4:	f000 fdb0 	bl	8009438 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80088d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80088da:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	461a      	mov	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ea:	4a4b      	ldr	r2, [pc, #300]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80088ec:	6093      	str	r3, [r2, #8]
            break;
 80088ee:	e115      	b.n	8008b1c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80088f0:	2000      	movs	r0, #0
 80088f2:	f001 ffc5 	bl	800a880 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80088f6:	4b48      	ldr	r3, [pc, #288]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80088fe:	4a46      	ldr	r2, [pc, #280]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008904:	4b44      	ldr	r3, [pc, #272]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008906:	220b      	movs	r2, #11
 8008908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800890c:	68b8      	ldr	r0, [r7, #8]
 800890e:	f002 fe89 	bl	800b624 <SUBGRF_GetFskBandwidthRegValue>
 8008912:	4603      	mov	r3, r0
 8008914:	461a      	mov	r2, r3
 8008916:	4b40      	ldr	r3, [pc, #256]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800891c:	4b3e      	ldr	r3, [pc, #248]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 800891e:	2200      	movs	r2, #0
 8008920:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008922:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	b29a      	uxth	r2, r3
 8008928:	4b3b      	ldr	r3, [pc, #236]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 800892a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800892c:	4b3a      	ldr	r3, [pc, #232]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 800892e:	2204      	movs	r2, #4
 8008930:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008932:	4b39      	ldr	r3, [pc, #228]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008934:	2218      	movs	r2, #24
 8008936:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008938:	4b37      	ldr	r3, [pc, #220]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 800893a:	2200      	movs	r2, #0
 800893c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800893e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008942:	f083 0301 	eor.w	r3, r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	4b33      	ldr	r3, [pc, #204]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 800894c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800894e:	4b33      	ldr	r3, [pc, #204]	@ (8008a1c <RadioSetRxConfig+0x300>)
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	4b31      	ldr	r3, [pc, #196]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008954:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008956:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800895e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008960:	22f2      	movs	r2, #242	@ 0xf2
 8008962:	75da      	strb	r2, [r3, #23]
 8008964:	e002      	b.n	800896c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008966:	4b2c      	ldr	r3, [pc, #176]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008968:	2201      	movs	r2, #1
 800896a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800896c:	4b2a      	ldr	r3, [pc, #168]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 800896e:	2201      	movs	r2, #1
 8008970:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008972:	f000 fc60 	bl	8009236 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8008976:	2000      	movs	r0, #0
 8008978:	f7ff fdfc 	bl	8008574 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800897c:	4828      	ldr	r0, [pc, #160]	@ (8008a20 <RadioSetRxConfig+0x304>)
 800897e:	f002 fa1d 	bl	800adbc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008982:	4828      	ldr	r0, [pc, #160]	@ (8008a24 <RadioSetRxConfig+0x308>)
 8008984:	f002 faec 	bl	800af60 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008988:	4a28      	ldr	r2, [pc, #160]	@ (8008a2c <RadioSetRxConfig+0x310>)
 800898a:	f107 0314 	add.w	r3, r7, #20
 800898e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008992:	e883 0003 	stmia.w	r3, {r0, r1}
 8008996:	f107 0314 	add.w	r3, r7, #20
 800899a:	4618      	mov	r0, r3
 800899c:	f001 fda9 	bl	800a4f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80089a0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80089a4:	f001 fdf4 	bl	800a590 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80089a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80089aa:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ba:	4a17      	ldr	r2, [pc, #92]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80089bc:	6093      	str	r3, [r2, #8]
            break;
 80089be:	e0ad      	b.n	8008b1c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80089c0:	2000      	movs	r0, #0
 80089c2:	f001 ff5d 	bl	800a880 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80089c6:	4b14      	ldr	r3, [pc, #80]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	4b11      	ldr	r3, [pc, #68]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80089d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80089d8:	4a15      	ldr	r2, [pc, #84]	@ (8008a30 <RadioSetRxConfig+0x314>)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4413      	add	r3, r2
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80089e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80089e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <RadioSetRxConfig+0x2e4>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b0b      	cmp	r3, #11
 80089f8:	d008      	beq.n	8008a0c <RadioSetRxConfig+0x2f0>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b0c      	cmp	r3, #12
 80089fe:	d005      	beq.n	8008a0c <RadioSetRxConfig+0x2f0>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d116      	bne.n	8008a34 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b0c      	cmp	r3, #12
 8008a0a:	d113      	bne.n	8008a34 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008a0c:	4b02      	ldr	r3, [pc, #8]	@ (8008a18 <RadioSetRxConfig+0x2fc>)
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008a14:	e012      	b.n	8008a3c <RadioSetRxConfig+0x320>
 8008a16:	bf00      	nop
 8008a18:	20000a90 	.word	0x20000a90
 8008a1c:	20000015 	.word	0x20000015
 8008a20:	20000ac8 	.word	0x20000ac8
 8008a24:	20000a9e 	.word	0x20000a9e
 8008a28:	0800d0b4 	.word	0x0800d0b4
 8008a2c:	0800d0bc 	.word	0x0800d0bc
 8008a30:	0800d258 	.word	0x0800d258
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008a34:	4b3b      	ldr	r3, [pc, #236]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008a3c:	4b39      	ldr	r3, [pc, #228]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008a42:	4b38      	ldr	r3, [pc, #224]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a44:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a48:	2b05      	cmp	r3, #5
 8008a4a:	d004      	beq.n	8008a56 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008a4c:	4b35      	ldr	r3, [pc, #212]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d10a      	bne.n	8008a6c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008a56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a58:	2b0b      	cmp	r3, #11
 8008a5a:	d803      	bhi.n	8008a64 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008a5c:	4b31      	ldr	r3, [pc, #196]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a5e:	220c      	movs	r2, #12
 8008a60:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008a62:	e006      	b.n	8008a72 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008a64:	4a2f      	ldr	r2, [pc, #188]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a66:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a68:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008a6a:	e002      	b.n	8008a72 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a6e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a70:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008a72:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008a76:	4b2b      	ldr	r3, [pc, #172]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a78:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b28 <RadioSetRxConfig+0x40c>)
 8008a7c:	781a      	ldrb	r2, [r3, #0]
 8008a7e:	4b29      	ldr	r3, [pc, #164]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a80:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008a82:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8008a86:	4b27      	ldr	r3, [pc, #156]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a88:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008a8c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008a90:	4b24      	ldr	r3, [pc, #144]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008a92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008a96:	f000 fbce 	bl	8009236 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	f7ff fd6a 	bl	8008574 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008aa0:	4822      	ldr	r0, [pc, #136]	@ (8008b2c <RadioSetRxConfig+0x410>)
 8008aa2:	f002 f98b 	bl	800adbc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008aa6:	4822      	ldr	r0, [pc, #136]	@ (8008b30 <RadioSetRxConfig+0x414>)
 8008aa8:	f002 fa5a 	bl	800af60 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008aac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 fef4 	bl	800a89e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8008ab6:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008aba:	f002 fbad 	bl	800b218 <SUBGRF_ReadRegister>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008acc:	f002 fb90 	bl	800b1f0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008ad0:	4b14      	ldr	r3, [pc, #80]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d10d      	bne.n	8008af6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008ada:	f240 7036 	movw	r0, #1846	@ 0x736
 8008ade:	f002 fb9b 	bl	800b218 <SUBGRF_ReadRegister>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f023 0304 	bic.w	r3, r3, #4
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	4619      	mov	r1, r3
 8008aec:	f240 7036 	movw	r0, #1846	@ 0x736
 8008af0:	f002 fb7e 	bl	800b1f0 <SUBGRF_WriteRegister>
 8008af4:	e00c      	b.n	8008b10 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008af6:	f240 7036 	movw	r0, #1846	@ 0x736
 8008afa:	f002 fb8d 	bl	800b218 <SUBGRF_ReadRegister>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f043 0304 	orr.w	r3, r3, #4
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	4619      	mov	r1, r3
 8008b08:	f240 7036 	movw	r0, #1846	@ 0x736
 8008b0c:	f002 fb70 	bl	800b1f0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008b10:	4b04      	ldr	r3, [pc, #16]	@ (8008b24 <RadioSetRxConfig+0x408>)
 8008b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b16:	609a      	str	r2, [r3, #8]
            break;
 8008b18:	e000      	b.n	8008b1c <RadioSetRxConfig+0x400>
            break;
 8008b1a:	bf00      	nop
    }
}
 8008b1c:	bf00      	nop
 8008b1e:	3728      	adds	r7, #40	@ 0x28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000a90 	.word	0x20000a90
 8008b28:	20000015 	.word	0x20000015
 8008b2c:	20000ac8 	.word	0x20000ac8
 8008b30:	20000a9e 	.word	0x20000a9e

08008b34 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60ba      	str	r2, [r7, #8]
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	460b      	mov	r3, r1
 8008b44:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008b46:	f002 fe3a 	bl	800b7be <RFW_DeInit>
    switch( modem )
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	f000 80c7 	beq.w	8008ce0 <RadioSetTxConfig+0x1ac>
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	f300 80d6 	bgt.w	8008d04 <RadioSetTxConfig+0x1d0>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <RadioSetTxConfig+0x2e>
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d059      	beq.n	8008c14 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008b60:	e0d0      	b.n	8008d04 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008b62:	4b77      	ldr	r3, [pc, #476]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008b6a:	4a75      	ldr	r2, [pc, #468]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008b70:	4b73      	ldr	r3, [pc, #460]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008b72:	220b      	movs	r2, #11
 8008b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f002 fd53 	bl	800b624 <SUBGRF_GetFskBandwidthRegValue>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	461a      	mov	r2, r3
 8008b82:	4b6f      	ldr	r3, [pc, #444]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8008b88:	4a6d      	ldr	r2, [pc, #436]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008b94:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	4b69      	ldr	r3, [pc, #420]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008b9c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008b9e:	4b68      	ldr	r3, [pc, #416]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008ba4:	4b66      	ldr	r3, [pc, #408]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008ba6:	2218      	movs	r2, #24
 8008ba8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008baa:	4b65      	ldr	r3, [pc, #404]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008bb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008bb4:	f083 0301 	eor.w	r3, r3, #1
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4b60      	ldr	r3, [pc, #384]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008bbe:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008bc0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008bca:	22f2      	movs	r2, #242	@ 0xf2
 8008bcc:	75da      	strb	r2, [r3, #23]
 8008bce:	e002      	b.n	8008bd6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008bd8:	2201      	movs	r2, #1
 8008bda:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008bdc:	f000 fb2b 	bl	8009236 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008be0:	2000      	movs	r0, #0
 8008be2:	f7ff fcc7 	bl	8008574 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008be6:	4857      	ldr	r0, [pc, #348]	@ (8008d44 <RadioSetTxConfig+0x210>)
 8008be8:	f002 f8e8 	bl	800adbc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008bec:	4856      	ldr	r0, [pc, #344]	@ (8008d48 <RadioSetTxConfig+0x214>)
 8008bee:	f002 f9b7 	bl	800af60 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008bf2:	4a56      	ldr	r2, [pc, #344]	@ (8008d4c <RadioSetTxConfig+0x218>)
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8008c00:	f107 0310 	add.w	r3, r7, #16
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 fc74 	bl	800a4f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008c0a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008c0e:	f001 fcbf 	bl	800a590 <SUBGRF_SetWhiteningSeed>
            break;
 8008c12:	e078      	b.n	8008d06 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008c14:	4b4a      	ldr	r3, [pc, #296]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	4b47      	ldr	r3, [pc, #284]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008c26:	4a4a      	ldr	r2, [pc, #296]	@ (8008d50 <RadioSetTxConfig+0x21c>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	781a      	ldrb	r2, [r3, #0]
 8008c2e:	4b44      	ldr	r3, [pc, #272]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008c34:	4a42      	ldr	r2, [pc, #264]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c3a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <RadioSetTxConfig+0x11c>
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	2b0b      	cmp	r3, #11
 8008c48:	d008      	beq.n	8008c5c <RadioSetTxConfig+0x128>
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	2b0c      	cmp	r3, #12
 8008c4e:	d005      	beq.n	8008c5c <RadioSetTxConfig+0x128>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d107      	bne.n	8008c66 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	2b0c      	cmp	r3, #12
 8008c5a:	d104      	bne.n	8008c66 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008c5c:	4b38      	ldr	r3, [pc, #224]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008c64:	e003      	b.n	8008c6e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008c66:	4b36      	ldr	r3, [pc, #216]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008c6e:	4b34      	ldr	r3, [pc, #208]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c70:	2201      	movs	r2, #1
 8008c72:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008c74:	4b32      	ldr	r3, [pc, #200]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c7a:	2b05      	cmp	r3, #5
 8008c7c:	d004      	beq.n	8008c88 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008c7e:	4b30      	ldr	r3, [pc, #192]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008c84:	2b06      	cmp	r3, #6
 8008c86:	d10a      	bne.n	8008c9e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8008c88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c8a:	2b0b      	cmp	r3, #11
 8008c8c:	d803      	bhi.n	8008c96 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c90:	220c      	movs	r2, #12
 8008c92:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008c94:	e006      	b.n	8008ca4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008c96:	4a2a      	ldr	r2, [pc, #168]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008c98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c9a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008c9c:	e002      	b.n	8008ca4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008c9e:	4a28      	ldr	r2, [pc, #160]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008ca0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008ca2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008ca4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008ca8:	4b25      	ldr	r3, [pc, #148]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008caa:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008cac:	4b29      	ldr	r3, [pc, #164]	@ (8008d54 <RadioSetTxConfig+0x220>)
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	4b23      	ldr	r3, [pc, #140]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008cb2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008cb4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008cb8:	4b21      	ldr	r3, [pc, #132]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008cba:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008cbe:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008cc8:	f000 fab5 	bl	8009236 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008ccc:	2001      	movs	r0, #1
 8008cce:	f7ff fc51 	bl	8008574 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008cd2:	481c      	ldr	r0, [pc, #112]	@ (8008d44 <RadioSetTxConfig+0x210>)
 8008cd4:	f002 f872 	bl	800adbc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cd8:	481b      	ldr	r0, [pc, #108]	@ (8008d48 <RadioSetTxConfig+0x214>)
 8008cda:	f002 f941 	bl	800af60 <SUBGRF_SetPacketParams>
            break;
 8008cde:	e012      	b.n	8008d06 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008ce0:	2004      	movs	r0, #4
 8008ce2:	f7ff fc47 	bl	8008574 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008ce6:	4b16      	ldr	r3, [pc, #88]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008ce8:	2202      	movs	r2, #2
 8008cea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008cee:	4a14      	ldr	r2, [pc, #80]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008cf4:	4b12      	ldr	r3, [pc, #72]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008cf6:	2216      	movs	r2, #22
 8008cf8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008cfc:	4811      	ldr	r0, [pc, #68]	@ (8008d44 <RadioSetTxConfig+0x210>)
 8008cfe:	f002 f85d 	bl	800adbc <SUBGRF_SetModulationParams>
            break;
 8008d02:	e000      	b.n	8008d06 <RadioSetTxConfig+0x1d2>
            break;
 8008d04:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008d06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f002 fb8c 	bl	800b428 <SUBGRF_SetRfTxPower>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008d16:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008d1a:	210e      	movs	r1, #14
 8008d1c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008d20:	f002 fa66 	bl	800b1f0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008d24:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008d26:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 fd5b 	bl	800b7e6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008d30:	4a03      	ldr	r2, [pc, #12]	@ (8008d40 <RadioSetTxConfig+0x20c>)
 8008d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d34:	6053      	str	r3, [r2, #4]
}
 8008d36:	bf00      	nop
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000a90 	.word	0x20000a90
 8008d44:	20000ac8 	.word	0x20000ac8
 8008d48:	20000a9e 	.word	0x20000a9e
 8008d4c:	0800d0bc 	.word	0x0800d0bc
 8008d50:	0800d258 	.word	0x0800d258
 8008d54:	20000015 	.word	0x20000015

08008d58 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
    return true;
 8008d60:	2301      	movs	r3, #1
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc80      	pop	{r7}
 8008d6a:	4770      	bx	lr

08008d6c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b0a      	cmp	r3, #10
 8008d7e:	d83e      	bhi.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
 8008d80:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <RadioGetLoRaBandwidthInHz+0x1c>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008db5 	.word	0x08008db5
 8008d8c:	08008dc5 	.word	0x08008dc5
 8008d90:	08008dd5 	.word	0x08008dd5
 8008d94:	08008de5 	.word	0x08008de5
 8008d98:	08008ded 	.word	0x08008ded
 8008d9c:	08008df3 	.word	0x08008df3
 8008da0:	08008df9 	.word	0x08008df9
 8008da4:	08008dff 	.word	0x08008dff
 8008da8:	08008dbd 	.word	0x08008dbd
 8008dac:	08008dcd 	.word	0x08008dcd
 8008db0:	08008ddd 	.word	0x08008ddd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008db4:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8008db8:	60fb      	str	r3, [r7, #12]
        break;
 8008dba:	e020      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008dbc:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8008dc0:	60fb      	str	r3, [r7, #12]
        break;
 8008dc2:	e01c      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008dc4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8008dc8:	60fb      	str	r3, [r7, #12]
        break;
 8008dca:	e018      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008dcc:	f245 1361 	movw	r3, #20833	@ 0x5161
 8008dd0:	60fb      	str	r3, [r7, #12]
        break;
 8008dd2:	e014      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008dd4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8008dd8:	60fb      	str	r3, [r7, #12]
        break;
 8008dda:	e010      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008ddc:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8008de0:	60fb      	str	r3, [r7, #12]
        break;
 8008de2:	e00c      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008de4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008de8:	60fb      	str	r3, [r7, #12]
        break;
 8008dea:	e008      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <RadioGetLoRaBandwidthInHz+0xa0>)
 8008dee:	60fb      	str	r3, [r7, #12]
        break;
 8008df0:	e005      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008df2:	4b07      	ldr	r3, [pc, #28]	@ (8008e10 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008df4:	60fb      	str	r3, [r7, #12]
        break;
 8008df6:	e002      	b.n	8008dfe <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008df8:	4b06      	ldr	r3, [pc, #24]	@ (8008e14 <RadioGetLoRaBandwidthInHz+0xa8>)
 8008dfa:	60fb      	str	r3, [r7, #12]
        break;
 8008dfc:	bf00      	nop
    }

    return bandwidthInHz;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	0001e848 	.word	0x0001e848
 8008e10:	0003d090 	.word	0x0003d090
 8008e14:	0007a120 	.word	0x0007a120

08008e18 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	461a      	mov	r2, r3
 8008e26:	4603      	mov	r3, r0
 8008e28:	70fb      	strb	r3, [r7, #3]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	803b      	strh	r3, [r7, #0]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008e32:	883b      	ldrh	r3, [r7, #0]
 8008e34:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e36:	78ba      	ldrb	r2, [r7, #2]
 8008e38:	f082 0201 	eor.w	r2, r2, #1
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	d001      	beq.n	8008e46 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008e42:	2208      	movs	r2, #8
 8008e44:	e000      	b.n	8008e48 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008e46:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008e48:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e4a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008e4e:	7c3b      	ldrb	r3, [r7, #16]
 8008e50:	7d39      	ldrb	r1, [r7, #20]
 8008e52:	2900      	cmp	r1, #0
 8008e54:	d001      	beq.n	8008e5a <RadioGetGfskTimeOnAirNumerator+0x42>
 8008e56:	2102      	movs	r1, #2
 8008e58:	e000      	b.n	8008e5c <RadioGetGfskTimeOnAirNumerator+0x44>
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	440b      	add	r3, r1
 8008e5e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e60:	4413      	add	r3, r2
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr

08008e6c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b08b      	sub	sp, #44	@ 0x2c
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	4611      	mov	r1, r2
 8008e78:	461a      	mov	r2, r3
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	71fb      	strb	r3, [r7, #7]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	3304      	adds	r3, #4
 8008e86:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b05      	cmp	r3, #5
 8008e92:	d002      	beq.n	8008e9a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b06      	cmp	r3, #6
 8008e98:	d104      	bne.n	8008ea4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8008e9a:	88bb      	ldrh	r3, [r7, #4]
 8008e9c:	2b0b      	cmp	r3, #11
 8008e9e:	d801      	bhi.n	8008ea4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b0b      	cmp	r3, #11
 8008eae:	d008      	beq.n	8008ec2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b0c      	cmp	r3, #12
 8008eb4:	d005      	beq.n	8008ec2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d105      	bne.n	8008ec8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b0c      	cmp	r3, #12
 8008ec0:	d102      	bne.n	8008ec8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008ec8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008ecc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008ece:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008ed2:	2a00      	cmp	r2, #0
 8008ed4:	d001      	beq.n	8008eda <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	e000      	b.n	8008edc <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008eda:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008edc:	4413      	add	r3, r2
 8008ede:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008ee4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008ee6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	d001      	beq.n	8008ef2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	e000      	b.n	8008ef4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008ef2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008ef4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008ef6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b06      	cmp	r3, #6
 8008efc:	d803      	bhi.n	8008f06 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	623b      	str	r3, [r7, #32]
 8008f04:	e00e      	b.n	8008f24 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	3308      	adds	r3, #8
 8008f0a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d004      	beq.n	8008f1e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3b02      	subs	r3, #2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	623b      	str	r3, [r7, #32]
 8008f1c:	e002      	b.n	8008f24 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da01      	bge.n	8008f2e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	4413      	add	r3, r2
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	fb92 f3f3 	sdiv	r3, r2, r3
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	fb03 f202 	mul.w	r2, r3, r2
 8008f42:	88bb      	ldrh	r3, [r7, #4]
 8008f44:	4413      	add	r3, r2
    int32_t intermediate =
 8008f46:	330c      	adds	r3, #12
 8008f48:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b06      	cmp	r3, #6
 8008f4e:	d802      	bhi.n	8008f56 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	3302      	adds	r3, #2
 8008f54:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	3b02      	subs	r3, #2
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	372c      	adds	r7, #44	@ 0x2c
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr
	...

08008f70 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	@ 0x28
 8008f74:	af04      	add	r7, sp, #16
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
 8008f80:	4613      	mov	r3, r2
 8008f82:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <RadioTimeOnAir+0x28>
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d017      	beq.n	8008fc6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008f96:	e035      	b.n	8009004 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008f98:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8008f9c:	8c3a      	ldrh	r2, [r7, #32]
 8008f9e:	7bb9      	ldrb	r1, [r7, #14]
 8008fa0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	4603      	mov	r3, r0
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff ff32 	bl	8008e18 <RadioGetGfskTimeOnAirNumerator>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
 8008fbe:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	613b      	str	r3, [r7, #16]
        break;
 8008fc4:	e01e      	b.n	8009004 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008fc6:	8c39      	ldrh	r1, [r7, #32]
 8008fc8:	7bba      	ldrb	r2, [r7, #14]
 8008fca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fce:	9302      	str	r3, [sp, #8]
 8008fd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	68b8      	ldr	r0, [r7, #8]
 8008fe2:	f7ff ff43 	bl	8008e6c <RadioGetLoRaTimeOnAirNumerator>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fec:	fb02 f303 	mul.w	r3, r2, r3
 8008ff0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800901c <RadioTimeOnAir+0xac>)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff feb6 	bl	8008d6c <RadioGetLoRaBandwidthInHz>
 8009000:	6138      	str	r0, [r7, #16]
        break;
 8009002:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	4413      	add	r3, r2
 800900a:	1e5a      	subs	r2, r3, #1
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	0800d258 	.word	0x0800d258

08009020 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800902c:	2300      	movs	r3, #0
 800902e:	2200      	movs	r2, #0
 8009030:	f240 2101 	movw	r1, #513	@ 0x201
 8009034:	f240 2001 	movw	r0, #513	@ 0x201
 8009038:	f001 fd2a 	bl	800aa90 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800903c:	4b70      	ldr	r3, [pc, #448]	@ (8009200 <RadioSend+0x1e0>)
 800903e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009042:	2101      	movs	r1, #1
 8009044:	4618      	mov	r0, r3
 8009046:	f002 f9c7 	bl	800b3d8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800904a:	4b6d      	ldr	r3, [pc, #436]	@ (8009200 <RadioSend+0x1e0>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d112      	bne.n	8009078 <RadioSend+0x58>
 8009052:	4b6b      	ldr	r3, [pc, #428]	@ (8009200 <RadioSend+0x1e0>)
 8009054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009058:	2b06      	cmp	r3, #6
 800905a:	d10d      	bne.n	8009078 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800905c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009060:	f002 f8da 	bl	800b218 <SUBGRF_ReadRegister>
 8009064:	4603      	mov	r3, r0
 8009066:	f023 0304 	bic.w	r3, r3, #4
 800906a:	b2db      	uxtb	r3, r3
 800906c:	4619      	mov	r1, r3
 800906e:	f640 0089 	movw	r0, #2185	@ 0x889
 8009072:	f002 f8bd 	bl	800b1f0 <SUBGRF_WriteRegister>
 8009076:	e00c      	b.n	8009092 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009078:	f640 0089 	movw	r0, #2185	@ 0x889
 800907c:	f002 f8cc 	bl	800b218 <SUBGRF_ReadRegister>
 8009080:	4603      	mov	r3, r0
 8009082:	f043 0304 	orr.w	r3, r3, #4
 8009086:	b2db      	uxtb	r3, r3
 8009088:	4619      	mov	r1, r3
 800908a:	f640 0089 	movw	r0, #2185	@ 0x889
 800908e:	f002 f8af 	bl	800b1f0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8009092:	4b5b      	ldr	r3, [pc, #364]	@ (8009200 <RadioSend+0x1e0>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b04      	cmp	r3, #4
 8009098:	f200 80a2 	bhi.w	80091e0 <RadioSend+0x1c0>
 800909c:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <RadioSend+0x84>)
 800909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a2:	bf00      	nop
 80090a4:	080090d3 	.word	0x080090d3
 80090a8:	080090b9 	.word	0x080090b9
 80090ac:	080090d3 	.word	0x080090d3
 80090b0:	08009129 	.word	0x08009129
 80090b4:	08009149 	.word	0x08009149
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80090b8:	4a51      	ldr	r2, [pc, #324]	@ (8009200 <RadioSend+0x1e0>)
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090be:	4851      	ldr	r0, [pc, #324]	@ (8009204 <RadioSend+0x1e4>)
 80090c0:	f001 ff4e 	bl	800af60 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	2200      	movs	r2, #0
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f001 f9fe 	bl	800a4cc <SUBGRF_SendPayload>
            break;
 80090d0:	e087      	b.n	80091e2 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80090d2:	f002 fb7a 	bl	800b7ca <RFW_Is_Init>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d118      	bne.n	800910e <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80090dc:	f107 020d 	add.w	r2, r7, #13
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f002 fb88 	bl	800b7fa <RFW_TransmitInit>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10c      	bne.n	800910a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80090f0:	7b7a      	ldrb	r2, [r7, #13]
 80090f2:	4b43      	ldr	r3, [pc, #268]	@ (8009200 <RadioSend+0x1e0>)
 80090f4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090f6:	4843      	ldr	r0, [pc, #268]	@ (8009204 <RadioSend+0x1e4>)
 80090f8:	f001 ff32 	bl	800af60 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80090fc:	7b7b      	ldrb	r3, [r7, #13]
 80090fe:	2200      	movs	r2, #0
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 f9e2 	bl	800a4cc <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009108:	e06b      	b.n	80091e2 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800910a:	2303      	movs	r3, #3
 800910c:	e073      	b.n	80091f6 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800910e:	4a3c      	ldr	r2, [pc, #240]	@ (8009200 <RadioSend+0x1e0>)
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009114:	483b      	ldr	r0, [pc, #236]	@ (8009204 <RadioSend+0x1e4>)
 8009116:	f001 ff23 	bl	800af60 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	2200      	movs	r2, #0
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 f9d3 	bl	800a4cc <SUBGRF_SendPayload>
            break;
 8009126:	e05c      	b.n	80091e2 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009128:	4b35      	ldr	r3, [pc, #212]	@ (8009200 <RadioSend+0x1e0>)
 800912a:	2202      	movs	r2, #2
 800912c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800912e:	4a34      	ldr	r2, [pc, #208]	@ (8009200 <RadioSend+0x1e0>)
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009134:	4833      	ldr	r0, [pc, #204]	@ (8009204 <RadioSend+0x1e4>)
 8009136:	f001 ff13 	bl	800af60 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	2200      	movs	r2, #0
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 f9c3 	bl	800a4cc <SUBGRF_SendPayload>
            break;
 8009146:	e04c      	b.n	80091e2 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	461a      	mov	r2, r3
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	482e      	ldr	r0, [pc, #184]	@ (8009208 <RadioSend+0x1e8>)
 8009150:	f000 fc96 	bl	8009a80 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009154:	4b2a      	ldr	r3, [pc, #168]	@ (8009200 <RadioSend+0x1e0>)
 8009156:	2202      	movs	r2, #2
 8009158:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	3301      	adds	r3, #1
 800915e:	b2da      	uxtb	r2, r3
 8009160:	4b27      	ldr	r3, [pc, #156]	@ (8009200 <RadioSend+0x1e0>)
 8009162:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009164:	4827      	ldr	r0, [pc, #156]	@ (8009204 <RadioSend+0x1e4>)
 8009166:	f001 fefb 	bl	800af60 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800916a:	2100      	movs	r1, #0
 800916c:	20f1      	movs	r0, #241	@ 0xf1
 800916e:	f000 f963 	bl	8009438 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8009172:	2100      	movs	r1, #0
 8009174:	20f0      	movs	r0, #240	@ 0xf0
 8009176:	f000 f95f 	bl	8009438 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800917a:	4b21      	ldr	r3, [pc, #132]	@ (8009200 <RadioSend+0x1e0>)
 800917c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800917e:	2b64      	cmp	r3, #100	@ 0x64
 8009180:	d108      	bne.n	8009194 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8009182:	2170      	movs	r1, #112	@ 0x70
 8009184:	20f3      	movs	r0, #243	@ 0xf3
 8009186:	f000 f957 	bl	8009438 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800918a:	211d      	movs	r1, #29
 800918c:	20f2      	movs	r0, #242	@ 0xf2
 800918e:	f000 f953 	bl	8009438 <RadioWrite>
 8009192:	e007      	b.n	80091a4 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009194:	21e1      	movs	r1, #225	@ 0xe1
 8009196:	20f3      	movs	r0, #243	@ 0xf3
 8009198:	f000 f94e 	bl	8009438 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800919c:	2104      	movs	r1, #4
 800919e:	20f2      	movs	r0, #242	@ 0xf2
 80091a0:	f000 f94a 	bl	8009438 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	00db      	lsls	r3, r3, #3
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	3302      	adds	r3, #2
 80091ae:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	4619      	mov	r1, r3
 80091ba:	20f4      	movs	r0, #244	@ 0xf4
 80091bc:	f000 f93c 	bl	8009438 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80091c0:	89fb      	ldrh	r3, [r7, #14]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	4619      	mov	r1, r3
 80091c6:	20f5      	movs	r0, #245	@ 0xf5
 80091c8:	f000 f936 	bl	8009438 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	3301      	adds	r3, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80091d6:	4619      	mov	r1, r3
 80091d8:	480b      	ldr	r0, [pc, #44]	@ (8009208 <RadioSend+0x1e8>)
 80091da:	f001 f977 	bl	800a4cc <SUBGRF_SendPayload>
            break;
 80091de:	e000      	b.n	80091e2 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80091e0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80091e2:	4b07      	ldr	r3, [pc, #28]	@ (8009200 <RadioSend+0x1e0>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	4619      	mov	r1, r3
 80091e8:	4808      	ldr	r0, [pc, #32]	@ (800920c <RadioSend+0x1ec>)
 80091ea:	f002 fdb9 	bl	800bd60 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80091ee:	4807      	ldr	r0, [pc, #28]	@ (800920c <RadioSend+0x1ec>)
 80091f0:	f002 fcd8 	bl	800bba4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000a90 	.word	0x20000a90
 8009204:	20000a9e 	.word	0x20000a9e
 8009208:	2000098c 	.word	0x2000098c
 800920c:	20000aec 	.word	0x20000aec

08009210 <RadioSleep>:

static void RadioSleep( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009216:	2300      	movs	r3, #0
 8009218:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800921a:	793b      	ldrb	r3, [r7, #4]
 800921c:	f043 0304 	orr.w	r3, r3, #4
 8009220:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8009222:	7938      	ldrb	r0, [r7, #4]
 8009224:	f001 fa2e 	bl	800a684 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009228:	2002      	movs	r0, #2
 800922a:	f7fa f83d 	bl	80032a8 <HAL_Delay>
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <RadioStandby>:

static void RadioStandby( void )
{
 8009236:	b580      	push	{r7, lr}
 8009238:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800923a:	2000      	movs	r0, #0
 800923c:	f001 fa54 	bl	800a6e8 <SUBGRF_SetStandby>
}
 8009240:	bf00      	nop
 8009242:	bd80      	pop	{r7, pc}

08009244 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800924c:	f002 fabd 	bl	800b7ca <RFW_Is_Init>
 8009250:	4603      	mov	r3, r0
 8009252:	2b01      	cmp	r3, #1
 8009254:	d102      	bne.n	800925c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8009256:	f002 fae0 	bl	800b81a <RFW_ReceiveInit>
 800925a:	e007      	b.n	800926c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800925c:	2300      	movs	r3, #0
 800925e:	2200      	movs	r2, #0
 8009260:	f240 2162 	movw	r1, #610	@ 0x262
 8009264:	f240 2062 	movw	r0, #610	@ 0x262
 8009268:	f001 fc12 	bl	800aa90 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d006      	beq.n	8009280 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	4811      	ldr	r0, [pc, #68]	@ (80092bc <RadioRx+0x78>)
 8009276:	f002 fd73 	bl	800bd60 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800927a:	4810      	ldr	r0, [pc, #64]	@ (80092bc <RadioRx+0x78>)
 800927c:	f002 fc92 	bl	800bba4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009280:	4b0f      	ldr	r3, [pc, #60]	@ (80092c0 <RadioRx+0x7c>)
 8009282:	2200      	movs	r2, #0
 8009284:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009286:	4b0e      	ldr	r3, [pc, #56]	@ (80092c0 <RadioRx+0x7c>)
 8009288:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f002 f8a2 	bl	800b3d8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009294:	4b0a      	ldr	r3, [pc, #40]	@ (80092c0 <RadioRx+0x7c>)
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800929c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80092a0:	f001 fa5e 	bl	800a760 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80092a4:	e005      	b.n	80092b2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80092a6:	4b06      	ldr	r3, [pc, #24]	@ (80092c0 <RadioRx+0x7c>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	019b      	lsls	r3, r3, #6
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 fa57 	bl	800a760 <SUBGRF_SetRx>
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000b04 	.word	0x20000b04
 80092c0:	20000a90 	.word	0x20000a90

080092c4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80092cc:	f002 fa7d 	bl	800b7ca <RFW_Is_Init>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d102      	bne.n	80092dc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80092d6:	f002 faa0 	bl	800b81a <RFW_ReceiveInit>
 80092da:	e007      	b.n	80092ec <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80092dc:	2300      	movs	r3, #0
 80092de:	2200      	movs	r2, #0
 80092e0:	f240 2162 	movw	r1, #610	@ 0x262
 80092e4:	f240 2062 	movw	r0, #610	@ 0x262
 80092e8:	f001 fbd2 	bl	800aa90 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d006      	beq.n	8009300 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4811      	ldr	r0, [pc, #68]	@ (800933c <RadioRxBoosted+0x78>)
 80092f6:	f002 fd33 	bl	800bd60 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80092fa:	4810      	ldr	r0, [pc, #64]	@ (800933c <RadioRxBoosted+0x78>)
 80092fc:	f002 fc52 	bl	800bba4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009300:	4b0f      	ldr	r3, [pc, #60]	@ (8009340 <RadioRxBoosted+0x7c>)
 8009302:	2200      	movs	r2, #0
 8009304:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009306:	4b0e      	ldr	r3, [pc, #56]	@ (8009340 <RadioRxBoosted+0x7c>)
 8009308:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800930c:	2100      	movs	r1, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f002 f862 	bl	800b3d8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009314:	4b0a      	ldr	r3, [pc, #40]	@ (8009340 <RadioRxBoosted+0x7c>)
 8009316:	785b      	ldrb	r3, [r3, #1]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d004      	beq.n	8009326 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800931c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009320:	f001 fa3e 	bl	800a7a0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009324:	e005      	b.n	8009332 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009326:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <RadioRxBoosted+0x7c>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	019b      	lsls	r3, r3, #6
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fa37 	bl	800a7a0 <SUBGRF_SetRxBoosted>
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000b04 	.word	0x20000b04
 8009340:	20000a90 	.word	0x20000a90

08009344 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	005a      	lsls	r2, r3, #1
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	4413      	add	r3, r2
 8009356:	4a0c      	ldr	r2, [pc, #48]	@ (8009388 <RadioSetRxDutyCycle+0x44>)
 8009358:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800935a:	2300      	movs	r3, #0
 800935c:	2200      	movs	r2, #0
 800935e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009362:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009366:	f001 fb93 	bl	800aa90 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800936a:	4b07      	ldr	r3, [pc, #28]	@ (8009388 <RadioSetRxDutyCycle+0x44>)
 800936c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009370:	2100      	movs	r1, #0
 8009372:	4618      	mov	r0, r3
 8009374:	f002 f830 	bl	800b3d8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fa34 	bl	800a7e8 <SUBGRF_SetRxDutyCycle>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	20000a90 	.word	0x20000a90

0800938c <RadioStartCad>:

static void RadioStartCad( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009390:	4b09      	ldr	r3, [pc, #36]	@ (80093b8 <RadioStartCad+0x2c>)
 8009392:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f002 f81d 	bl	800b3d8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800939e:	2300      	movs	r3, #0
 80093a0:	2200      	movs	r2, #0
 80093a2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80093a6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80093aa:	f001 fb71 	bl	800aa90 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80093ae:	f001 fa47 	bl	800a840 <SUBGRF_SetCad>
}
 80093b2:	bf00      	nop
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000a90 	.word	0x20000a90

080093bc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
 80093c8:	4613      	mov	r3, r2
 80093ca:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80093cc:	883b      	ldrh	r3, [r7, #0]
 80093ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
 80093d6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 fbb5 	bl	800ab48 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80093de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f002 f820 	bl	800b428 <SUBGRF_SetRfTxPower>
 80093e8:	4603      	mov	r3, r0
 80093ea:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80093ec:	210e      	movs	r1, #14
 80093ee:	f640 101f 	movw	r0, #2335	@ 0x91f
 80093f2:	f001 fefd 	bl	800b1f0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2101      	movs	r1, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 ffec 	bl	800b3d8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009400:	f001 fa2c 	bl	800a85c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009404:	68f9      	ldr	r1, [r7, #12]
 8009406:	4805      	ldr	r0, [pc, #20]	@ (800941c <RadioSetTxContinuousWave+0x60>)
 8009408:	f002 fcaa 	bl	800bd60 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800940c:	4803      	ldr	r0, [pc, #12]	@ (800941c <RadioSetTxContinuousWave+0x60>)
 800940e:	f002 fbc9 	bl	800bba4 <UTIL_TIMER_Start>
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000aec 	.word	0x20000aec

08009420 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800942a:	f001 fe4e 	bl	800b0ca <SUBGRF_GetRssiInst>
 800942e:	4603      	mov	r3, r0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	460a      	mov	r2, r1
 8009442:	80fb      	strh	r3, [r7, #6]
 8009444:	4613      	mov	r3, r2
 8009446:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8009448:	797a      	ldrb	r2, [r7, #5]
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f001 fece 	bl	800b1f0 <SUBGRF_WriteRegister>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8009466:	88fb      	ldrh	r3, [r7, #6]
 8009468:	4618      	mov	r0, r3
 800946a:	f001 fed5 	bl	800b218 <SUBGRF_ReadRegister>
 800946e:	4603      	mov	r3, r0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	6039      	str	r1, [r7, #0]
 8009482:	80fb      	strh	r3, [r7, #6]
 8009484:	4613      	mov	r3, r2
 8009486:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8009488:	797b      	ldrb	r3, [r7, #5]
 800948a:	b29a      	uxth	r2, r3
 800948c:	88fb      	ldrh	r3, [r7, #6]
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f001 fed5 	bl	800b240 <SUBGRF_WriteRegisters>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	4603      	mov	r3, r0
 80094a6:	6039      	str	r1, [r7, #0]
 80094a8:	80fb      	strh	r3, [r7, #6]
 80094aa:	4613      	mov	r3, r2
 80094ac:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80094ae:	797b      	ldrb	r3, [r7, #5]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 fee4 	bl	800b284 <SUBGRF_ReadRegisters>
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	460a      	mov	r2, r1
 80094ce:	71fb      	strb	r3, [r7, #7]
 80094d0:	4613      	mov	r3, r2
 80094d2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d10a      	bne.n	80094f0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80094da:	4a0e      	ldr	r2, [pc, #56]	@ (8009514 <RadioSetMaxPayloadLength+0x50>)
 80094dc:	79bb      	ldrb	r3, [r7, #6]
 80094de:	7013      	strb	r3, [r2, #0]
 80094e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009514 <RadioSetMaxPayloadLength+0x50>)
 80094e2:	781a      	ldrb	r2, [r3, #0]
 80094e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009518 <RadioSetMaxPayloadLength+0x54>)
 80094e6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80094e8:	480c      	ldr	r0, [pc, #48]	@ (800951c <RadioSetMaxPayloadLength+0x58>)
 80094ea:	f001 fd39 	bl	800af60 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80094ee:	e00d      	b.n	800950c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80094f0:	4b09      	ldr	r3, [pc, #36]	@ (8009518 <RadioSetMaxPayloadLength+0x54>)
 80094f2:	7d5b      	ldrb	r3, [r3, #21]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d109      	bne.n	800950c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80094f8:	4a06      	ldr	r2, [pc, #24]	@ (8009514 <RadioSetMaxPayloadLength+0x50>)
 80094fa:	79bb      	ldrb	r3, [r7, #6]
 80094fc:	7013      	strb	r3, [r2, #0]
 80094fe:	4b05      	ldr	r3, [pc, #20]	@ (8009514 <RadioSetMaxPayloadLength+0x50>)
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	4b05      	ldr	r3, [pc, #20]	@ (8009518 <RadioSetMaxPayloadLength+0x54>)
 8009504:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009506:	4805      	ldr	r0, [pc, #20]	@ (800951c <RadioSetMaxPayloadLength+0x58>)
 8009508:	f001 fd2a 	bl	800af60 <SUBGRF_SetPacketParams>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20000015 	.word	0x20000015
 8009518:	20000a90 	.word	0x20000a90
 800951c:	20000a9e 	.word	0x20000a9e

08009520 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800952a:	4a13      	ldr	r2, [pc, #76]	@ (8009578 <RadioSetPublicNetwork+0x58>)
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	7313      	strb	r3, [r2, #12]
 8009530:	4b11      	ldr	r3, [pc, #68]	@ (8009578 <RadioSetPublicNetwork+0x58>)
 8009532:	7b1a      	ldrb	r2, [r3, #12]
 8009534:	4b10      	ldr	r3, [pc, #64]	@ (8009578 <RadioSetPublicNetwork+0x58>)
 8009536:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009538:	2001      	movs	r0, #1
 800953a:	f7ff f81b 	bl	8008574 <RadioSetModem>
    if( enable == true )
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009544:	2134      	movs	r1, #52	@ 0x34
 8009546:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800954a:	f001 fe51 	bl	800b1f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800954e:	2144      	movs	r1, #68	@ 0x44
 8009550:	f240 7041 	movw	r0, #1857	@ 0x741
 8009554:	f001 fe4c 	bl	800b1f0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009558:	e009      	b.n	800956e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800955a:	2114      	movs	r1, #20
 800955c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009560:	f001 fe46 	bl	800b1f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009564:	2124      	movs	r1, #36	@ 0x24
 8009566:	f240 7041 	movw	r0, #1857	@ 0x741
 800956a:	f001 fe41 	bl	800b1f0 <SUBGRF_WriteRegister>
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000a90 	.word	0x20000a90

0800957c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009580:	f001 ff86 	bl	800b490 <SUBGRF_GetRadioWakeUpTime>
 8009584:	4603      	mov	r3, r0
 8009586:	3303      	adds	r3, #3
}
 8009588:	4618      	mov	r0, r3
 800958a:	bd80      	pop	{r7, pc}

0800958c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8009594:	f000 f80e 	bl	80095b4 <RadioOnTxTimeoutProcess>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80095a8:	f000 f818 	bl	80095dc <RadioOnRxTimeoutProcess>
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80095b8:	4b07      	ldr	r3, [pc, #28]	@ (80095d8 <RadioOnTxTimeoutProcess+0x24>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d008      	beq.n	80095d2 <RadioOnTxTimeoutProcess+0x1e>
 80095c0:	4b05      	ldr	r3, [pc, #20]	@ (80095d8 <RadioOnTxTimeoutProcess+0x24>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80095ca:	4b03      	ldr	r3, [pc, #12]	@ (80095d8 <RadioOnTxTimeoutProcess+0x24>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	4798      	blx	r3
    }
}
 80095d2:	bf00      	nop
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20000a8c 	.word	0x20000a8c

080095dc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80095e0:	4b07      	ldr	r3, [pc, #28]	@ (8009600 <RadioOnRxTimeoutProcess+0x24>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d008      	beq.n	80095fa <RadioOnRxTimeoutProcess+0x1e>
 80095e8:	4b05      	ldr	r3, [pc, #20]	@ (8009600 <RadioOnRxTimeoutProcess+0x24>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80095f2:	4b03      	ldr	r3, [pc, #12]	@ (8009600 <RadioOnRxTimeoutProcess+0x24>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	4798      	blx	r3
    }
}
 80095fa:	bf00      	nop
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000a8c 	.word	0x20000a8c

08009604 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800960e:	4a05      	ldr	r2, [pc, #20]	@ (8009624 <RadioOnDioIrq+0x20>)
 8009610:	88fb      	ldrh	r3, [r7, #6]
 8009612:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8009616:	f000 f807 	bl	8009628 <RadioIrqProcess>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000a90 	.word	0x20000a90

08009628 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009628:	b5b0      	push	{r4, r5, r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009636:	4ba5      	ldr	r3, [pc, #660]	@ (80098cc <RadioIrqProcess+0x2a4>)
 8009638:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800963c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009640:	f000 810d 	beq.w	800985e <RadioIrqProcess+0x236>
 8009644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009648:	f300 81c0 	bgt.w	80099cc <RadioIrqProcess+0x3a4>
 800964c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009650:	f000 80f1 	beq.w	8009836 <RadioIrqProcess+0x20e>
 8009654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009658:	f300 81b8 	bgt.w	80099cc <RadioIrqProcess+0x3a4>
 800965c:	2b80      	cmp	r3, #128	@ 0x80
 800965e:	f000 80d6 	beq.w	800980e <RadioIrqProcess+0x1e6>
 8009662:	2b80      	cmp	r3, #128	@ 0x80
 8009664:	f300 81b2 	bgt.w	80099cc <RadioIrqProcess+0x3a4>
 8009668:	2b20      	cmp	r3, #32
 800966a:	dc49      	bgt.n	8009700 <RadioIrqProcess+0xd8>
 800966c:	2b00      	cmp	r3, #0
 800966e:	f340 81ad 	ble.w	80099cc <RadioIrqProcess+0x3a4>
 8009672:	3b01      	subs	r3, #1
 8009674:	2b1f      	cmp	r3, #31
 8009676:	f200 81a9 	bhi.w	80099cc <RadioIrqProcess+0x3a4>
 800967a:	a201      	add	r2, pc, #4	@ (adr r2, 8009680 <RadioIrqProcess+0x58>)
 800967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009680:	08009709 	.word	0x08009709
 8009684:	08009743 	.word	0x08009743
 8009688:	080099cd 	.word	0x080099cd
 800968c:	080098e9 	.word	0x080098e9
 8009690:	080099cd 	.word	0x080099cd
 8009694:	080099cd 	.word	0x080099cd
 8009698:	080099cd 	.word	0x080099cd
 800969c:	08009957 	.word	0x08009957
 80096a0:	080099cd 	.word	0x080099cd
 80096a4:	080099cd 	.word	0x080099cd
 80096a8:	080099cd 	.word	0x080099cd
 80096ac:	080099cd 	.word	0x080099cd
 80096b0:	080099cd 	.word	0x080099cd
 80096b4:	080099cd 	.word	0x080099cd
 80096b8:	080099cd 	.word	0x080099cd
 80096bc:	080099cd 	.word	0x080099cd
 80096c0:	080099cd 	.word	0x080099cd
 80096c4:	080099cd 	.word	0x080099cd
 80096c8:	080099cd 	.word	0x080099cd
 80096cc:	080099cd 	.word	0x080099cd
 80096d0:	080099cd 	.word	0x080099cd
 80096d4:	080099cd 	.word	0x080099cd
 80096d8:	080099cd 	.word	0x080099cd
 80096dc:	080099cd 	.word	0x080099cd
 80096e0:	080099cd 	.word	0x080099cd
 80096e4:	080099cd 	.word	0x080099cd
 80096e8:	080099cd 	.word	0x080099cd
 80096ec:	080099cd 	.word	0x080099cd
 80096f0:	080099cd 	.word	0x080099cd
 80096f4:	080099cd 	.word	0x080099cd
 80096f8:	080099cd 	.word	0x080099cd
 80096fc:	08009967 	.word	0x08009967
 8009700:	2b40      	cmp	r3, #64	@ 0x40
 8009702:	f000 814b 	beq.w	800999c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009706:	e161      	b.n	80099cc <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009708:	4871      	ldr	r0, [pc, #452]	@ (80098d0 <RadioIrqProcess+0x2a8>)
 800970a:	f002 fab9 	bl	800bc80 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800970e:	2000      	movs	r0, #0
 8009710:	f000 ffea 	bl	800a6e8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009714:	f002 f860 	bl	800b7d8 <RFW_Is_LongPacketModeEnabled>
 8009718:	4603      	mov	r3, r0
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800971e:	f002 f884 	bl	800b82a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009722:	4b6c      	ldr	r3, [pc, #432]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 8152 	beq.w	80099d0 <RadioIrqProcess+0x3a8>
 800972c:	4b69      	ldr	r3, [pc, #420]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 814c 	beq.w	80099d0 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009738:	4b66      	ldr	r3, [pc, #408]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4798      	blx	r3
        break;
 8009740:	e146      	b.n	80099d0 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8009742:	4865      	ldr	r0, [pc, #404]	@ (80098d8 <RadioIrqProcess+0x2b0>)
 8009744:	f002 fa9c 	bl	800bc80 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009748:	4b60      	ldr	r3, [pc, #384]	@ (80098cc <RadioIrqProcess+0x2a4>)
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	f083 0301 	eor.w	r3, r3, #1
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d014      	beq.n	8009780 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009756:	2000      	movs	r0, #0
 8009758:	f000 ffc6 	bl	800a6e8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800975c:	2100      	movs	r1, #0
 800975e:	f640 1002 	movw	r0, #2306	@ 0x902
 8009762:	f001 fd45 	bl	800b1f0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009766:	f640 1044 	movw	r0, #2372	@ 0x944
 800976a:	f001 fd55 	bl	800b218 <SUBGRF_ReadRegister>
 800976e:	4603      	mov	r3, r0
 8009770:	f043 0302 	orr.w	r3, r3, #2
 8009774:	b2db      	uxtb	r3, r3
 8009776:	4619      	mov	r1, r3
 8009778:	f640 1044 	movw	r0, #2372	@ 0x944
 800977c:	f001 fd38 	bl	800b1f0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009780:	1dfb      	adds	r3, r7, #7
 8009782:	22ff      	movs	r2, #255	@ 0xff
 8009784:	4619      	mov	r1, r3
 8009786:	4855      	ldr	r0, [pc, #340]	@ (80098dc <RadioIrqProcess+0x2b4>)
 8009788:	f000 fe7e 	bl	800a488 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800978c:	4854      	ldr	r0, [pc, #336]	@ (80098e0 <RadioIrqProcess+0x2b8>)
 800978e:	f001 fcdd 	bl	800b14c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009792:	4b50      	ldr	r3, [pc, #320]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 811c 	beq.w	80099d4 <RadioIrqProcess+0x3ac>
 800979c:	4b4d      	ldr	r3, [pc, #308]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8116 	beq.w	80099d4 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80097a8:	4b48      	ldr	r3, [pc, #288]	@ (80098cc <RadioIrqProcess+0x2a4>)
 80097aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d10e      	bne.n	80097d0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80097b2:	4b48      	ldr	r3, [pc, #288]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689c      	ldr	r4, [r3, #8]
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	4619      	mov	r1, r3
 80097bc:	4b43      	ldr	r3, [pc, #268]	@ (80098cc <RadioIrqProcess+0x2a4>)
 80097be:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80097c2:	461a      	mov	r2, r3
 80097c4:	4b41      	ldr	r3, [pc, #260]	@ (80098cc <RadioIrqProcess+0x2a4>)
 80097c6:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80097ca:	4844      	ldr	r0, [pc, #272]	@ (80098dc <RadioIrqProcess+0x2b4>)
 80097cc:	47a0      	blx	r4
                break;
 80097ce:	e01d      	b.n	800980c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80097d0:	4b3e      	ldr	r3, [pc, #248]	@ (80098cc <RadioIrqProcess+0x2a4>)
 80097d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d4:	463a      	mov	r2, r7
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 ff4b 	bl	800b674 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80097de:	4b3d      	ldr	r3, [pc, #244]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689c      	ldr	r4, [r3, #8]
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	4619      	mov	r1, r3
 80097e8:	4b38      	ldr	r3, [pc, #224]	@ (80098cc <RadioIrqProcess+0x2a4>)
 80097ea:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80097ee:	4618      	mov	r0, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80097f6:	4a3b      	ldr	r2, [pc, #236]	@ (80098e4 <RadioIrqProcess+0x2bc>)
 80097f8:	fb82 5203 	smull	r5, r2, r2, r3
 80097fc:	1192      	asrs	r2, r2, #6
 80097fe:	17db      	asrs	r3, r3, #31
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	b25b      	sxtb	r3, r3
 8009804:	4602      	mov	r2, r0
 8009806:	4835      	ldr	r0, [pc, #212]	@ (80098dc <RadioIrqProcess+0x2b4>)
 8009808:	47a0      	blx	r4
                break;
 800980a:	bf00      	nop
        break;
 800980c:	e0e2      	b.n	80099d4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800980e:	2000      	movs	r0, #0
 8009810:	f000 ff6a 	bl	800a6e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009814:	4b2f      	ldr	r3, [pc, #188]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80dd 	beq.w	80099d8 <RadioIrqProcess+0x3b0>
 800981e:	4b2d      	ldr	r3, [pc, #180]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80d7 	beq.w	80099d8 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800982a:	4b2a      	ldr	r3, [pc, #168]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2000      	movs	r0, #0
 8009832:	4798      	blx	r3
        break;
 8009834:	e0d0      	b.n	80099d8 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009836:	2000      	movs	r0, #0
 8009838:	f000 ff56 	bl	800a6e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800983c:	4b25      	ldr	r3, [pc, #148]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 80cb 	beq.w	80099dc <RadioIrqProcess+0x3b4>
 8009846:	4b23      	ldr	r3, [pc, #140]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80c5 	beq.w	80099dc <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8009852:	4b20      	ldr	r3, [pc, #128]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	2001      	movs	r0, #1
 800985a:	4798      	blx	r3
        break;
 800985c:	e0be      	b.n	80099dc <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800985e:	f000 fdf9 	bl	800a454 <SUBGRF_GetOperatingMode>
 8009862:	4603      	mov	r3, r0
 8009864:	2b04      	cmp	r3, #4
 8009866:	d115      	bne.n	8009894 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009868:	4819      	ldr	r0, [pc, #100]	@ (80098d0 <RadioIrqProcess+0x2a8>)
 800986a:	f002 fa09 	bl	800bc80 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800986e:	2000      	movs	r0, #0
 8009870:	f000 ff3a 	bl	800a6e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009874:	4b17      	ldr	r3, [pc, #92]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 80b1 	beq.w	80099e0 <RadioIrqProcess+0x3b8>
 800987e:	4b15      	ldr	r3, [pc, #84]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 80ab 	beq.w	80099e0 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800988a:	4b12      	ldr	r3, [pc, #72]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	4798      	blx	r3
        break;
 8009892:	e0a5      	b.n	80099e0 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8009894:	f000 fdde 	bl	800a454 <SUBGRF_GetOperatingMode>
 8009898:	4603      	mov	r3, r0
 800989a:	2b05      	cmp	r3, #5
 800989c:	f040 80a0 	bne.w	80099e0 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80098a0:	480d      	ldr	r0, [pc, #52]	@ (80098d8 <RadioIrqProcess+0x2b0>)
 80098a2:	f002 f9ed 	bl	800bc80 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80098a6:	2000      	movs	r0, #0
 80098a8:	f000 ff1e 	bl	800a6e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80098ac:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 8095 	beq.w	80099e0 <RadioIrqProcess+0x3b8>
 80098b6:	4b07      	ldr	r3, [pc, #28]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 808f 	beq.w	80099e0 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80098c2:	4b04      	ldr	r3, [pc, #16]	@ (80098d4 <RadioIrqProcess+0x2ac>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	4798      	blx	r3
        break;
 80098ca:	e089      	b.n	80099e0 <RadioIrqProcess+0x3b8>
 80098cc:	20000a90 	.word	0x20000a90
 80098d0:	20000aec 	.word	0x20000aec
 80098d4:	20000a8c 	.word	0x20000a8c
 80098d8:	20000b04 	.word	0x20000b04
 80098dc:	2000098c 	.word	0x2000098c
 80098e0:	20000ab4 	.word	0x20000ab4
 80098e4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80098e8:	4b44      	ldr	r3, [pc, #272]	@ (80099fc <RadioIrqProcess+0x3d4>)
 80098ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d079      	beq.n	80099e4 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80098f0:	4a43      	ldr	r2, [pc, #268]	@ (8009a00 <RadioIrqProcess+0x3d8>)
 80098f2:	4b42      	ldr	r3, [pc, #264]	@ (80099fc <RadioIrqProcess+0x3d4>)
 80098f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f6:	0c1b      	lsrs	r3, r3, #16
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	4619      	mov	r1, r3
 80098fc:	f640 1003 	movw	r0, #2307	@ 0x903
 8009900:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009902:	4a3f      	ldr	r2, [pc, #252]	@ (8009a00 <RadioIrqProcess+0x3d8>)
 8009904:	4b3d      	ldr	r3, [pc, #244]	@ (80099fc <RadioIrqProcess+0x3d4>)
 8009906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009908:	0a1b      	lsrs	r3, r3, #8
 800990a:	b2db      	uxtb	r3, r3
 800990c:	4619      	mov	r1, r3
 800990e:	f640 1004 	movw	r0, #2308	@ 0x904
 8009912:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009914:	4a3a      	ldr	r2, [pc, #232]	@ (8009a00 <RadioIrqProcess+0x3d8>)
 8009916:	4b39      	ldr	r3, [pc, #228]	@ (80099fc <RadioIrqProcess+0x3d4>)
 8009918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991a:	b2db      	uxtb	r3, r3
 800991c:	4619      	mov	r1, r3
 800991e:	f640 1005 	movw	r0, #2309	@ 0x905
 8009922:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009924:	4c36      	ldr	r4, [pc, #216]	@ (8009a00 <RadioIrqProcess+0x3d8>)
 8009926:	4b37      	ldr	r3, [pc, #220]	@ (8009a04 <RadioIrqProcess+0x3dc>)
 8009928:	f640 1002 	movw	r0, #2306	@ 0x902
 800992c:	4798      	blx	r3
 800992e:	4603      	mov	r3, r0
 8009930:	f043 0301 	orr.w	r3, r3, #1
 8009934:	b2db      	uxtb	r3, r3
 8009936:	4619      	mov	r1, r3
 8009938:	f640 1002 	movw	r0, #2306	@ 0x902
 800993c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800993e:	4b2f      	ldr	r3, [pc, #188]	@ (80099fc <RadioIrqProcess+0x3d4>)
 8009940:	2200      	movs	r2, #0
 8009942:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009944:	2300      	movs	r3, #0
 8009946:	2200      	movs	r2, #0
 8009948:	f240 2162 	movw	r1, #610	@ 0x262
 800994c:	f240 2062 	movw	r0, #610	@ 0x262
 8009950:	f001 f89e 	bl	800aa90 <SUBGRF_SetDioIrqParams>
        break;
 8009954:	e046      	b.n	80099e4 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8009956:	f001 ff38 	bl	800b7ca <RFW_Is_Init>
 800995a:	4603      	mov	r3, r0
 800995c:	2b01      	cmp	r3, #1
 800995e:	d143      	bne.n	80099e8 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009960:	f001 ff69 	bl	800b836 <RFW_ReceivePayload>
        break;
 8009964:	e040      	b.n	80099e8 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8009966:	4828      	ldr	r0, [pc, #160]	@ (8009a08 <RadioIrqProcess+0x3e0>)
 8009968:	f002 f98a 	bl	800bc80 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800996c:	4b23      	ldr	r3, [pc, #140]	@ (80099fc <RadioIrqProcess+0x3d4>)
 800996e:	785b      	ldrb	r3, [r3, #1]
 8009970:	f083 0301 	eor.w	r3, r3, #1
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800997a:	2000      	movs	r0, #0
 800997c:	f000 feb4 	bl	800a6e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009980:	4b22      	ldr	r3, [pc, #136]	@ (8009a0c <RadioIrqProcess+0x3e4>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d031      	beq.n	80099ec <RadioIrqProcess+0x3c4>
 8009988:	4b20      	ldr	r3, [pc, #128]	@ (8009a0c <RadioIrqProcess+0x3e4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d02c      	beq.n	80099ec <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8009992:	4b1e      	ldr	r3, [pc, #120]	@ (8009a0c <RadioIrqProcess+0x3e4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4798      	blx	r3
        break;
 800999a:	e027      	b.n	80099ec <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800999c:	4b17      	ldr	r3, [pc, #92]	@ (80099fc <RadioIrqProcess+0x3d4>)
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	f083 0301 	eor.w	r3, r3, #1
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80099aa:	2000      	movs	r0, #0
 80099ac:	f000 fe9c 	bl	800a6e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80099b0:	4b16      	ldr	r3, [pc, #88]	@ (8009a0c <RadioIrqProcess+0x3e4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01b      	beq.n	80099f0 <RadioIrqProcess+0x3c8>
 80099b8:	4b14      	ldr	r3, [pc, #80]	@ (8009a0c <RadioIrqProcess+0x3e4>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d016      	beq.n	80099f0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80099c2:	4b12      	ldr	r3, [pc, #72]	@ (8009a0c <RadioIrqProcess+0x3e4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	4798      	blx	r3
        break;
 80099ca:	e011      	b.n	80099f0 <RadioIrqProcess+0x3c8>
        break;
 80099cc:	bf00      	nop
 80099ce:	e010      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099d0:	bf00      	nop
 80099d2:	e00e      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099d4:	bf00      	nop
 80099d6:	e00c      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099d8:	bf00      	nop
 80099da:	e00a      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099dc:	bf00      	nop
 80099de:	e008      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099e0:	bf00      	nop
 80099e2:	e006      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099e4:	bf00      	nop
 80099e6:	e004      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099e8:	bf00      	nop
 80099ea:	e002      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099ec:	bf00      	nop
 80099ee:	e000      	b.n	80099f2 <RadioIrqProcess+0x3ca>
        break;
 80099f0:	bf00      	nop
    }
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bdb0      	pop	{r4, r5, r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20000a90 	.word	0x20000a90
 8009a00:	08009439 	.word	0x08009439
 8009a04:	0800945d 	.word	0x0800945d
 8009a08:	20000b04 	.word	0x20000b04
 8009a0c:	20000a8c 	.word	0x20000a8c

08009a10 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009a14:	4b09      	ldr	r3, [pc, #36]	@ (8009a3c <RadioTxPrbs+0x2c>)
 8009a16:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 fcdb 	bl	800b3d8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009a22:	4b07      	ldr	r3, [pc, #28]	@ (8009a40 <RadioTxPrbs+0x30>)
 8009a24:	212d      	movs	r1, #45	@ 0x2d
 8009a26:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009a2a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009a2c:	f000 ff1f 	bl	800a86e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009a30:	4804      	ldr	r0, [pc, #16]	@ (8009a44 <RadioTxPrbs+0x34>)
 8009a32:	f000 fe75 	bl	800a720 <SUBGRF_SetTx>
}
 8009a36:	bf00      	nop
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000a90 	.word	0x20000a90
 8009a40:	08009439 	.word	0x08009439
 8009a44:	000fffff 	.word	0x000fffff

08009a48 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f001 fce6 	bl	800b428 <SUBGRF_SetRfTxPower>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009a60:	210e      	movs	r1, #14
 8009a62:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009a66:	f001 fbc3 	bl	800b1f0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f001 fcb2 	bl	800b3d8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009a74:	f000 fef2 	bl	800a85c <SUBGRF_SetTxContinuousWave>
}
 8009a78:	bf00      	nop
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009a80:	b480      	push	{r7}
 8009a82:	b089      	sub	sp, #36	@ 0x24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8009a96:	2300      	movs	r3, #0
 8009a98:	61bb      	str	r3, [r7, #24]
 8009a9a:	e011      	b.n	8009ac0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	440b      	add	r3, r1
 8009aaa:	43d2      	mvns	r2, r2
 8009aac:	b2d2      	uxtb	r2, r2
 8009aae:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	3301      	adds	r3, #1
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	79fb      	ldrb	r3, [r7, #7]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	dbe9      	blt.n	8009a9c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61bb      	str	r3, [r7, #24]
 8009acc:	e049      	b.n	8009b62 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	425a      	negs	r2, r3
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	f002 0207 	and.w	r2, r2, #7
 8009ada:	bf58      	it	pl
 8009adc:	4253      	negpl	r3, r2
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f1c3 0307 	rsb	r3, r3, #7
 8009ae4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	da00      	bge.n	8009aee <payload_integration+0x6e>
 8009aec:	3307      	adds	r3, #7
 8009aee:	10db      	asrs	r3, r3, #3
 8009af0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	3301      	adds	r3, #1
 8009af6:	425a      	negs	r2, r3
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	f002 0207 	and.w	r2, r2, #7
 8009b00:	bf58      	it	pl
 8009b02:	4253      	negpl	r3, r2
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	f1c3 0307 	rsb	r3, r3, #7
 8009b0a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	da00      	bge.n	8009b16 <payload_integration+0x96>
 8009b14:	3307      	adds	r3, #7
 8009b16:	10db      	asrs	r3, r3, #3
 8009b18:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009b1a:	7dbb      	ldrb	r3, [r7, #22]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	4413      	add	r3, r2
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	fa42 f303 	asr.w	r3, r2, r3
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009b32:	7ffa      	ldrb	r2, [r7, #31]
 8009b34:	7cfb      	ldrb	r3, [r7, #19]
 8009b36:	4053      	eors	r3, r2
 8009b38:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009b3a:	7d3b      	ldrb	r3, [r7, #20]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b25a      	sxtb	r2, r3
 8009b44:	7ff9      	ldrb	r1, [r7, #31]
 8009b46:	7d7b      	ldrb	r3, [r7, #21]
 8009b48:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4c:	b25b      	sxtb	r3, r3
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	b259      	sxtb	r1, r3
 8009b52:	7d3b      	ldrb	r3, [r7, #20]
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4413      	add	r3, r2
 8009b58:	b2ca      	uxtb	r2, r1
 8009b5a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	dbb0      	blt.n	8009ace <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009b6c:	7ffb      	ldrb	r3, [r7, #31]
 8009b6e:	01db      	lsls	r3, r3, #7
 8009b70:	b25a      	sxtb	r2, r3
 8009b72:	7ffb      	ldrb	r3, [r7, #31]
 8009b74:	019b      	lsls	r3, r3, #6
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	b25b      	sxtb	r3, r3
 8009b7c:	7ffa      	ldrb	r2, [r7, #31]
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	d101      	bne.n	8009b86 <payload_integration+0x106>
 8009b82:	2220      	movs	r2, #32
 8009b84:	e000      	b.n	8009b88 <payload_integration+0x108>
 8009b86:	2200      	movs	r2, #0
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	b259      	sxtb	r1, r3
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	b2ca      	uxtb	r2, r1
 8009b94:	701a      	strb	r2, [r3, #0]
}
 8009b96:	bf00      	nop
 8009b98:	3724      	adds	r7, #36	@ 0x24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bc80      	pop	{r7}
 8009b9e:	4770      	bx	lr

08009ba0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08c      	sub	sp, #48	@ 0x30
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	623b      	str	r3, [r7, #32]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009bbc:	f001 fdff 	bl	800b7be <RFW_DeInit>

    if( rxContinuous != 0 )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bf14      	ite	ne
 8009bd0:	2301      	movne	r3, #1
 8009bd2:	2300      	moveq	r3, #0
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	4ba3      	ldr	r3, [pc, #652]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009bd8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <RadioSetRxGenericConfig+0x48>
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	f000 80dc 	beq.w	8009d9e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009be6:	e194      	b.n	8009f12 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <RadioSetRxGenericConfig+0x58>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d102      	bne.n	8009bfe <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfc:	e18a      	b.n	8009f14 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	7f9b      	ldrb	r3, [r3, #30]
 8009c02:	2b08      	cmp	r3, #8
 8009c04:	d902      	bls.n	8009c0c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009c06:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0a:	e183      	b.n	8009f14 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	6919      	ldr	r1, [r3, #16]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	7f9b      	ldrb	r3, [r3, #30]
 8009c14:	461a      	mov	r2, r3
 8009c16:	f107 0320 	add.w	r3, r7, #32
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 ff52 	bl	800bac4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bf14      	ite	ne
 8009c28:	2301      	movne	r3, #1
 8009c2a:	2300      	moveq	r3, #0
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fe26 	bl	800a880 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009c34:	4b8b      	ldr	r3, [pc, #556]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4a88      	ldr	r2, [pc, #544]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c42:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009c4a:	4b86      	ldr	r3, [pc, #536]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fce5 	bl	800b624 <SUBGRF_GetFskBandwidthRegValue>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b81      	ldr	r3, [pc, #516]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c64:	4b7f      	ldr	r3, [pc, #508]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	4b7b      	ldr	r3, [pc, #492]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c76:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	7fda      	ldrb	r2, [r3, #31]
 8009c7c:	4b79      	ldr	r3, [pc, #484]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c7e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	7f9b      	ldrb	r3, [r3, #30]
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	4b76      	ldr	r3, [pc, #472]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c8a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8009c92:	4b74      	ldr	r3, [pc, #464]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009c94:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009ca8:	759a      	strb	r2, [r3, #22]
 8009caa:	e00b      	b.n	8009cc4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d103      	bne.n	8009cbe <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009cb8:	22ff      	movs	r2, #255	@ 0xff
 8009cba:	759a      	strb	r2, [r3, #22]
 8009cbc:	e002      	b.n	8009cc4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009cbe:	4b69      	ldr	r3, [pc, #420]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009cc0:	22ff      	movs	r2, #255	@ 0xff
 8009cc2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d004      	beq.n	8009cd8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d12d      	bne.n	8009d34 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009cde:	2bf1      	cmp	r3, #241	@ 0xf1
 8009ce0:	d00c      	beq.n	8009cfc <RadioSetRxGenericConfig+0x15c>
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009ce8:	2bf2      	cmp	r3, #242	@ 0xf2
 8009cea:	d007      	beq.n	8009cfc <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d002      	beq.n	8009cfc <RadioSetRxGenericConfig+0x15c>
                return -1;
 8009cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfa:	e10b      	b.n	8009f14 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009d04:	4b58      	ldr	r3, [pc, #352]	@ (8009e68 <RadioSetRxGenericConfig+0x2c8>)
 8009d06:	6819      	ldr	r1, [r3, #0]
 8009d08:	f107 0314 	add.w	r3, r7, #20
 8009d0c:	4a57      	ldr	r2, [pc, #348]	@ (8009e6c <RadioSetRxGenericConfig+0x2cc>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 fd48 	bl	800b7a4 <RFW_Init>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <RadioSetRxGenericConfig+0x180>
                return -1;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1e:	e0f9      	b.n	8009f14 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009d20:	4b50      	ldr	r3, [pc, #320]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009d26:	4b4f      	ldr	r3, [pc, #316]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	755a      	strb	r2, [r3, #21]
        {
 8009d32:	e00e      	b.n	8009d52 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8009d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009d3c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009d44:	4b47      	ldr	r3, [pc, #284]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009d46:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8009d4e:	4b45      	ldr	r3, [pc, #276]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009d50:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009d52:	f7ff fa70 	bl	8009236 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009d56:	2000      	movs	r0, #0
 8009d58:	f7fe fc0c 	bl	8008574 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d5c:	4844      	ldr	r0, [pc, #272]	@ (8009e70 <RadioSetRxGenericConfig+0x2d0>)
 8009d5e:	f001 f82d 	bl	800adbc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d62:	4844      	ldr	r0, [pc, #272]	@ (8009e74 <RadioSetRxGenericConfig+0x2d4>)
 8009d64:	f001 f8fc 	bl	800af60 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009d68:	f107 0320 	add.w	r3, r7, #32
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fbc0 	bl	800a4f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	8b9b      	ldrh	r3, [r3, #28]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fc0a 	bl	800a590 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	8b1b      	ldrh	r3, [r3, #24]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fbe5 	bl	800a550 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009d8c:	fb03 f202 	mul.w	r2, r3, r2
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d98:	4a32      	ldr	r2, [pc, #200]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009d9a:	6093      	str	r3, [r2, #8]
        break;
 8009d9c:	e0b9      	b.n	8009f12 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <RadioSetRxGenericConfig+0x20c>
            return -1;
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295
 8009daa:	e0b3      	b.n	8009f14 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d104      	bne.n	8009dc0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009dbe:	e002      	b.n	8009dc6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009dc0:	23ff      	movs	r3, #255	@ 0xff
 8009dc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bf14      	ite	ne
 8009dce:	2301      	movne	r3, #1
 8009dd0:	2300      	moveq	r3, #0
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 fd53 	bl	800a880 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fd5d 	bl	800a89e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009de4:	4b1f      	ldr	r3, [pc, #124]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8009df2:	4b1c      	ldr	r3, [pc, #112]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8009dfe:	4b19      	ldr	r3, [pc, #100]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8009e0a:	4b16      	ldr	r3, [pc, #88]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009e0c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d010      	beq.n	8009e3c <RadioSetRxGenericConfig+0x29c>
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	dc2c      	bgt.n	8009e78 <RadioSetRxGenericConfig+0x2d8>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <RadioSetRxGenericConfig+0x288>
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d005      	beq.n	8009e32 <RadioSetRxGenericConfig+0x292>
            break;
 8009e26:	e027      	b.n	8009e78 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009e28:	4b0e      	ldr	r3, [pc, #56]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e30:	e023      	b.n	8009e7a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009e32:	4b0c      	ldr	r3, [pc, #48]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e3a:	e01e      	b.n	8009e7a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e42:	2b0b      	cmp	r3, #11
 8009e44:	d004      	beq.n	8009e50 <RadioSetRxGenericConfig+0x2b0>
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e4c:	2b0c      	cmp	r3, #12
 8009e4e:	d104      	bne.n	8009e5a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009e50:	4b04      	ldr	r3, [pc, #16]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e58:	e00f      	b.n	8009e7a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009e5a:	4b02      	ldr	r3, [pc, #8]	@ (8009e64 <RadioSetRxGenericConfig+0x2c4>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e62:	e00a      	b.n	8009e7a <RadioSetRxGenericConfig+0x2da>
 8009e64:	20000a90 	.word	0x20000a90
 8009e68:	20000a8c 	.word	0x20000a8c
 8009e6c:	20000b04 	.word	0x20000b04
 8009e70:	20000ac8 	.word	0x20000ac8
 8009e74:	20000a9e 	.word	0x20000a9e
            break;
 8009e78:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009e7a:	4b28      	ldr	r3, [pc, #160]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8009e84:	4b25      	ldr	r3, [pc, #148]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009e86:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8009e8e:	4b23      	ldr	r3, [pc, #140]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009e90:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009e92:	4a22      	ldr	r2, [pc, #136]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009e94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e98:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8009ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009ea2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8009eac:	4b1b      	ldr	r3, [pc, #108]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009eae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8009eb2:	f7ff f9c0 	bl	8009236 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	f7fe fb5c 	bl	8008574 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ebc:	4818      	ldr	r0, [pc, #96]	@ (8009f20 <RadioSetRxGenericConfig+0x380>)
 8009ebe:	f000 ff7d 	bl	800adbc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ec2:	4818      	ldr	r0, [pc, #96]	@ (8009f24 <RadioSetRxGenericConfig+0x384>)
 8009ec4:	f001 f84c 	bl	800af60 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009ec8:	4b14      	ldr	r3, [pc, #80]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009eca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d10d      	bne.n	8009eee <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009ed2:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ed6:	f001 f99f 	bl	800b218 <SUBGRF_ReadRegister>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f023 0304 	bic.w	r3, r3, #4
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ee8:	f001 f982 	bl	800b1f0 <SUBGRF_WriteRegister>
 8009eec:	e00c      	b.n	8009f08 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009eee:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ef2:	f001 f991 	bl	800b218 <SUBGRF_ReadRegister>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f043 0304 	orr.w	r3, r3, #4
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	4619      	mov	r1, r3
 8009f00:	f240 7036 	movw	r0, #1846	@ 0x736
 8009f04:	f001 f974 	bl	800b1f0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009f08:	4b04      	ldr	r3, [pc, #16]	@ (8009f1c <RadioSetRxGenericConfig+0x37c>)
 8009f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f0e:	609a      	str	r2, [r3, #8]
        break;
 8009f10:	bf00      	nop
    }
    return status;
 8009f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3730      	adds	r7, #48	@ 0x30
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20000a90 	.word	0x20000a90
 8009f20:	20000ac8 	.word	0x20000ac8
 8009f24:	20000a9e 	.word	0x20000a9e

08009f28 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08e      	sub	sp, #56	@ 0x38
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	607b      	str	r3, [r7, #4]
 8009f32:	4603      	mov	r3, r0
 8009f34:	73fb      	strb	r3, [r7, #15]
 8009f36:	4613      	mov	r3, r2
 8009f38:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f3e:	2300      	movs	r3, #0
 8009f40:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009f42:	f001 fc3c 	bl	800b7be <RFW_DeInit>
    switch( modem )
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	f200 8204 	bhi.w	800a356 <RadioSetTxGenericConfig+0x42e>
 8009f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f54 <RadioSetTxGenericConfig+0x2c>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	0800a0d9 	.word	0x0800a0d9
 8009f58:	0800a221 	.word	0x0800a221
 8009f5c:	0800a319 	.word	0x0800a319
 8009f60:	08009f65 	.word	0x08009f65
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	7c9b      	ldrb	r3, [r3, #18]
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d902      	bls.n	8009f72 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f70:	e206      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	6899      	ldr	r1, [r3, #8]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	7c9b      	ldrb	r3, [r3, #18]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 fd9f 	bl	800bac4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f92:	e1f5      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d813      	bhi.n	8009fc8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009fa6:	4b99      	ldr	r3, [pc, #612]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fa8:	2203      	movs	r2, #3
 8009faa:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009fac:	4b97      	ldr	r3, [pc, #604]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fae:	2203      	movs	r2, #3
 8009fb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a94      	ldr	r2, [pc, #592]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fba:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	7cda      	ldrb	r2, [r3, #19]
 8009fc0:	4b92      	ldr	r3, [pc, #584]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fc6:	e017      	b.n	8009ff8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009fce:	4b8f      	ldr	r3, [pc, #572]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a8a      	ldr	r2, [pc, #552]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fe2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	7cda      	ldrb	r2, [r3, #19]
 8009fe8:	4b88      	ldr	r3, [pc, #544]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009fea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	089b      	lsrs	r3, r3, #2
 8009ff4:	4a85      	ldr	r2, [pc, #532]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 8009ff6:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	b29a      	uxth	r2, r3
 800a002:	4b82      	ldr	r3, [pc, #520]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a004:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a006:	4b81      	ldr	r3, [pc, #516]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a008:	2204      	movs	r2, #4
 800a00a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	7c9b      	ldrb	r3, [r3, #18]
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	b2da      	uxtb	r2, r3
 800a014:	4b7d      	ldr	r3, [pc, #500]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a016:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a018:	4b7c      	ldr	r3, [pc, #496]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	7d9b      	ldrb	r3, [r3, #22]
 800a022:	2b02      	cmp	r3, #2
 800a024:	d003      	beq.n	800a02e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	7d1b      	ldrb	r3, [r3, #20]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d12b      	bne.n	800a086 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	7d5b      	ldrb	r3, [r3, #21]
 800a032:	2bf1      	cmp	r3, #241	@ 0xf1
 800a034:	d00a      	beq.n	800a04c <RadioSetTxGenericConfig+0x124>
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	7d5b      	ldrb	r3, [r3, #21]
 800a03a:	2bf2      	cmp	r3, #242	@ 0xf2
 800a03c:	d006      	beq.n	800a04c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	7d5b      	ldrb	r3, [r3, #21]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d002      	beq.n	800a04c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800a046:	f04f 33ff 	mov.w	r3, #4294967295
 800a04a:	e199      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a050:	2301      	movs	r3, #1
 800a052:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a056:	4b6e      	ldr	r3, [pc, #440]	@ (800a210 <RadioSetTxGenericConfig+0x2e8>)
 800a058:	6819      	ldr	r1, [r3, #0]
 800a05a:	f107 0320 	add.w	r3, r7, #32
 800a05e:	4a6d      	ldr	r2, [pc, #436]	@ (800a214 <RadioSetTxGenericConfig+0x2ec>)
 800a060:	4618      	mov	r0, r3
 800a062:	f001 fb9f 	bl	800b7a4 <RFW_Init>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	e186      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a072:	4b66      	ldr	r3, [pc, #408]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a074:	2200      	movs	r2, #0
 800a076:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a078:	4b64      	ldr	r3, [pc, #400]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a07a:	2201      	movs	r2, #1
 800a07c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a07e:	4b63      	ldr	r3, [pc, #396]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a080:	2200      	movs	r2, #0
 800a082:	755a      	strb	r2, [r3, #21]
        {
 800a084:	e00b      	b.n	800a09e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	7d5a      	ldrb	r2, [r3, #21]
 800a08a:	4b60      	ldr	r3, [pc, #384]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a08c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	7d9a      	ldrb	r2, [r3, #22]
 800a092:	4b5e      	ldr	r3, [pc, #376]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a094:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	7d1a      	ldrb	r2, [r3, #20]
 800a09a:	4b5c      	ldr	r3, [pc, #368]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a09c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a09e:	f7ff f8ca 	bl	8009236 <RadioStandby>
        RadioSetModem( radio_modem );
 800a0a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fa64 	bl	8008574 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a0ac:	485a      	ldr	r0, [pc, #360]	@ (800a218 <RadioSetTxGenericConfig+0x2f0>)
 800a0ae:	f000 fe85 	bl	800adbc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a0b2:	485a      	ldr	r0, [pc, #360]	@ (800a21c <RadioSetTxGenericConfig+0x2f4>)
 800a0b4:	f000 ff54 	bl	800af60 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a0b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fa18 	bl	800a4f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	8a1b      	ldrh	r3, [r3, #16]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fa62 	bl	800a590 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	899b      	ldrh	r3, [r3, #12]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fa3d 	bl	800a550 <SUBGRF_SetCrcPolynomial>
        break;
 800a0d6:	e13f      	b.n	800a358 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e4:	e14c      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	7c9b      	ldrb	r3, [r3, #18]
 800a0ea:	2b08      	cmp	r3, #8
 800a0ec:	d902      	bls.n	800a0f4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	e145      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6899      	ldr	r1, [r3, #8]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	7c9b      	ldrb	r3, [r3, #18]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a102:	4618      	mov	r0, r3
 800a104:	f001 fcde 	bl	800bac4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a108:	4b40      	ldr	r3, [pc, #256]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a3d      	ldr	r2, [pc, #244]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a116:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	7cda      	ldrb	r2, [r3, #19]
 800a11c:	4b3b      	ldr	r3, [pc, #236]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a11e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	4a39      	ldr	r2, [pc, #228]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a128:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a12a:	4b38      	ldr	r3, [pc, #224]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	b29b      	uxth	r3, r3
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	b29a      	uxth	r2, r3
 800a13a:	4b34      	ldr	r3, [pc, #208]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a13c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a13e:	4b33      	ldr	r3, [pc, #204]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a140:	2204      	movs	r2, #4
 800a142:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	7c9b      	ldrb	r3, [r3, #18]
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	4b2f      	ldr	r3, [pc, #188]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a14e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a150:	4b2e      	ldr	r3, [pc, #184]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a152:	2200      	movs	r2, #0
 800a154:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	7d9b      	ldrb	r3, [r3, #22]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d003      	beq.n	800a166 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	7d1b      	ldrb	r3, [r3, #20]
 800a162:	2b02      	cmp	r3, #2
 800a164:	d12a      	bne.n	800a1bc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	7d5b      	ldrb	r3, [r3, #21]
 800a16a:	2bf1      	cmp	r3, #241	@ 0xf1
 800a16c:	d00a      	beq.n	800a184 <RadioSetTxGenericConfig+0x25c>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	7d5b      	ldrb	r3, [r3, #21]
 800a172:	2bf2      	cmp	r3, #242	@ 0xf2
 800a174:	d006      	beq.n	800a184 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	7d5b      	ldrb	r3, [r3, #21]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d002      	beq.n	800a184 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800a17e:	f04f 33ff 	mov.w	r3, #4294967295
 800a182:	e0fd      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800a184:	2301      	movs	r3, #1
 800a186:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a18c:	4b20      	ldr	r3, [pc, #128]	@ (800a210 <RadioSetTxGenericConfig+0x2e8>)
 800a18e:	6819      	ldr	r1, [r3, #0]
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	4a1f      	ldr	r2, [pc, #124]	@ (800a214 <RadioSetTxGenericConfig+0x2ec>)
 800a196:	4618      	mov	r0, r3
 800a198:	f001 fb04 	bl	800b7a4 <RFW_Init>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a6:	e0eb      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a1a8:	4b18      	ldr	r3, [pc, #96]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a1ae:	4b17      	ldr	r3, [pc, #92]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a1b4:	4b15      	ldr	r3, [pc, #84]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	755a      	strb	r2, [r3, #21]
        {
 800a1ba:	e00b      	b.n	800a1d4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	7d5a      	ldrb	r2, [r3, #21]
 800a1c0:	4b12      	ldr	r3, [pc, #72]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a1c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	7d9a      	ldrb	r2, [r3, #22]
 800a1c8:	4b10      	ldr	r3, [pc, #64]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a1ca:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	7d1a      	ldrb	r2, [r3, #20]
 800a1d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a20c <RadioSetTxGenericConfig+0x2e4>)
 800a1d2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a1d4:	f7ff f82f 	bl	8009236 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f7fe f9cb 	bl	8008574 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a1de:	480e      	ldr	r0, [pc, #56]	@ (800a218 <RadioSetTxGenericConfig+0x2f0>)
 800a1e0:	f000 fdec 	bl	800adbc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a1e4:	480d      	ldr	r0, [pc, #52]	@ (800a21c <RadioSetTxGenericConfig+0x2f4>)
 800a1e6:	f000 febb 	bl	800af60 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a1ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 f97f 	bl	800a4f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	8a1b      	ldrh	r3, [r3, #16]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 f9c9 	bl	800a590 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	899b      	ldrh	r3, [r3, #12]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f9a4 	bl	800a550 <SUBGRF_SetCrcPolynomial>
        break;
 800a208:	e0a6      	b.n	800a358 <RadioSetTxGenericConfig+0x430>
 800a20a:	bf00      	nop
 800a20c:	20000a90 	.word	0x20000a90
 800a210:	20000a8c 	.word	0x20000a8c
 800a214:	20000aec 	.word	0x20000aec
 800a218:	20000ac8 	.word	0x20000ac8
 800a21c:	20000a9e 	.word	0x20000a9e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a220:	4b59      	ldr	r3, [pc, #356]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	781a      	ldrb	r2, [r3, #0]
 800a22c:	4b56      	ldr	r3, [pc, #344]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a22e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	785a      	ldrb	r2, [r3, #1]
 800a236:	4b54      	ldr	r3, [pc, #336]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	789a      	ldrb	r2, [r3, #2]
 800a240:	4b51      	ldr	r3, [pc, #324]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a242:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	78db      	ldrb	r3, [r3, #3]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d010      	beq.n	800a270 <RadioSetTxGenericConfig+0x348>
 800a24e:	2b02      	cmp	r3, #2
 800a250:	dc20      	bgt.n	800a294 <RadioSetTxGenericConfig+0x36c>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <RadioSetTxGenericConfig+0x334>
 800a256:	2b01      	cmp	r3, #1
 800a258:	d005      	beq.n	800a266 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800a25a:	e01b      	b.n	800a294 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a25c:	4b4a      	ldr	r3, [pc, #296]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a264:	e017      	b.n	800a296 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a266:	4b48      	ldr	r3, [pc, #288]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a26e:	e012      	b.n	800a296 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b0b      	cmp	r3, #11
 800a276:	d003      	beq.n	800a280 <RadioSetTxGenericConfig+0x358>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b0c      	cmp	r3, #12
 800a27e:	d104      	bne.n	800a28a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a280:	4b41      	ldr	r3, [pc, #260]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a288:	e005      	b.n	800a296 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a28a:	4b3f      	ldr	r3, [pc, #252]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a292:	e000      	b.n	800a296 <RadioSetTxGenericConfig+0x36e>
            break;
 800a294:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a296:	4b3c      	ldr	r3, [pc, #240]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a298:	2201      	movs	r2, #1
 800a29a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	889a      	ldrh	r2, [r3, #4]
 800a2a0:	4b39      	ldr	r3, [pc, #228]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a2a2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	799a      	ldrb	r2, [r3, #6]
 800a2a8:	4b37      	ldr	r3, [pc, #220]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a2aa:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	79da      	ldrb	r2, [r3, #7]
 800a2b0:	4b35      	ldr	r3, [pc, #212]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a2b2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	7a1a      	ldrb	r2, [r3, #8]
 800a2ba:	4b33      	ldr	r3, [pc, #204]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a2bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800a2c0:	f7fe ffb9 	bl	8009236 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	f7fe f955 	bl	8008574 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a2ca:	4830      	ldr	r0, [pc, #192]	@ (800a38c <RadioSetTxGenericConfig+0x464>)
 800a2cc:	f000 fd76 	bl	800adbc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a2d0:	482f      	ldr	r0, [pc, #188]	@ (800a390 <RadioSetTxGenericConfig+0x468>)
 800a2d2:	f000 fe45 	bl	800af60 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a2d6:	4b2c      	ldr	r3, [pc, #176]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a2d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2dc:	2b06      	cmp	r3, #6
 800a2de:	d10d      	bne.n	800a2fc <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a2e0:	f640 0089 	movw	r0, #2185	@ 0x889
 800a2e4:	f000 ff98 	bl	800b218 <SUBGRF_ReadRegister>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f023 0304 	bic.w	r3, r3, #4
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f640 0089 	movw	r0, #2185	@ 0x889
 800a2f6:	f000 ff7b 	bl	800b1f0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800a2fa:	e02d      	b.n	800a358 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a2fc:	f640 0089 	movw	r0, #2185	@ 0x889
 800a300:	f000 ff8a 	bl	800b218 <SUBGRF_ReadRegister>
 800a304:	4603      	mov	r3, r0
 800a306:	f043 0304 	orr.w	r3, r3, #4
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	4619      	mov	r1, r3
 800a30e:	f640 0089 	movw	r0, #2185	@ 0x889
 800a312:	f000 ff6d 	bl	800b1f0 <SUBGRF_WriteRegister>
        break;
 800a316:	e01f      	b.n	800a358 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <RadioSetTxGenericConfig+0x402>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a328:	d902      	bls.n	800a330 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800a32a:	f04f 33ff 	mov.w	r3, #4294967295
 800a32e:	e027      	b.n	800a380 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800a330:	2003      	movs	r0, #3
 800a332:	f7fe f91f 	bl	8008574 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a336:	4b14      	ldr	r3, [pc, #80]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a338:	2202      	movs	r2, #2
 800a33a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a11      	ldr	r2, [pc, #68]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a344:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a346:	4b10      	ldr	r3, [pc, #64]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a348:	2216      	movs	r2, #22
 800a34a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a34e:	480f      	ldr	r0, [pc, #60]	@ (800a38c <RadioSetTxGenericConfig+0x464>)
 800a350:	f000 fd34 	bl	800adbc <SUBGRF_SetModulationParams>
        break;
 800a354:	e000      	b.n	800a358 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800a356:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 f863 	bl	800b428 <SUBGRF_SetRfTxPower>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	4b08      	ldr	r3, [pc, #32]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a368:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a36c:	4b06      	ldr	r3, [pc, #24]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a36e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a372:	4618      	mov	r0, r3
 800a374:	f001 fa37 	bl	800b7e6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a378:	4a03      	ldr	r2, [pc, #12]	@ (800a388 <RadioSetTxGenericConfig+0x460>)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6053      	str	r3, [r2, #4]
    return 0;
 800a37e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a380:	4618      	mov	r0, r3
 800a382:	3738      	adds	r7, #56	@ 0x38
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20000a90 	.word	0x20000a90
 800a38c:	20000ac8 	.word	0x20000ac8
 800a390:	20000a9e 	.word	0x20000a9e

0800a394 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bc80      	pop	{r7}
 800a3aa:	4770      	bx	lr

0800a3ac <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a3b6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a3d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a448 <SUBGRF_Init+0x84>)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a3d8:	f7f7 fa4a 	bl	8001870 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a3dc:	2002      	movs	r0, #2
 800a3de:	f001 f8ff 	bl	800b5e0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a3e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a44c <SUBGRF_Init+0x88>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	f000 f97d 	bl	800a6e8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a3ee:	f001 fb3e 	bl	800ba6e <RBI_IsTCXO>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d10e      	bne.n	800a416 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a3f8:	2140      	movs	r1, #64	@ 0x40
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	f000 fb82 	bl	800ab04 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a400:	2100      	movs	r1, #0
 800a402:	f640 1011 	movw	r0, #2321	@ 0x911
 800a406:	f000 fef3 	bl	800b1f0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a40a:	237f      	movs	r3, #127	@ 0x7f
 800a40c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a40e:	7b38      	ldrb	r0, [r7, #12]
 800a410:	f000 fa8b 	bl	800a92a <SUBGRF_Calibrate>
 800a414:	e009      	b.n	800a42a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a416:	2120      	movs	r1, #32
 800a418:	f640 1011 	movw	r0, #2321	@ 0x911
 800a41c:	f000 fee8 	bl	800b1f0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a420:	2120      	movs	r1, #32
 800a422:	f640 1012 	movw	r0, #2322	@ 0x912
 800a426:	f000 fee3 	bl	800b1f0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a42a:	210e      	movs	r1, #14
 800a42c:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a430:	f000 fede 	bl	800b1f0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800a434:	f001 fa86 	bl	800b944 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a438:	4b05      	ldr	r3, [pc, #20]	@ (800a450 <SUBGRF_Init+0x8c>)
 800a43a:	2201      	movs	r2, #1
 800a43c:	701a      	strb	r2, [r3, #0]
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000b28 	.word	0x20000b28
 800a44c:	20000b24 	.word	0x20000b24
 800a450:	20000b1c 	.word	0x20000b1c

0800a454 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a454:	b480      	push	{r7}
 800a456:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a458:	4b02      	ldr	r3, [pc, #8]	@ (800a464 <SUBGRF_GetOperatingMode+0x10>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	bc80      	pop	{r7}
 800a462:	4770      	bx	lr
 800a464:	20000b1c 	.word	0x20000b1c

0800a468 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	461a      	mov	r2, r3
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	2000      	movs	r0, #0
 800a47c:	f000 ff24 	bl	800b2c8 <SUBGRF_WriteBuffer>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a49a:	f107 0317 	add.w	r3, r7, #23
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68b8      	ldr	r0, [r7, #8]
 800a4a2:	f000 fe27 	bl	800b0f4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	79fa      	ldrb	r2, [r7, #7]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d201      	bcs.n	800a4b4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e007      	b.n	800a4c4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a4b4:	7df8      	ldrb	r0, [r7, #23]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	68f9      	ldr	r1, [r7, #12]
 800a4be:	f000 ff25 	bl	800b30c <SUBGRF_ReadBuffer>

    return 0;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a4da:	7afb      	ldrb	r3, [r7, #11]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7ff ffc2 	bl	800a468 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f91b 	bl	800a720 <SUBGRF_SetTx>
}
 800a4ea:	bf00      	nop
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a4fa:	2208      	movs	r2, #8
 800a4fc:	6879      	ldr	r1, [r7, #4]
 800a4fe:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800a502:	f000 fe9d 	bl	800b240 <SUBGRF_WriteRegisters>
    return 0;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	4603      	mov	r3, r0
 800a518:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	0a1b      	lsrs	r3, r3, #8
 800a51e:	b29b      	uxth	r3, r3
 800a520:	b2db      	uxtb	r3, r3
 800a522:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a524:	88fb      	ldrh	r3, [r7, #6]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a52a:	f000 fb6f 	bl	800ac0c <SUBGRF_GetPacketType>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d108      	bne.n	800a546 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a534:	f107 030c 	add.w	r3, r7, #12
 800a538:	2202      	movs	r2, #2
 800a53a:	4619      	mov	r1, r3
 800a53c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800a540:	f000 fe7e 	bl	800b240 <SUBGRF_WriteRegisters>
            break;
 800a544:	e000      	b.n	800a548 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a546:	bf00      	nop
    }
}
 800a548:	bf00      	nop
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a55a:	88fb      	ldrh	r3, [r7, #6]
 800a55c:	0a1b      	lsrs	r3, r3, #8
 800a55e:	b29b      	uxth	r3, r3
 800a560:	b2db      	uxtb	r3, r3
 800a562:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a564:	88fb      	ldrh	r3, [r7, #6]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a56a:	f000 fb4f 	bl	800ac0c <SUBGRF_GetPacketType>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d108      	bne.n	800a586 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	2202      	movs	r2, #2
 800a57a:	4619      	mov	r1, r3
 800a57c:	f240 60be 	movw	r0, #1726	@ 0x6be
 800a580:	f000 fe5e 	bl	800b240 <SUBGRF_WriteRegisters>
            break;
 800a584:	e000      	b.n	800a588 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a586:	bf00      	nop
    }
}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a59e:	f000 fb35 	bl	800ac0c <SUBGRF_GetPacketType>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d121      	bne.n	800a5ec <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a5a8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a5ac:	f000 fe34 	bl	800b218 <SUBGRF_ReadRegister>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	f023 0301 	bic.w	r3, r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a5b8:	88fb      	ldrh	r3, [r7, #6]
 800a5ba:	0a1b      	lsrs	r3, r3, #8
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	b25b      	sxtb	r3, r3
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	b25a      	sxtb	r2, r3
 800a5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	b25b      	sxtb	r3, r3
 800a5ce:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a5d8:	f000 fe0a 	bl	800b1f0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a5dc:	88fb      	ldrh	r3, [r7, #6]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800a5e6:	f000 fe03 	bl	800b1f0 <SUBGRF_WriteRegister>
            break;
 800a5ea:	e000      	b.n	800a5ee <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a5ec:	bf00      	nop
    }
}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a608:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a60c:	f000 fe04 	bl	800b218 <SUBGRF_ReadRegister>
 800a610:	4603      	mov	r3, r0
 800a612:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	f023 0301 	bic.w	r3, r3, #1
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	4619      	mov	r1, r3
 800a61e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a622:	f000 fde5 	bl	800b1f0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a626:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a62a:	f000 fdf5 	bl	800b218 <SUBGRF_ReadRegister>
 800a62e:	4603      	mov	r3, r0
 800a630:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a632:	79bb      	ldrb	r3, [r7, #6]
 800a634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	4619      	mov	r1, r3
 800a63c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a640:	f000 fdd6 	bl	800b1f0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a644:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a648:	f000 f88a 	bl	800a760 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a64c:	463b      	mov	r3, r7
 800a64e:	2204      	movs	r2, #4
 800a650:	4619      	mov	r1, r3
 800a652:	f640 0019 	movw	r0, #2073	@ 0x819
 800a656:	f000 fe15 	bl	800b284 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a65a:	2000      	movs	r0, #0
 800a65c:	f000 f844 	bl	800a6e8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	4619      	mov	r1, r3
 800a664:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a668:	f000 fdc2 	bl	800b1f0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a66c:	79bb      	ldrb	r3, [r7, #6]
 800a66e:	4619      	mov	r1, r3
 800a670:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a674:	f000 fdbc 	bl	800b1f0 <SUBGRF_WriteRegister>

    return number;
 800a678:	683b      	ldr	r3, [r7, #0]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a68c:	2000      	movs	r0, #0
 800a68e:	f001 f999 	bl	800b9c4 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a692:	2002      	movs	r0, #2
 800a694:	f000 ffa4 	bl	800b5e0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a698:	793b      	ldrb	r3, [r7, #4]
 800a69a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a6a4:	793b      	ldrb	r3, [r7, #4]
 800a6a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a6b4:	793b      	ldrb	r3, [r7, #4]
 800a6b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	b25b      	sxtb	r3, r3
 800a6c2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a6c4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a6c6:	f107 030f 	add.w	r3, r7, #15
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	2084      	movs	r0, #132	@ 0x84
 800a6d0:	f000 fe3e 	bl	800b350 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a6d4:	4b03      	ldr	r3, [pc, #12]	@ (800a6e4 <SUBGRF_SetSleep+0x60>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	701a      	strb	r2, [r3, #0]
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000b1c 	.word	0x20000b1c

0800a6e8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a6f2:	1dfb      	adds	r3, r7, #7
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	2080      	movs	r0, #128	@ 0x80
 800a6fa:	f000 fe29 	bl	800b350 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d103      	bne.n	800a70c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a704:	4b05      	ldr	r3, [pc, #20]	@ (800a71c <SUBGRF_SetStandby+0x34>)
 800a706:	2201      	movs	r2, #1
 800a708:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a70a:	e002      	b.n	800a712 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a70c:	4b03      	ldr	r3, [pc, #12]	@ (800a71c <SUBGRF_SetStandby+0x34>)
 800a70e:	2202      	movs	r2, #2
 800a710:	701a      	strb	r2, [r3, #0]
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000b1c 	.word	0x20000b1c

0800a720 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a728:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <SUBGRF_SetTx+0x3c>)
 800a72a:	2204      	movs	r2, #4
 800a72c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0c1b      	lsrs	r3, r3, #16
 800a732:	b2db      	uxtb	r3, r3
 800a734:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	0a1b      	lsrs	r3, r3, #8
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	b2db      	uxtb	r3, r3
 800a742:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a744:	f107 030c 	add.w	r3, r7, #12
 800a748:	2203      	movs	r2, #3
 800a74a:	4619      	mov	r1, r3
 800a74c:	2083      	movs	r0, #131	@ 0x83
 800a74e:	f000 fdff 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a752:	bf00      	nop
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000b1c 	.word	0x20000b1c

0800a760 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a768:	4b0c      	ldr	r3, [pc, #48]	@ (800a79c <SUBGRF_SetRx+0x3c>)
 800a76a:	2205      	movs	r2, #5
 800a76c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	0c1b      	lsrs	r3, r3, #16
 800a772:	b2db      	uxtb	r3, r3
 800a774:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	0a1b      	lsrs	r3, r3, #8
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a784:	f107 030c 	add.w	r3, r7, #12
 800a788:	2203      	movs	r2, #3
 800a78a:	4619      	mov	r1, r3
 800a78c:	2082      	movs	r0, #130	@ 0x82
 800a78e:	f000 fddf 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000b1c 	.word	0x20000b1c

0800a7a0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e4 <SUBGRF_SetRxBoosted+0x44>)
 800a7aa:	2205      	movs	r2, #5
 800a7ac:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a7ae:	2197      	movs	r1, #151	@ 0x97
 800a7b0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800a7b4:	f000 fd1c 	bl	800b1f0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	0c1b      	lsrs	r3, r3, #16
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	0a1b      	lsrs	r3, r3, #8
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a7ce:	f107 030c 	add.w	r3, r7, #12
 800a7d2:	2203      	movs	r2, #3
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	2082      	movs	r0, #130	@ 0x82
 800a7d8:	f000 fdba 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20000b1c 	.word	0x20000b1c

0800a7e8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	0c1b      	lsrs	r3, r3, #16
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	0a1b      	lsrs	r3, r3, #8
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	0c1b      	lsrs	r3, r3, #16
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	0a1b      	lsrs	r3, r3, #8
 800a814:	b2db      	uxtb	r3, r3
 800a816:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a81e:	f107 0308 	add.w	r3, r7, #8
 800a822:	2206      	movs	r2, #6
 800a824:	4619      	mov	r1, r3
 800a826:	2094      	movs	r0, #148	@ 0x94
 800a828:	f000 fd92 	bl	800b350 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a82c:	4b03      	ldr	r3, [pc, #12]	@ (800a83c <SUBGRF_SetRxDutyCycle+0x54>)
 800a82e:	2206      	movs	r2, #6
 800a830:	701a      	strb	r2, [r3, #0]
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000b1c 	.word	0x20000b1c

0800a840 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a844:	2200      	movs	r2, #0
 800a846:	2100      	movs	r1, #0
 800a848:	20c5      	movs	r0, #197	@ 0xc5
 800a84a:	f000 fd81 	bl	800b350 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a84e:	4b02      	ldr	r3, [pc, #8]	@ (800a858 <SUBGRF_SetCad+0x18>)
 800a850:	2207      	movs	r2, #7
 800a852:	701a      	strb	r2, [r3, #0]
}
 800a854:	bf00      	nop
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000b1c 	.word	0x20000b1c

0800a85c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a860:	2200      	movs	r2, #0
 800a862:	2100      	movs	r1, #0
 800a864:	20d1      	movs	r0, #209	@ 0xd1
 800a866:	f000 fd73 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a86a:	bf00      	nop
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a872:	2200      	movs	r2, #0
 800a874:	2100      	movs	r1, #0
 800a876:	20d2      	movs	r0, #210	@ 0xd2
 800a878:	f000 fd6a 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a87c:	bf00      	nop
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a88a:	1dfb      	adds	r3, r7, #7
 800a88c:	2201      	movs	r2, #1
 800a88e:	4619      	mov	r1, r3
 800a890:	209f      	movs	r0, #159	@ 0x9f
 800a892:	f000 fd5d 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a8a8:	1dfb      	adds	r3, r7, #7
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	20a0      	movs	r0, #160	@ 0xa0
 800a8b0:	f000 fd4e 	bl	800b350 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a8b8:	d91c      	bls.n	800a8f4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	085b      	lsrs	r3, r3, #1
 800a8be:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a8c8:	e005      	b.n	800a8d6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	089b      	lsrs	r3, r3, #2
 800a8ce:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b1f      	cmp	r3, #31
 800a8da:	d8f6      	bhi.n	800a8ca <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a8e8:	7b7b      	ldrb	r3, [r7, #13]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	f240 7006 	movw	r0, #1798	@ 0x706
 800a8f0:	f000 fc7e 	bl	800b1f0 <SUBGRF_WriteRegister>
    }
}
 800a8f4:	bf00      	nop
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a902:	f001 f8bf 	bl	800ba84 <RBI_IsDCDC>
 800a906:	4603      	mov	r3, r0
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d102      	bne.n	800a912 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a90c:	2301      	movs	r3, #1
 800a90e:	71fb      	strb	r3, [r7, #7]
 800a910:	e001      	b.n	800a916 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a912:	2300      	movs	r3, #0
 800a914:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a916:	1dfb      	adds	r3, r7, #7
 800a918:	2201      	movs	r2, #1
 800a91a:	4619      	mov	r1, r3
 800a91c:	2096      	movs	r0, #150	@ 0x96
 800a91e:	f000 fd17 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a932:	793b      	ldrb	r3, [r7, #4]
 800a934:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	019b      	lsls	r3, r3, #6
 800a93c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a93e:	793b      	ldrb	r3, [r7, #4]
 800a940:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a944:	b2db      	uxtb	r3, r3
 800a946:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a948:	b25b      	sxtb	r3, r3
 800a94a:	4313      	orrs	r3, r2
 800a94c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a94e:	793b      	ldrb	r3, [r7, #4]
 800a950:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a954:	b2db      	uxtb	r3, r3
 800a956:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a958:	b25b      	sxtb	r3, r3
 800a95a:	4313      	orrs	r3, r2
 800a95c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a95e:	793b      	ldrb	r3, [r7, #4]
 800a960:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a964:	b2db      	uxtb	r3, r3
 800a966:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a968:	b25b      	sxtb	r3, r3
 800a96a:	4313      	orrs	r3, r2
 800a96c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a96e:	793b      	ldrb	r3, [r7, #4]
 800a970:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a974:	b2db      	uxtb	r3, r3
 800a976:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a978:	b25b      	sxtb	r3, r3
 800a97a:	4313      	orrs	r3, r2
 800a97c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a97e:	793b      	ldrb	r3, [r7, #4]
 800a980:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a984:	b2db      	uxtb	r3, r3
 800a986:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a988:	b25b      	sxtb	r3, r3
 800a98a:	4313      	orrs	r3, r2
 800a98c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a98e:	793b      	ldrb	r3, [r7, #4]
 800a990:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a994:	b2db      	uxtb	r3, r3
 800a996:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a998:	4313      	orrs	r3, r2
 800a99a:	b25b      	sxtb	r3, r3
 800a99c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a99e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a9a0:	f107 030f 	add.w	r3, r7, #15
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	2089      	movs	r0, #137	@ 0x89
 800a9aa:	f000 fcd1 	bl	800b350 <SUBGRF_WriteCommand>
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a1d      	ldr	r2, [pc, #116]	@ (800aa38 <SUBGRF_CalibrateImage+0x80>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d904      	bls.n	800a9d2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a9c8:	23e1      	movs	r3, #225	@ 0xe1
 800a9ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a9cc:	23e9      	movs	r3, #233	@ 0xe9
 800a9ce:	737b      	strb	r3, [r7, #13]
 800a9d0:	e027      	b.n	800aa22 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a19      	ldr	r2, [pc, #100]	@ (800aa3c <SUBGRF_CalibrateImage+0x84>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d904      	bls.n	800a9e4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a9da:	23d7      	movs	r3, #215	@ 0xd7
 800a9dc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a9de:	23db      	movs	r3, #219	@ 0xdb
 800a9e0:	737b      	strb	r3, [r7, #13]
 800a9e2:	e01e      	b.n	800aa22 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a16      	ldr	r2, [pc, #88]	@ (800aa40 <SUBGRF_CalibrateImage+0x88>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d904      	bls.n	800a9f6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a9ec:	23c1      	movs	r3, #193	@ 0xc1
 800a9ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a9f0:	23c5      	movs	r3, #197	@ 0xc5
 800a9f2:	737b      	strb	r3, [r7, #13]
 800a9f4:	e015      	b.n	800aa22 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a12      	ldr	r2, [pc, #72]	@ (800aa44 <SUBGRF_CalibrateImage+0x8c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d904      	bls.n	800aa08 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a9fe:	2375      	movs	r3, #117	@ 0x75
 800aa00:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800aa02:	2381      	movs	r3, #129	@ 0x81
 800aa04:	737b      	strb	r3, [r7, #13]
 800aa06:	e00c      	b.n	800aa22 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a0f      	ldr	r2, [pc, #60]	@ (800aa48 <SUBGRF_CalibrateImage+0x90>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d904      	bls.n	800aa1a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800aa10:	236b      	movs	r3, #107	@ 0x6b
 800aa12:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800aa14:	236f      	movs	r3, #111	@ 0x6f
 800aa16:	737b      	strb	r3, [r7, #13]
 800aa18:	e003      	b.n	800aa22 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800aa1a:	2329      	movs	r3, #41	@ 0x29
 800aa1c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800aa1e:	232b      	movs	r3, #43	@ 0x2b
 800aa20:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800aa22:	f107 030c 	add.w	r3, r7, #12
 800aa26:	2202      	movs	r2, #2
 800aa28:	4619      	mov	r1, r3
 800aa2a:	2098      	movs	r0, #152	@ 0x98
 800aa2c:	f000 fc90 	bl	800b350 <SUBGRF_WriteCommand>
}
 800aa30:	bf00      	nop
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	35a4e900 	.word	0x35a4e900
 800aa3c:	32a9f880 	.word	0x32a9f880
 800aa40:	2de54480 	.word	0x2de54480
 800aa44:	1b6b0b00 	.word	0x1b6b0b00
 800aa48:	1954fc40 	.word	0x1954fc40

0800aa4c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800aa4c:	b590      	push	{r4, r7, lr}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	4611      	mov	r1, r2
 800aa58:	461a      	mov	r2, r3
 800aa5a:	4623      	mov	r3, r4
 800aa5c:	71fb      	strb	r3, [r7, #7]
 800aa5e:	4603      	mov	r3, r0
 800aa60:	71bb      	strb	r3, [r7, #6]
 800aa62:	460b      	mov	r3, r1
 800aa64:	717b      	strb	r3, [r7, #5]
 800aa66:	4613      	mov	r3, r2
 800aa68:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800aa6e:	79bb      	ldrb	r3, [r7, #6]
 800aa70:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800aa72:	797b      	ldrb	r3, [r7, #5]
 800aa74:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800aa76:	793b      	ldrb	r3, [r7, #4]
 800aa78:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800aa7a:	f107 030c 	add.w	r3, r7, #12
 800aa7e:	2204      	movs	r2, #4
 800aa80:	4619      	mov	r1, r3
 800aa82:	2095      	movs	r0, #149	@ 0x95
 800aa84:	f000 fc64 	bl	800b350 <SUBGRF_WriteCommand>
}
 800aa88:	bf00      	nop
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd90      	pop	{r4, r7, pc}

0800aa90 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800aa90:	b590      	push	{r4, r7, lr}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4623      	mov	r3, r4
 800aaa0:	80fb      	strh	r3, [r7, #6]
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	80bb      	strh	r3, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	807b      	strh	r3, [r7, #2]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800aaae:	88fb      	ldrh	r3, [r7, #6]
 800aab0:	0a1b      	lsrs	r3, r3, #8
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800aab8:	88fb      	ldrh	r3, [r7, #6]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800aabe:	88bb      	ldrh	r3, [r7, #4]
 800aac0:	0a1b      	lsrs	r3, r3, #8
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800aac8:	88bb      	ldrh	r3, [r7, #4]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800aace:	887b      	ldrh	r3, [r7, #2]
 800aad0:	0a1b      	lsrs	r3, r3, #8
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800aad8:	887b      	ldrh	r3, [r7, #2]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800aade:	883b      	ldrh	r3, [r7, #0]
 800aae0:	0a1b      	lsrs	r3, r3, #8
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800aae8:	883b      	ldrh	r3, [r7, #0]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800aaee:	f107 0308 	add.w	r3, r7, #8
 800aaf2:	2208      	movs	r2, #8
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	2008      	movs	r0, #8
 800aaf8:	f000 fc2a 	bl	800b350 <SUBGRF_WriteCommand>
}
 800aafc:	bf00      	nop
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd90      	pop	{r4, r7, pc}

0800ab04 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800ab10:	79fb      	ldrb	r3, [r7, #7]
 800ab12:	f003 0307 	and.w	r3, r3, #7
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	0c1b      	lsrs	r3, r3, #16
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	0a1b      	lsrs	r3, r3, #8
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800ab30:	f107 030c 	add.w	r3, r7, #12
 800ab34:	2204      	movs	r2, #4
 800ab36:	4619      	mov	r1, r3
 800ab38:	2097      	movs	r0, #151	@ 0x97
 800ab3a:	f000 fc09 	bl	800b350 <SUBGRF_WriteCommand>
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800ab48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800ab56:	4b1d      	ldr	r3, [pc, #116]	@ (800abcc <SUBGRF_SetRfFrequency+0x84>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	f083 0301 	eor.w	r3, r3, #1
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d005      	beq.n	800ab70 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ff27 	bl	800a9b8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800ab6a:	4b18      	ldr	r3, [pc, #96]	@ (800abcc <SUBGRF_SetRfFrequency+0x84>)
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	461c      	mov	r4, r3
 800ab76:	4615      	mov	r5, r2
 800ab78:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800ab7c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800ab80:	4a13      	ldr	r2, [pc, #76]	@ (800abd0 <SUBGRF_SetRfFrequency+0x88>)
 800ab82:	f04f 0300 	mov.w	r3, #0
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 fb49 	bl	8000220 <__aeabi_uldivmod>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4613      	mov	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	0e1b      	lsrs	r3, r3, #24
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	0c1b      	lsrs	r3, r3, #16
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	0a1b      	lsrs	r3, r3, #8
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800abb4:	f107 0308 	add.w	r3, r7, #8
 800abb8:	2204      	movs	r2, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	2086      	movs	r0, #134	@ 0x86
 800abbe:	f000 fbc7 	bl	800b350 <SUBGRF_WriteCommand>
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800abcc:	20000b24 	.word	0x20000b24
 800abd0:	01e84800 	.word	0x01e84800

0800abd4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800abde:	79fa      	ldrb	r2, [r7, #7]
 800abe0:	4b09      	ldr	r3, [pc, #36]	@ (800ac08 <SUBGRF_SetPacketType+0x34>)
 800abe2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800abe4:	79fb      	ldrb	r3, [r7, #7]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d104      	bne.n	800abf4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800abea:	2100      	movs	r1, #0
 800abec:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800abf0:	f000 fafe 	bl	800b1f0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800abf4:	1dfb      	adds	r3, r7, #7
 800abf6:	2201      	movs	r2, #1
 800abf8:	4619      	mov	r1, r3
 800abfa:	208a      	movs	r0, #138	@ 0x8a
 800abfc:	f000 fba8 	bl	800b350 <SUBGRF_WriteCommand>
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20000b1d 	.word	0x20000b1d

0800ac0c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
    return PacketType;
 800ac10:	4b02      	ldr	r3, [pc, #8]	@ (800ac1c <SUBGRF_GetPacketType+0x10>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bc80      	pop	{r7}
 800ac1a:	4770      	bx	lr
 800ac1c:	20000b1d 	.word	0x20000b1d

0800ac20 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	71fb      	strb	r3, [r7, #7]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	71bb      	strb	r3, [r7, #6]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d149      	bne.n	800accc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f000 ff2e 	bl	800ba9a <RBI_GetRFOMaxPowerConfig>
 800ac3e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800ac40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	da01      	bge.n	800ac4e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b0e      	cmp	r3, #14
 800ac52:	d10e      	bne.n	800ac72 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800ac54:	2301      	movs	r3, #1
 800ac56:	2201      	movs	r2, #1
 800ac58:	2100      	movs	r1, #0
 800ac5a:	2004      	movs	r0, #4
 800ac5c:	f7ff fef6 	bl	800aa4c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ac60:	79ba      	ldrb	r2, [r7, #6]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	330e      	adds	r3, #14
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	71bb      	strb	r3, [r7, #6]
 800ac70:	e01f      	b.n	800acb2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b0a      	cmp	r3, #10
 800ac76:	d10e      	bne.n	800ac96 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800ac78:	2301      	movs	r3, #1
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	2001      	movs	r0, #1
 800ac80:	f7ff fee4 	bl	800aa4c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800ac84:	79ba      	ldrb	r2, [r7, #6]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	330d      	adds	r3, #13
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	71bb      	strb	r3, [r7, #6]
 800ac94:	e00d      	b.n	800acb2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800ac96:	2301      	movs	r3, #1
 800ac98:	2201      	movs	r2, #1
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	2007      	movs	r0, #7
 800ac9e:	f7ff fed5 	bl	800aa4c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800aca2:	79ba      	ldrb	r2, [r7, #6]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	330e      	adds	r3, #14
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800acb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800acb6:	f113 0f11 	cmn.w	r3, #17
 800acba:	da01      	bge.n	800acc0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800acbc:	23ef      	movs	r3, #239	@ 0xef
 800acbe:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800acc0:	2118      	movs	r1, #24
 800acc2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800acc6:	f000 fa93 	bl	800b1f0 <SUBGRF_WriteRegister>
 800acca:	e067      	b.n	800ad9c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800accc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800acd0:	f000 faa2 	bl	800b218 <SUBGRF_ReadRegister>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f043 031e 	orr.w	r3, r3, #30
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	4619      	mov	r1, r3
 800acde:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800ace2:	f000 fa85 	bl	800b1f0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800ace6:	2001      	movs	r0, #1
 800ace8:	f000 fed7 	bl	800ba9a <RBI_GetRFOMaxPowerConfig>
 800acec:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800acee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	da01      	bge.n	800acfc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b14      	cmp	r3, #20
 800ad00:	d10e      	bne.n	800ad20 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800ad02:	2301      	movs	r3, #1
 800ad04:	2200      	movs	r2, #0
 800ad06:	2105      	movs	r1, #5
 800ad08:	2003      	movs	r0, #3
 800ad0a:	f7ff fe9f 	bl	800aa4c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad0e:	79ba      	ldrb	r2, [r7, #6]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	3316      	adds	r3, #22
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	71bb      	strb	r3, [r7, #6]
 800ad1e:	e031      	b.n	800ad84 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b11      	cmp	r3, #17
 800ad24:	d10e      	bne.n	800ad44 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800ad26:	2301      	movs	r3, #1
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2103      	movs	r1, #3
 800ad2c:	2002      	movs	r0, #2
 800ad2e:	f7ff fe8d 	bl	800aa4c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad32:	79ba      	ldrb	r2, [r7, #6]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	3316      	adds	r3, #22
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	71bb      	strb	r3, [r7, #6]
 800ad42:	e01f      	b.n	800ad84 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b0e      	cmp	r3, #14
 800ad48:	d10e      	bne.n	800ad68 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	2102      	movs	r1, #2
 800ad50:	2002      	movs	r0, #2
 800ad52:	f7ff fe7b 	bl	800aa4c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ad56:	79ba      	ldrb	r2, [r7, #6]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	330e      	adds	r3, #14
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	71bb      	strb	r3, [r7, #6]
 800ad66:	e00d      	b.n	800ad84 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800ad68:	2301      	movs	r3, #1
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2107      	movs	r1, #7
 800ad6e:	2004      	movs	r0, #4
 800ad70:	f7ff fe6c 	bl	800aa4c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad74:	79ba      	ldrb	r2, [r7, #6]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	3316      	adds	r3, #22
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800ad84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ad88:	f113 0f09 	cmn.w	r3, #9
 800ad8c:	da01      	bge.n	800ad92 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800ad8e:	23f7      	movs	r3, #247	@ 0xf7
 800ad90:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800ad92:	2138      	movs	r1, #56	@ 0x38
 800ad94:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800ad98:	f000 fa2a 	bl	800b1f0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800ad9c:	79bb      	ldrb	r3, [r7, #6]
 800ad9e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800ada0:	797b      	ldrb	r3, [r7, #5]
 800ada2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800ada4:	f107 0308 	add.w	r3, r7, #8
 800ada8:	2202      	movs	r2, #2
 800adaa:	4619      	mov	r1, r3
 800adac:	208e      	movs	r0, #142	@ 0x8e
 800adae:	f000 facf 	bl	800b350 <SUBGRF_WriteCommand>
}
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800adbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800adca:	4a61      	ldr	r2, [pc, #388]	@ (800af50 <SUBGRF_SetModulationParams+0x194>)
 800adcc:	f107 0308 	add.w	r3, r7, #8
 800add0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800add4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	4b5d      	ldr	r3, [pc, #372]	@ (800af54 <SUBGRF_SetModulationParams+0x198>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d004      	beq.n	800adee <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fef3 	bl	800abd4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	f200 80a5 	bhi.w	800af42 <SUBGRF_SetModulationParams+0x186>
 800adf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <SUBGRF_SetModulationParams+0x44>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae11 	.word	0x0800ae11
 800ae04:	0800aed1 	.word	0x0800aed1
 800ae08:	0800ae93 	.word	0x0800ae93
 800ae0c:	0800aeff 	.word	0x0800aeff
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800ae10:	2308      	movs	r3, #8
 800ae12:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4a4f      	ldr	r2, [pc, #316]	@ (800af58 <SUBGRF_SetModulationParams+0x19c>)
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	0a1b      	lsrs	r3, r3, #8
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7b1b      	ldrb	r3, [r3, #12]
 800ae3a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7b5b      	ldrb	r3, [r3, #13]
 800ae40:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2200      	movs	r2, #0
 800ae48:	461c      	mov	r4, r3
 800ae4a:	4615      	mov	r5, r2
 800ae4c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800ae50:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800ae54:	4a41      	ldr	r2, [pc, #260]	@ (800af5c <SUBGRF_SetModulationParams+0x1a0>)
 800ae56:	f04f 0300 	mov.w	r3, #0
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	f7f5 f9df 	bl	8000220 <__aeabi_uldivmod>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4613      	mov	r3, r2
 800ae68:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	0a1b      	lsrs	r3, r3, #8
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ae80:	7cfb      	ldrb	r3, [r7, #19]
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	f107 0308 	add.w	r3, r7, #8
 800ae88:	4619      	mov	r1, r3
 800ae8a:	208b      	movs	r0, #139	@ 0x8b
 800ae8c:	f000 fa60 	bl	800b350 <SUBGRF_WriteCommand>
        break;
 800ae90:	e058      	b.n	800af44 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800ae92:	2304      	movs	r3, #4
 800ae94:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	4a2f      	ldr	r2, [pc, #188]	@ (800af58 <SUBGRF_SetModulationParams+0x19c>)
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	0c1b      	lsrs	r3, r3, #16
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	0a1b      	lsrs	r3, r3, #8
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	7d1b      	ldrb	r3, [r3, #20]
 800aebc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aebe:	7cfb      	ldrb	r3, [r7, #19]
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	f107 0308 	add.w	r3, r7, #8
 800aec6:	4619      	mov	r1, r3
 800aec8:	208b      	movs	r0, #139	@ 0x8b
 800aeca:	f000 fa41 	bl	800b350 <SUBGRF_WriteCommand>
        break;
 800aece:	e039      	b.n	800af44 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800aed0:	2304      	movs	r3, #4
 800aed2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7e1b      	ldrb	r3, [r3, #24]
 800aed8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7e5b      	ldrb	r3, [r3, #25]
 800aede:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	7e9b      	ldrb	r3, [r3, #26]
 800aee4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	7edb      	ldrb	r3, [r3, #27]
 800aeea:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aeec:	7cfb      	ldrb	r3, [r7, #19]
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	4619      	mov	r1, r3
 800aef6:	208b      	movs	r0, #139	@ 0x8b
 800aef8:	f000 fa2a 	bl	800b350 <SUBGRF_WriteCommand>

        break;
 800aefc:	e022      	b.n	800af44 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800aefe:	2305      	movs	r3, #5
 800af00:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	4a14      	ldr	r2, [pc, #80]	@ (800af58 <SUBGRF_SetModulationParams+0x19c>)
 800af08:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	0c1b      	lsrs	r3, r3, #16
 800af12:	b2db      	uxtb	r3, r3
 800af14:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	0a1b      	lsrs	r3, r3, #8
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7b1b      	ldrb	r3, [r3, #12]
 800af28:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	7b5b      	ldrb	r3, [r3, #13]
 800af2e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800af30:	7cfb      	ldrb	r3, [r7, #19]
 800af32:	b29a      	uxth	r2, r3
 800af34:	f107 0308 	add.w	r3, r7, #8
 800af38:	4619      	mov	r1, r3
 800af3a:	208b      	movs	r0, #139	@ 0x8b
 800af3c:	f000 fa08 	bl	800b350 <SUBGRF_WriteCommand>
        break;
 800af40:	e000      	b.n	800af44 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800af42:	bf00      	nop
    }
}
 800af44:	bf00      	nop
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800af4e:	bf00      	nop
 800af50:	0800d0c4 	.word	0x0800d0c4
 800af54:	20000b1d 	.word	0x20000b1d
 800af58:	3d090000 	.word	0x3d090000
 800af5c:	01e84800 	.word	0x01e84800

0800af60 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800af6c:	4a48      	ldr	r2, [pc, #288]	@ (800b090 <SUBGRF_SetPacketParams+0x130>)
 800af6e:	f107 030c 	add.w	r3, r7, #12
 800af72:	ca07      	ldmia	r2, {r0, r1, r2}
 800af74:	c303      	stmia	r3!, {r0, r1}
 800af76:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	4b45      	ldr	r3, [pc, #276]	@ (800b094 <SUBGRF_SetPacketParams+0x134>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d004      	beq.n	800af8e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fe23 	bl	800abd4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b03      	cmp	r3, #3
 800af94:	d878      	bhi.n	800b088 <SUBGRF_SetPacketParams+0x128>
 800af96:	a201      	add	r2, pc, #4	@ (adr r2, 800af9c <SUBGRF_SetPacketParams+0x3c>)
 800af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9c:	0800afad 	.word	0x0800afad
 800afa0:	0800b03d 	.word	0x0800b03d
 800afa4:	0800b031 	.word	0x0800b031
 800afa8:	0800afad 	.word	0x0800afad
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7a5b      	ldrb	r3, [r3, #9]
 800afb0:	2bf1      	cmp	r3, #241	@ 0xf1
 800afb2:	d10a      	bne.n	800afca <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800afb4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800afb8:	f7ff faaa 	bl	800a510 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800afbc:	f248 0005 	movw	r0, #32773	@ 0x8005
 800afc0:	f7ff fac6 	bl	800a550 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800afc4:	2302      	movs	r3, #2
 800afc6:	75bb      	strb	r3, [r7, #22]
 800afc8:	e011      	b.n	800afee <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	7a5b      	ldrb	r3, [r3, #9]
 800afce:	2bf2      	cmp	r3, #242	@ 0xf2
 800afd0:	d10a      	bne.n	800afe8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800afd2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800afd6:	f7ff fa9b 	bl	800a510 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800afda:	f241 0021 	movw	r0, #4129	@ 0x1021
 800afde:	f7ff fab7 	bl	800a550 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800afe2:	2306      	movs	r3, #6
 800afe4:	75bb      	strb	r3, [r7, #22]
 800afe6:	e002      	b.n	800afee <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	7a5b      	ldrb	r3, [r3, #9]
 800afec:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800afee:	2309      	movs	r3, #9
 800aff0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	885b      	ldrh	r3, [r3, #2]
 800aff6:	0a1b      	lsrs	r3, r3, #8
 800aff8:	b29b      	uxth	r3, r3
 800affa:	b2db      	uxtb	r3, r3
 800affc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	885b      	ldrh	r3, [r3, #2]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	791b      	ldrb	r3, [r3, #4]
 800b00a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	795b      	ldrb	r3, [r3, #5]
 800b010:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	799b      	ldrb	r3, [r3, #6]
 800b016:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	79db      	ldrb	r3, [r3, #7]
 800b01c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	7a1b      	ldrb	r3, [r3, #8]
 800b022:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b024:	7dbb      	ldrb	r3, [r7, #22]
 800b026:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7a9b      	ldrb	r3, [r3, #10]
 800b02c:	753b      	strb	r3, [r7, #20]
        break;
 800b02e:	e022      	b.n	800b076 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b030:	2301      	movs	r3, #1
 800b032:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	7b1b      	ldrb	r3, [r3, #12]
 800b038:	733b      	strb	r3, [r7, #12]
        break;
 800b03a:	e01c      	b.n	800b076 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b03c:	2306      	movs	r3, #6
 800b03e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	89db      	ldrh	r3, [r3, #14]
 800b044:	0a1b      	lsrs	r3, r3, #8
 800b046:	b29b      	uxth	r3, r3
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	89db      	ldrh	r3, [r3, #14]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	7c1a      	ldrb	r2, [r3, #16]
 800b058:	4b0f      	ldr	r3, [pc, #60]	@ (800b098 <SUBGRF_SetPacketParams+0x138>)
 800b05a:	4611      	mov	r1, r2
 800b05c:	7019      	strb	r1, [r3, #0]
 800b05e:	4613      	mov	r3, r2
 800b060:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	7c5b      	ldrb	r3, [r3, #17]
 800b066:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7c9b      	ldrb	r3, [r3, #18]
 800b06c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	7cdb      	ldrb	r3, [r3, #19]
 800b072:	747b      	strb	r3, [r7, #17]
        break;
 800b074:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	b29a      	uxth	r2, r3
 800b07a:	f107 030c 	add.w	r3, r7, #12
 800b07e:	4619      	mov	r1, r3
 800b080:	208c      	movs	r0, #140	@ 0x8c
 800b082:	f000 f965 	bl	800b350 <SUBGRF_WriteCommand>
 800b086:	e000      	b.n	800b08a <SUBGRF_SetPacketParams+0x12a>
        return;
 800b088:	bf00      	nop
}
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	0800d0cc 	.word	0x0800d0cc
 800b094:	20000b1d 	.word	0x20000b1d
 800b098:	20000b1e 	.word	0x20000b1e

0800b09c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	460a      	mov	r2, r1
 800b0a6:	71fb      	strb	r3, [r7, #7]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b0b0:	79bb      	ldrb	r3, [r7, #6]
 800b0b2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b0b4:	f107 030c 	add.w	r3, r7, #12
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	208f      	movs	r0, #143	@ 0x8f
 800b0be:	f000 f947 	bl	800b350 <SUBGRF_WriteCommand>
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b0d4:	1d3b      	adds	r3, r7, #4
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	4619      	mov	r1, r3
 800b0da:	2015      	movs	r0, #21
 800b0dc:	f000 f95a 	bl	800b394 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b0e0:	793b      	ldrb	r3, [r7, #4]
 800b0e2:	425b      	negs	r3, r3
 800b0e4:	105b      	asrs	r3, r3, #1
 800b0e6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b0e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b0fe:	f107 030c 	add.w	r3, r7, #12
 800b102:	2202      	movs	r2, #2
 800b104:	4619      	mov	r1, r3
 800b106:	2013      	movs	r0, #19
 800b108:	f000 f944 	bl	800b394 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b10c:	f7ff fd7e 	bl	800ac0c <SUBGRF_GetPacketType>
 800b110:	4603      	mov	r3, r0
 800b112:	2b01      	cmp	r3, #1
 800b114:	d10d      	bne.n	800b132 <SUBGRF_GetRxBufferStatus+0x3e>
 800b116:	4b0c      	ldr	r3, [pc, #48]	@ (800b148 <SUBGRF_GetRxBufferStatus+0x54>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d108      	bne.n	800b132 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800b120:	f240 7002 	movw	r0, #1794	@ 0x702
 800b124:	f000 f878 	bl	800b218 <SUBGRF_ReadRegister>
 800b128:	4603      	mov	r3, r0
 800b12a:	461a      	mov	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	e002      	b.n	800b138 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800b132:	7b3a      	ldrb	r2, [r7, #12]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800b138:	7b7a      	ldrb	r2, [r7, #13]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	701a      	strb	r2, [r3, #0]
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20000b1e 	.word	0x20000b1e

0800b14c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b154:	f107 030c 	add.w	r3, r7, #12
 800b158:	2203      	movs	r2, #3
 800b15a:	4619      	mov	r1, r3
 800b15c:	2014      	movs	r0, #20
 800b15e:	f000 f919 	bl	800b394 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b162:	f7ff fd53 	bl	800ac0c <SUBGRF_GetPacketType>
 800b166:	4603      	mov	r3, r0
 800b168:	461a      	mov	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <SUBGRF_GetPacketStatus+0x30>
 800b176:	2b01      	cmp	r3, #1
 800b178:	d013      	beq.n	800b1a2 <SUBGRF_GetPacketStatus+0x56>
 800b17a:	e02a      	b.n	800b1d2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b17c:	7b3a      	ldrb	r2, [r7, #12]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b182:	7b7b      	ldrb	r3, [r7, #13]
 800b184:	425b      	negs	r3, r3
 800b186:	105b      	asrs	r3, r3, #1
 800b188:	b25a      	sxtb	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	425b      	negs	r3, r3
 800b192:	105b      	asrs	r3, r3, #1
 800b194:	b25a      	sxtb	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	609a      	str	r2, [r3, #8]
            break;
 800b1a0:	e020      	b.n	800b1e4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b1a2:	7b3b      	ldrb	r3, [r7, #12]
 800b1a4:	425b      	negs	r3, r3
 800b1a6:	105b      	asrs	r3, r3, #1
 800b1a8:	b25a      	sxtb	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b1ae:	7b7b      	ldrb	r3, [r7, #13]
 800b1b0:	b25b      	sxtb	r3, r3
 800b1b2:	3302      	adds	r3, #2
 800b1b4:	109b      	asrs	r3, r3, #2
 800b1b6:	b25a      	sxtb	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	425b      	negs	r3, r3
 800b1c0:	105b      	asrs	r3, r3, #1
 800b1c2:	b25a      	sxtb	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b1c8:	4b08      	ldr	r3, [pc, #32]	@ (800b1ec <SUBGRF_GetPacketStatus+0xa0>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	611a      	str	r2, [r3, #16]
            break;
 800b1d0:	e008      	b.n	800b1e4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b1d2:	2214      	movs	r2, #20
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fc93 	bl	800bb02 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	220f      	movs	r2, #15
 800b1e0:	701a      	strb	r2, [r3, #0]
            break;
 800b1e2:	bf00      	nop
    }
}
 800b1e4:	bf00      	nop
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20000b20 	.word	0x20000b20

0800b1f0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	460a      	mov	r2, r1
 800b1fa:	80fb      	strh	r3, [r7, #6]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b200:	1d7a      	adds	r2, r7, #5
 800b202:	88f9      	ldrh	r1, [r7, #6]
 800b204:	2301      	movs	r3, #1
 800b206:	4803      	ldr	r0, [pc, #12]	@ (800b214 <SUBGRF_WriteRegister+0x24>)
 800b208:	f7fa fbd6 	bl	80059b8 <HAL_SUBGHZ_WriteRegisters>
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20000678 	.word	0x20000678

0800b218 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b222:	f107 020f 	add.w	r2, r7, #15
 800b226:	88f9      	ldrh	r1, [r7, #6]
 800b228:	2301      	movs	r3, #1
 800b22a:	4804      	ldr	r0, [pc, #16]	@ (800b23c <SUBGRF_ReadRegister+0x24>)
 800b22c:	f7fa fc23 	bl	8005a76 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000678 	.word	0x20000678

0800b240 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	6039      	str	r1, [r7, #0]
 800b24a:	80fb      	strh	r3, [r7, #6]
 800b24c:	4613      	mov	r3, r2
 800b24e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b250:	f3ef 8310 	mrs	r3, PRIMASK
 800b254:	60fb      	str	r3, [r7, #12]
  return(result);
 800b256:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b25a:	b672      	cpsid	i
}
 800b25c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b25e:	88bb      	ldrh	r3, [r7, #4]
 800b260:	88f9      	ldrh	r1, [r7, #6]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	4806      	ldr	r0, [pc, #24]	@ (800b280 <SUBGRF_WriteRegisters+0x40>)
 800b266:	f7fa fba7 	bl	80059b8 <HAL_SUBGHZ_WriteRegisters>
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f383 8810 	msr	PRIMASK, r3
}
 800b274:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b276:	bf00      	nop
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	20000678 	.word	0x20000678

0800b284 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	6039      	str	r1, [r7, #0]
 800b28e:	80fb      	strh	r3, [r7, #6]
 800b290:	4613      	mov	r3, r2
 800b292:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b294:	f3ef 8310 	mrs	r3, PRIMASK
 800b298:	60fb      	str	r3, [r7, #12]
  return(result);
 800b29a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b29c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b29e:	b672      	cpsid	i
}
 800b2a0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800b2a2:	88bb      	ldrh	r3, [r7, #4]
 800b2a4:	88f9      	ldrh	r1, [r7, #6]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	4806      	ldr	r0, [pc, #24]	@ (800b2c4 <SUBGRF_ReadRegisters+0x40>)
 800b2aa:	f7fa fbe4 	bl	8005a76 <HAL_SUBGHZ_ReadRegisters>
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f383 8810 	msr	PRIMASK, r3
}
 800b2b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b2ba:	bf00      	nop
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20000678 	.word	0x20000678

0800b2c8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	6039      	str	r1, [r7, #0]
 800b2d2:	71fb      	strb	r3, [r7, #7]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b2e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2e2:	b672      	cpsid	i
}
 800b2e4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800b2e6:	79bb      	ldrb	r3, [r7, #6]
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	79f9      	ldrb	r1, [r7, #7]
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	4806      	ldr	r0, [pc, #24]	@ (800b308 <SUBGRF_WriteBuffer+0x40>)
 800b2f0:	f7fa fcd5 	bl	8005c9e <HAL_SUBGHZ_WriteBuffer>
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f383 8810 	msr	PRIMASK, r3
}
 800b2fe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b300:	bf00      	nop
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	20000678 	.word	0x20000678

0800b30c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	6039      	str	r1, [r7, #0]
 800b316:	71fb      	strb	r3, [r7, #7]
 800b318:	4613      	mov	r3, r2
 800b31a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b31c:	f3ef 8310 	mrs	r3, PRIMASK
 800b320:	60fb      	str	r3, [r7, #12]
  return(result);
 800b322:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b324:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b326:	b672      	cpsid	i
}
 800b328:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800b32a:	79bb      	ldrb	r3, [r7, #6]
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	79f9      	ldrb	r1, [r7, #7]
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	4806      	ldr	r0, [pc, #24]	@ (800b34c <SUBGRF_ReadBuffer+0x40>)
 800b334:	f7fa fd06 	bl	8005d44 <HAL_SUBGHZ_ReadBuffer>
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f383 8810 	msr	PRIMASK, r3
}
 800b342:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b344:	bf00      	nop
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20000678 	.word	0x20000678

0800b350 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]
 800b35c:	4613      	mov	r3, r2
 800b35e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b360:	f3ef 8310 	mrs	r3, PRIMASK
 800b364:	60fb      	str	r3, [r7, #12]
  return(result);
 800b366:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b368:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b36a:	b672      	cpsid	i
}
 800b36c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b36e:	88bb      	ldrh	r3, [r7, #4]
 800b370:	79f9      	ldrb	r1, [r7, #7]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	4806      	ldr	r0, [pc, #24]	@ (800b390 <SUBGRF_WriteCommand+0x40>)
 800b376:	f7fa fbdf 	bl	8005b38 <HAL_SUBGHZ_ExecSetCmd>
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f383 8810 	msr	PRIMASK, r3
}
 800b384:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b386:	bf00      	nop
 800b388:	3718      	adds	r7, #24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000678 	.word	0x20000678

0800b394 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b3a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b3ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3ae:	b672      	cpsid	i
}
 800b3b0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b3b2:	88bb      	ldrh	r3, [r7, #4]
 800b3b4:	79f9      	ldrb	r1, [r7, #7]
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	4806      	ldr	r0, [pc, #24]	@ (800b3d4 <SUBGRF_ReadCommand+0x40>)
 800b3ba:	f7fa fc1c 	bl	8005bf6 <HAL_SUBGHZ_ExecGetCmd>
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f383 8810 	msr	PRIMASK, r3
}
 800b3c8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b3ca:	bf00      	nop
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000678 	.word	0x20000678

0800b3d8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	460a      	mov	r2, r1
 800b3e2:	71fb      	strb	r3, [r7, #7]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b3ec:	79bb      	ldrb	r3, [r7, #6]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d10d      	bne.n	800b40e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d104      	bne.n	800b402 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b3fc:	2004      	movs	r0, #4
 800b3fe:	f000 f8ef 	bl	800b5e0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b402:	79fb      	ldrb	r3, [r7, #7]
 800b404:	2b02      	cmp	r3, #2
 800b406:	d107      	bne.n	800b418 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b408:	2303      	movs	r3, #3
 800b40a:	73fb      	strb	r3, [r7, #15]
 800b40c:	e004      	b.n	800b418 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b40e:	79bb      	ldrb	r3, [r7, #6]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b414:	2301      	movs	r3, #1
 800b416:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 fad2 	bl	800b9c4 <RBI_ConfigRFSwitch>
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b432:	2301      	movs	r3, #1
 800b434:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b436:	f000 fb0f 	bl	800ba58 <RBI_GetTxConfig>
 800b43a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d016      	beq.n	800b470 <SUBGRF_SetRfTxPower+0x48>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b02      	cmp	r3, #2
 800b446:	dc16      	bgt.n	800b476 <SUBGRF_SetRfTxPower+0x4e>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <SUBGRF_SetRfTxPower+0x2e>
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d00a      	beq.n	800b46a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b454:	e00f      	b.n	800b476 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b45a:	2b0f      	cmp	r3, #15
 800b45c:	dd02      	ble.n	800b464 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b45e:	2302      	movs	r3, #2
 800b460:	73fb      	strb	r3, [r7, #15]
            break;
 800b462:	e009      	b.n	800b478 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b464:	2301      	movs	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
            break;
 800b468:	e006      	b.n	800b478 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b46a:	2301      	movs	r3, #1
 800b46c:	73fb      	strb	r3, [r7, #15]
            break;
 800b46e:	e003      	b.n	800b478 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b470:	2302      	movs	r3, #2
 800b472:	73fb      	strb	r3, [r7, #15]
            break;
 800b474:	e000      	b.n	800b478 <SUBGRF_SetRfTxPower+0x50>
            break;
 800b476:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b478:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	2202      	movs	r2, #2
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fbcd 	bl	800ac20 <SUBGRF_SetTxParams>

    return paSelect;
 800b486:	7bfb      	ldrb	r3, [r7, #15]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b490:	b480      	push	{r7}
 800b492:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b494:	2301      	movs	r3, #1
}
 800b496:	4618      	mov	r0, r3
 800b498:	46bd      	mov	sp, r7
 800b49a:	bc80      	pop	{r7}
 800b49c:	4770      	bx	lr
	...

0800b4a0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b4a8:	4b03      	ldr	r3, [pc, #12]	@ (800b4b8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	4798      	blx	r3
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20000b28 	.word	0x20000b28

0800b4bc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b4c4:	4b03      	ldr	r3, [pc, #12]	@ (800b4d4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2002      	movs	r0, #2
 800b4ca:	4798      	blx	r3
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20000b28 	.word	0x20000b28

0800b4d8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b4e0:	4b03      	ldr	r3, [pc, #12]	@ (800b4f0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2040      	movs	r0, #64	@ 0x40
 800b4e6:	4798      	blx	r3
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	20000b28 	.word	0x20000b28

0800b4f4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b506:	2b01      	cmp	r3, #1
 800b508:	d005      	beq.n	800b516 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b50a:	e00a      	b.n	800b522 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b50c:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2080      	movs	r0, #128	@ 0x80
 800b512:	4798      	blx	r3
            break;
 800b514:	e005      	b.n	800b522 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b516:	4b05      	ldr	r3, [pc, #20]	@ (800b52c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b51e:	4798      	blx	r3
            break;
 800b520:	bf00      	nop
    }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000b28 	.word	0x20000b28

0800b530 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b538:	4b04      	ldr	r3, [pc, #16]	@ (800b54c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b540:	4798      	blx	r3
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20000b28 	.word	0x20000b28

0800b550 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b558:	4b03      	ldr	r3, [pc, #12]	@ (800b568 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2020      	movs	r0, #32
 800b55e:	4798      	blx	r3
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20000b28 	.word	0x20000b28

0800b56c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b574:	4b03      	ldr	r3, [pc, #12]	@ (800b584 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2004      	movs	r0, #4
 800b57a:	4798      	blx	r3
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000b28 	.word	0x20000b28

0800b588 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b590:	4b03      	ldr	r3, [pc, #12]	@ (800b5a0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2008      	movs	r0, #8
 800b596:	4798      	blx	r3
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20000b28 	.word	0x20000b28

0800b5a4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b5ac:	4b03      	ldr	r3, [pc, #12]	@ (800b5bc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2010      	movs	r0, #16
 800b5b2:	4798      	blx	r3
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20000b28 	.word	0x20000b28

0800b5c0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b5c8:	4b04      	ldr	r3, [pc, #16]	@ (800b5dc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b5d0:	4798      	blx	r3
}
 800b5d2:	bf00      	nop
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20000b28 	.word	0x20000b28

0800b5e0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b5ea:	f000 fa4b 	bl	800ba84 <RBI_IsDCDC>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d112      	bne.n	800b61a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b5f4:	f640 1023 	movw	r0, #2339	@ 0x923
 800b5f8:	f7ff fe0e 	bl	800b218 <SUBGRF_ReadRegister>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	f023 0306 	bic.w	r3, r3, #6
 800b606:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b608:	7bfa      	ldrb	r2, [r7, #15]
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	4619      	mov	r1, r3
 800b612:	f640 1023 	movw	r0, #2339	@ 0x923
 800b616:	f7ff fdeb 	bl	800b1f0 <SUBGRF_WriteRegister>
  }
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
	...

0800b624 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b632:	231f      	movs	r3, #31
 800b634:	e017      	b.n	800b666 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]
 800b63a:	e00f      	b.n	800b65c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	4a0c      	ldr	r2, [pc, #48]	@ (800b670 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	429a      	cmp	r2, r3
 800b648:	d205      	bcs.n	800b656 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	4a08      	ldr	r2, [pc, #32]	@ (800b670 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b64e:	00db      	lsls	r3, r3, #3
 800b650:	4413      	add	r3, r2
 800b652:	791b      	ldrb	r3, [r3, #4]
 800b654:	e007      	b.n	800b666 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	3301      	adds	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	2b15      	cmp	r3, #21
 800b660:	d9ec      	bls.n	800b63c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b662:	bf00      	nop
 800b664:	e7fd      	b.n	800b662 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bc80      	pop	{r7}
 800b66e:	4770      	bx	lr
 800b670:	0800d25c 	.word	0x0800d25c

0800b674 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08a      	sub	sp, #40	@ 0x28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b67e:	4b35      	ldr	r3, [pc, #212]	@ (800b754 <SUBGRF_GetCFO+0xe0>)
 800b680:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b682:	f640 0007 	movw	r0, #2055	@ 0x807
 800b686:	f7ff fdc7 	bl	800b218 <SUBGRF_ReadRegister>
 800b68a:	4603      	mov	r3, r0
 800b68c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b68e:	7ffb      	ldrb	r3, [r7, #31]
 800b690:	08db      	lsrs	r3, r3, #3
 800b692:	b2db      	uxtb	r3, r3
 800b694:	f003 0303 	and.w	r3, r3, #3
 800b698:	3328      	adds	r3, #40	@ 0x28
 800b69a:	443b      	add	r3, r7
 800b69c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b6a0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b6a2:	7ffb      	ldrb	r3, [r7, #31]
 800b6a4:	f003 0307 	and.w	r3, r3, #7
 800b6a8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b6aa:	7fba      	ldrb	r2, [r7, #30]
 800b6ac:	7f7b      	ldrb	r3, [r7, #29]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	4b28      	ldr	r3, [pc, #160]	@ (800b758 <SUBGRF_GetCFO+0xe4>)
 800b6b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6bc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	fb02 f303 	mul.w	r3, r2, r3
 800b6d8:	2b07      	cmp	r3, #7
 800b6da:	d802      	bhi.n	800b6e2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b6dc:	2302      	movs	r3, #2
 800b6de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800b6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d802      	bhi.n	800b6f6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b6f6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	fb02 f303 	mul.w	r3, r2, r3
 800b700:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b702:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800b706:	f7ff fd87 	bl	800b218 <SUBGRF_ReadRegister>
 800b70a:	4603      	mov	r3, r0
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b712:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b714:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800b718:	f7ff fd7e 	bl	800b218 <SUBGRF_ReadRegister>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	4313      	orrs	r3, r2
 800b724:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b736:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b73a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	095b      	lsrs	r3, r3, #5
 800b740:	6a3a      	ldr	r2, [r7, #32]
 800b742:	fb02 f303 	mul.w	r3, r2, r3
 800b746:	11da      	asrs	r2, r3, #7
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]
}
 800b74c:	bf00      	nop
 800b74e:	3728      	adds	r7, #40	@ 0x28
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	0c0a0804 	.word	0x0c0a0804
 800b758:	01e84800 	.word	0x01e84800

0800b75c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b76e:	f04f 33ff 	mov.w	r3, #4294967295
 800b772:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b774:	697b      	ldr	r3, [r7, #20]
}
 800b776:	4618      	mov	r0, r3
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc80      	pop	{r7}
 800b77e:	4770      	bx	lr

0800b780 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
 800b78c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b792:	f04f 33ff 	mov.w	r3, #4294967295
 800b796:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b798:	697b      	ldr	r3, [r7, #20]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bc80      	pop	{r7}
 800b7a2:	4770      	bx	lr

0800b7a4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b7b0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bc80      	pop	{r7}
 800b7bc:	4770      	bx	lr

0800b7be <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b7be:	b480      	push	{r7}
 800b7c0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b7c2:	bf00      	nop
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bc80      	pop	{r7}
 800b7c8:	4770      	bx	lr

0800b7ca <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b7ce:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bc80      	pop	{r7}
 800b7d6:	4770      	bx	lr

0800b7d8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b7dc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bc80      	pop	{r7}
 800b7e4:	4770      	bx	lr

0800b7e6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b083      	sub	sp, #12
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bc80      	pop	{r7}
 800b7f8:	4770      	bx	lr

0800b7fa <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	60f8      	str	r0, [r7, #12]
 800b802:	460b      	mov	r3, r1
 800b804:	607a      	str	r2, [r7, #4]
 800b806:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b808:	f04f 33ff 	mov.w	r3, #4294967295
 800b80c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b80e:	697b      	ldr	r3, [r7, #20]
}
 800b810:	4618      	mov	r0, r3
 800b812:	371c      	adds	r7, #28
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr

0800b81a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b81a:	b480      	push	{r7}
 800b81c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b81e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b822:	4618      	mov	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	bc80      	pop	{r7}
 800b828:	4770      	bx	lr

0800b82a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b82a:	b480      	push	{r7}
 800b82c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b82e:	bf00      	nop
 800b830:	46bd      	mov	sp, r7
 800b832:	bc80      	pop	{r7}
 800b834:	4770      	bx	lr

0800b836 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b836:	b480      	push	{r7}
 800b838:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b83a:	bf00      	nop
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bc80      	pop	{r7}
 800b840:	4770      	bx	lr

0800b842 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	4603      	mov	r3, r0
 800b84a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	bc80      	pop	{r7}
 800b854:	4770      	bx	lr

0800b856 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b85a:	f7f7 fd0b 	bl	8003274 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b85e:	f000 f809 	bl	800b874 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b862:	bf00      	nop
 800b864:	bd80      	pop	{r7, pc}

0800b866 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b866:	b480      	push	{r7}
 800b868:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b86a:	bf00      	nop
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bc80      	pop	{r7}
 800b870:	4770      	bx	lr
	...

0800b874 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b878:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a4 <SubghzApp_Init+0x30>)
 800b87a:	4a0b      	ldr	r2, [pc, #44]	@ (800b8a8 <SubghzApp_Init+0x34>)
 800b87c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b87e:	4b09      	ldr	r3, [pc, #36]	@ (800b8a4 <SubghzApp_Init+0x30>)
 800b880:	4a0a      	ldr	r2, [pc, #40]	@ (800b8ac <SubghzApp_Init+0x38>)
 800b882:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b884:	4b07      	ldr	r3, [pc, #28]	@ (800b8a4 <SubghzApp_Init+0x30>)
 800b886:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b0 <SubghzApp_Init+0x3c>)
 800b888:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b88a:	4b06      	ldr	r3, [pc, #24]	@ (800b8a4 <SubghzApp_Init+0x30>)
 800b88c:	4a09      	ldr	r2, [pc, #36]	@ (800b8b4 <SubghzApp_Init+0x40>)
 800b88e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b890:	4b04      	ldr	r3, [pc, #16]	@ (800b8a4 <SubghzApp_Init+0x30>)
 800b892:	4a09      	ldr	r2, [pc, #36]	@ (800b8b8 <SubghzApp_Init+0x44>)
 800b894:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b896:	4b09      	ldr	r3, [pc, #36]	@ (800b8bc <SubghzApp_Init+0x48>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4802      	ldr	r0, [pc, #8]	@ (800b8a4 <SubghzApp_Init+0x30>)
 800b89c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b89e:	bf00      	nop
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000b2c 	.word	0x20000b2c
 800b8a8:	0800b8c1 	.word	0x0800b8c1
 800b8ac:	0800b8cd 	.word	0x0800b8cd
 800b8b0:	0800b8f1 	.word	0x0800b8f1
 800b8b4:	0800b8fd 	.word	0x0800b8fd
 800b8b8:	0800b909 	.word	0x0800b909
 800b8bc:	0800d1cc 	.word	0x0800d1cc

0800b8c0 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b8c4:	bf00      	nop
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bc80      	pop	{r7}
 800b8ca:	4770      	bx	lr

0800b8cc <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4603      	mov	r3, r0
 800b8dc:	817b      	strh	r3, [r7, #10]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	813b      	strh	r3, [r7, #8]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b8e6:	bf00      	nop
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bc80      	pop	{r7}
 800b8ee:	4770      	bx	lr

0800b8f0 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b8f4:	bf00      	nop
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bc80      	pop	{r7}
 800b8fa:	4770      	bx	lr

0800b8fc <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b900:	bf00      	nop
 800b902:	46bd      	mov	sp, r7
 800b904:	bc80      	pop	{r7}
 800b906:	4770      	bx	lr

0800b908 <OnRxError>:

static void OnRxError(void)
{
 800b908:	b480      	push	{r7}
 800b90a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b90c:	bf00      	nop
 800b90e:	46bd      	mov	sp, r7
 800b910:	bc80      	pop	{r7}
 800b912:	4770      	bx	lr

0800b914 <LL_AHB2_GRP1_EnableClock>:
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b91c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b920:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b922:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4313      	orrs	r3, r2
 800b92a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b92c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4013      	ands	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b938:	68fb      	ldr	r3, [r7, #12]
}
 800b93a:	bf00      	nop
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	bc80      	pop	{r7}
 800b942:	4770      	bx	lr

0800b944 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b94e:	463b      	mov	r3, r7
 800b950:	2200      	movs	r2, #0
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	605a      	str	r2, [r3, #4]
 800b956:	609a      	str	r2, [r3, #8]
 800b958:	60da      	str	r2, [r3, #12]
 800b95a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b95c:	2004      	movs	r0, #4
 800b95e:	f7ff ffd9 	bl	800b914 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b962:	2310      	movs	r3, #16
 800b964:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b966:	2301      	movs	r3, #1
 800b968:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b96e:	2303      	movs	r3, #3
 800b970:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b972:	463b      	mov	r3, r7
 800b974:	4619      	mov	r1, r3
 800b976:	4812      	ldr	r0, [pc, #72]	@ (800b9c0 <RBI_Init+0x7c>)
 800b978:	f7f8 fa7a 	bl	8003e70 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b97c:	2320      	movs	r3, #32
 800b97e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b980:	463b      	mov	r3, r7
 800b982:	4619      	mov	r1, r3
 800b984:	480e      	ldr	r0, [pc, #56]	@ (800b9c0 <RBI_Init+0x7c>)
 800b986:	f7f8 fa73 	bl	8003e70 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b98a:	2308      	movs	r3, #8
 800b98c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b98e:	463b      	mov	r3, r7
 800b990:	4619      	mov	r1, r3
 800b992:	480b      	ldr	r0, [pc, #44]	@ (800b9c0 <RBI_Init+0x7c>)
 800b994:	f7f8 fa6c 	bl	8003e70 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b998:	2200      	movs	r2, #0
 800b99a:	2120      	movs	r1, #32
 800b99c:	4808      	ldr	r0, [pc, #32]	@ (800b9c0 <RBI_Init+0x7c>)
 800b99e:	f7f8 fbc7 	bl	8004130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2110      	movs	r1, #16
 800b9a6:	4806      	ldr	r0, [pc, #24]	@ (800b9c0 <RBI_Init+0x7c>)
 800b9a8:	f7f8 fbc2 	bl	8004130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2108      	movs	r1, #8
 800b9b0:	4803      	ldr	r0, [pc, #12]	@ (800b9c0 <RBI_Init+0x7c>)
 800b9b2:	f7f8 fbbd 	bl	8004130 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b9b6:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	48000800 	.word	0x48000800

0800b9c4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */


  switch (Config) {
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d837      	bhi.n	800ba48 <RBI_ConfigRFSwitch+0x84>
 800b9d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b9e0 <RBI_ConfigRFSwitch+0x1c>)
 800b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9de:	bf00      	nop
 800b9e0:	0800b9f1 	.word	0x0800b9f1
 800b9e4:	0800ba07 	.word	0x0800ba07
 800b9e8:	0800ba1d 	.word	0x0800ba1d
 800b9ec:	0800ba33 	.word	0x0800ba33
  	case RADIO_SWITCH_OFF: {
  		/* Turn off switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
  		//				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	2110      	movs	r1, #16
 800b9f4:	4817      	ldr	r0, [pc, #92]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800b9f6:	f7f8 fb9b 	bl	8004130 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	2120      	movs	r1, #32
 800b9fe:	4815      	ldr	r0, [pc, #84]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800ba00:	f7f8 fb96 	bl	8004130 <HAL_GPIO_WritePin>
  		break;
 800ba04:	e021      	b.n	800ba4a <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RX: {
  		/*Turns On in Rx Mode the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800ba06:	2200      	movs	r2, #0
 800ba08:	2110      	movs	r1, #16
 800ba0a:	4812      	ldr	r0, [pc, #72]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800ba0c:	f7f8 fb90 	bl	8004130 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800ba10:	2200      	movs	r2, #0
 800ba12:	2120      	movs	r1, #32
 800ba14:	480f      	ldr	r0, [pc, #60]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800ba16:	f7f8 fb8b 	bl	8004130 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		break;
 800ba1a:	e016      	b.n	800ba4a <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RFO_LP: {
  		/*Turns On in Tx Low Power the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2110      	movs	r1, #16
 800ba20:	480c      	ldr	r0, [pc, #48]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800ba22:	f7f8 fb85 	bl	8004130 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800ba26:	2201      	movs	r2, #1
 800ba28:	2120      	movs	r1, #32
 800ba2a:	480a      	ldr	r0, [pc, #40]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800ba2c:	f7f8 fb80 	bl	8004130 <HAL_GPIO_WritePin>
  		break;
 800ba30:	e00b      	b.n	800ba4a <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RFO_HP: {
  		/*Turns On in Tx High Power the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800ba32:	2200      	movs	r2, #0
 800ba34:	2110      	movs	r1, #16
 800ba36:	4807      	ldr	r0, [pc, #28]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800ba38:	f7f8 fb7a 	bl	8004130 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	2120      	movs	r1, #32
 800ba40:	4804      	ldr	r0, [pc, #16]	@ (800ba54 <RBI_ConfigRFSwitch+0x90>)
 800ba42:	f7f8 fb75 	bl	8004130 <HAL_GPIO_WritePin>
  		break;
 800ba46:	e000      	b.n	800ba4a <RBI_ConfigRFSwitch+0x86>
  	}
  	default:
  		break;
 800ba48:	bf00      	nop
//	}
//	default:
//		break;
//	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	48000800 	.word	0x48000800

0800ba58 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800ba62:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bc80      	pop	{r7}
 800ba6c:	4770      	bx	lr

0800ba6e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800ba74:	2301      	movs	r3, #1
 800ba76:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800ba78:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bc80      	pop	{r7}
 800ba82:	4770      	bx	lr

0800ba84 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800ba8e:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bc80      	pop	{r7}
 800ba98:	4770      	bx	lr

0800ba9a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b085      	sub	sp, #20
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	4603      	mov	r3, r0
 800baa2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800baa8:	79fb      	ldrb	r3, [r7, #7]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d102      	bne.n	800bab4 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800baae:	230f      	movs	r3, #15
 800bab0:	60fb      	str	r3, [r7, #12]
 800bab2:	e001      	b.n	800bab8 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800bab4:	2316      	movs	r3, #22
 800bab6:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800bab8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800baba:	4618      	mov	r0, r3
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	bc80      	pop	{r7}
 800bac2:	4770      	bx	lr

0800bac4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	4613      	mov	r3, r2
 800bad0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800bada:	e007      	b.n	800baec <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	1c53      	adds	r3, r2, #1
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	1c59      	adds	r1, r3, #1
 800bae6:	6179      	str	r1, [r7, #20]
 800bae8:	7812      	ldrb	r2, [r2, #0]
 800baea:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800baec:	88fb      	ldrh	r3, [r7, #6]
 800baee:	1e5a      	subs	r2, r3, #1
 800baf0:	80fa      	strh	r2, [r7, #6]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1f2      	bne.n	800badc <UTIL_MEM_cpy_8+0x18>
    }
}
 800baf6:	bf00      	nop
 800baf8:	bf00      	nop
 800bafa:	371c      	adds	r7, #28
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bc80      	pop	{r7}
 800bb00:	4770      	bx	lr

0800bb02 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800bb02:	b480      	push	{r7}
 800bb04:	b085      	sub	sp, #20
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800bb16:	e004      	b.n	800bb22 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	60fa      	str	r2, [r7, #12]
 800bb1e:	78fa      	ldrb	r2, [r7, #3]
 800bb20:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800bb22:	883b      	ldrh	r3, [r7, #0]
 800bb24:	1e5a      	subs	r2, r3, #1
 800bb26:	803a      	strh	r2, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f5      	bne.n	800bb18 <UTIL_MEM_set_8+0x16>
  }
}
 800bb2c:	bf00      	nop
 800bb2e:	bf00      	nop
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bc80      	pop	{r7}
 800bb36:	4770      	bx	lr

0800bb38 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	603b      	str	r3, [r7, #0]
 800bb44:	4613      	mov	r3, r2
 800bb46:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d023      	beq.n	800bb96 <UTIL_TIMER_Create+0x5e>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d020      	beq.n	800bb96 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800bb5a:	4b11      	ldr	r3, [pc, #68]	@ (800bba0 <UTIL_TIMER_Create+0x68>)
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5e:	68b8      	ldr	r0, [r7, #8]
 800bb60:	4798      	blx	r3
 800bb62:	4602      	mov	r2, r0
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	69ba      	ldr	r2, [r7, #24]
 800bb84:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	79fa      	ldrb	r2, [r7, #7]
 800bb8a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	e000      	b.n	800bb98 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800bb96:	2301      	movs	r3, #1
  }
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	0800d178 	.word	0x0800d178

0800bba4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08a      	sub	sp, #40	@ 0x28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d056      	beq.n	800bc66 <UTIL_TIMER_Start+0xc2>
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f929 	bl	800be10 <TimerExists>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	f083 0301 	eor.w	r3, r3, #1
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d04d      	beq.n	800bc66 <UTIL_TIMER_Start+0xc2>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	7a5b      	ldrb	r3, [r3, #9]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d149      	bne.n	800bc66 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbd2:	f3ef 8310 	mrs	r3, PRIMASK
 800bbd6:	613b      	str	r3, [r7, #16]
  return(result);
 800bbd8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bbda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbdc:	b672      	cpsid	i
}
 800bbde:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800bbe6:	4b24      	ldr	r3, [pc, #144]	@ (800bc78 <UTIL_TIMER_Start+0xd4>)
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	4798      	blx	r3
 800bbec:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800bbee:	6a3a      	ldr	r2, [r7, #32]
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d201      	bcs.n	800bbfa <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a3a      	ldr	r2, [r7, #32]
 800bbfe:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800bc12:	4b1a      	ldr	r3, [pc, #104]	@ (800bc7c <UTIL_TIMER_Start+0xd8>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800bc1a:	4b17      	ldr	r3, [pc, #92]	@ (800bc78 <UTIL_TIMER_Start+0xd4>)
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f96b 	bl	800befc <TimerInsertNewHeadTimer>
 800bc26:	e017      	b.n	800bc58 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800bc28:	4b13      	ldr	r3, [pc, #76]	@ (800bc78 <UTIL_TIMER_Start+0xd4>)
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	4798      	blx	r3
 800bc2e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	441a      	add	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	4b0e      	ldr	r3, [pc, #56]	@ (800bc7c <UTIL_TIMER_Start+0xd8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d203      	bcs.n	800bc52 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f956 	bl	800befc <TimerInsertNewHeadTimer>
 800bc50:	e002      	b.n	800bc58 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f922 	bl	800be9c <TimerInsertTimer>
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f383 8810 	msr	PRIMASK, r3
}
 800bc62:	bf00      	nop
  {
 800bc64:	e002      	b.n	800bc6c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800bc66:	2301      	movs	r3, #1
 800bc68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800bc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3728      	adds	r7, #40	@ 0x28
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	0800d178 	.word	0x0800d178
 800bc7c:	20000b48 	.word	0x20000b48

0800bc80 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b088      	sub	sp, #32
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d05b      	beq.n	800bd4a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc92:	f3ef 8310 	mrs	r3, PRIMASK
 800bc96:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc98:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bc9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc9c:	b672      	cpsid	i
}
 800bc9e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800bca0:	4b2d      	ldr	r3, [pc, #180]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800bca6:	4b2c      	ldr	r3, [pc, #176]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800bcb2:	4b29      	ldr	r3, [pc, #164]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d041      	beq.n	800bd3e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800bcc0:	4b25      	ldr	r3, [pc, #148]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d134      	bne.n	800bd34 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800bcca:	4b23      	ldr	r3, [pc, #140]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800bcd2:	4b21      	ldr	r3, [pc, #132]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800bcdc:	4b1e      	ldr	r3, [pc, #120]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	4a1d      	ldr	r2, [pc, #116]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bce4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800bce6:	4b1c      	ldr	r3, [pc, #112]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4618      	mov	r0, r3
 800bcec:	f000 f8ac 	bl	800be48 <TimerSetTimeout>
 800bcf0:	e023      	b.n	800bd3a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800bcf2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd5c <UTIL_TIMER_Stop+0xdc>)
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	4798      	blx	r3
            TimerListHead = NULL;
 800bcf8:	4b17      	ldr	r3, [pc, #92]	@ (800bd58 <UTIL_TIMER_Stop+0xd8>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	e01c      	b.n	800bd3a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d110      	bne.n	800bd2a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d006      	beq.n	800bd1e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800bd1c:	e00d      	b.n	800bd3a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	615a      	str	r2, [r3, #20]
            break;
 800bd28:	e007      	b.n	800bd3a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1e2      	bne.n	800bd00 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	77fb      	strb	r3, [r7, #31]
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f383 8810 	msr	PRIMASK, r3
}
 800bd48:	e001      	b.n	800bd4e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800bd4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20000b48 	.word	0x20000b48
 800bd5c:	0800d178 	.word	0x0800d178

0800bd60 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d102      	bne.n	800bd7a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800bd74:	2301      	movs	r3, #1
 800bd76:	73fb      	strb	r3, [r7, #15]
 800bd78:	e014      	b.n	800bda4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800bd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bdb0 <UTIL_TIMER_SetPeriod+0x50>)
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd7e:	6838      	ldr	r0, [r7, #0]
 800bd80:	4798      	blx	r3
 800bd82:	4602      	mov	r2, r0
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f841 	bl	800be10 <TimerExists>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d007      	beq.n	800bda4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ff73 	bl	800bc80 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7ff ff02 	bl	800bba4 <UTIL_TIMER_Start>
 800bda0:	4603      	mov	r3, r0
 800bda2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	0800d178 	.word	0x0800d178

0800bdb4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800bdba:	4b06      	ldr	r3, [pc, #24]	@ (800bdd4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	4798      	blx	r3
 800bdc0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800bdc2:	4b04      	ldr	r3, [pc, #16]	@ (800bdd4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	4798      	blx	r3
 800bdca:	4603      	mov	r3, r0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	0800d178 	.word	0x0800d178

0800bdd8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800bde0:	4b0a      	ldr	r3, [pc, #40]	@ (800be0c <UTIL_TIMER_GetElapsedTime+0x34>)
 800bde2:	69db      	ldr	r3, [r3, #28]
 800bde4:	4798      	blx	r3
 800bde6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800bde8:	4b08      	ldr	r3, [pc, #32]	@ (800be0c <UTIL_TIMER_GetElapsedTime+0x34>)
 800bdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	4798      	blx	r3
 800bdf0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800bdf2:	4b06      	ldr	r3, [pc, #24]	@ (800be0c <UTIL_TIMER_GetElapsedTime+0x34>)
 800bdf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf6:	68f9      	ldr	r1, [r7, #12]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	1a8a      	subs	r2, r1, r2
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4798      	blx	r3
 800be00:	4603      	mov	r3, r0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	0800d178 	.word	0x0800d178

0800be10 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800be18:	4b0a      	ldr	r3, [pc, #40]	@ (800be44 <TimerExists+0x34>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800be1e:	e008      	b.n	800be32 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	429a      	cmp	r2, r3
 800be26:	d101      	bne.n	800be2c <TimerExists+0x1c>
    {
      return true;
 800be28:	2301      	movs	r3, #1
 800be2a:	e006      	b.n	800be3a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f3      	bne.n	800be20 <TimerExists+0x10>
  }
  return false;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	bc80      	pop	{r7}
 800be42:	4770      	bx	lr
 800be44:	20000b48 	.word	0x20000b48

0800be48 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800be48:	b590      	push	{r4, r7, lr}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800be50:	4b11      	ldr	r3, [pc, #68]	@ (800be98 <TimerSetTimeout+0x50>)
 800be52:	6a1b      	ldr	r3, [r3, #32]
 800be54:	4798      	blx	r3
 800be56:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681c      	ldr	r4, [r3, #0]
 800be62:	4b0d      	ldr	r3, [pc, #52]	@ (800be98 <TimerSetTimeout+0x50>)
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	4798      	blx	r3
 800be68:	4602      	mov	r2, r0
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	4413      	add	r3, r2
 800be6e:	429c      	cmp	r4, r3
 800be70:	d207      	bcs.n	800be82 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800be72:	4b09      	ldr	r3, [pc, #36]	@ (800be98 <TimerSetTimeout+0x50>)
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	4798      	blx	r3
 800be78:	4602      	mov	r2, r0
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	441a      	add	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800be82:	4b05      	ldr	r3, [pc, #20]	@ (800be98 <TimerSetTimeout+0x50>)
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	4610      	mov	r0, r2
 800be8c:	4798      	blx	r3
}
 800be8e:	bf00      	nop
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	bd90      	pop	{r4, r7, pc}
 800be96:	bf00      	nop
 800be98:	0800d178 	.word	0x0800d178

0800be9c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bea4:	4b14      	ldr	r3, [pc, #80]	@ (800bef8 <TimerInsertTimer+0x5c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800beaa:	4b13      	ldr	r3, [pc, #76]	@ (800bef8 <TimerInsertTimer+0x5c>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800beb2:	e012      	b.n	800beda <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d905      	bls.n	800becc <TimerInsertTimer+0x30>
    {
        cur = next;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	695b      	ldr	r3, [r3, #20]
 800bec8:	60bb      	str	r3, [r7, #8]
 800beca:	e006      	b.n	800beda <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	615a      	str	r2, [r3, #20]
        return;
 800bed8:	e009      	b.n	800beee <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e8      	bne.n	800beb4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	615a      	str	r2, [r3, #20]
}
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bc80      	pop	{r7}
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	20000b48 	.word	0x20000b48

0800befc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bf04:	4b0b      	ldr	r3, [pc, #44]	@ (800bf34 <TimerInsertNewHeadTimer+0x38>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bf1c:	4a05      	ldr	r2, [pc, #20]	@ (800bf34 <TimerInsertNewHeadTimer+0x38>)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bf22:	4b04      	ldr	r3, [pc, #16]	@ (800bf34 <TimerInsertNewHeadTimer+0x38>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff ff8e 	bl	800be48 <TimerSetTimeout>
}
 800bf2c:	bf00      	nop
 800bf2e:	3710      	adds	r7, #16
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20000b48 	.word	0x20000b48

0800bf38 <_vsniprintf_r>:
 800bf38:	b530      	push	{r4, r5, lr}
 800bf3a:	4614      	mov	r4, r2
 800bf3c:	2c00      	cmp	r4, #0
 800bf3e:	b09b      	sub	sp, #108	@ 0x6c
 800bf40:	4605      	mov	r5, r0
 800bf42:	461a      	mov	r2, r3
 800bf44:	da05      	bge.n	800bf52 <_vsniprintf_r+0x1a>
 800bf46:	238b      	movs	r3, #139	@ 0x8b
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4e:	b01b      	add	sp, #108	@ 0x6c
 800bf50:	bd30      	pop	{r4, r5, pc}
 800bf52:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bf56:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bf5a:	bf14      	ite	ne
 800bf5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bf60:	4623      	moveq	r3, r4
 800bf62:	9302      	str	r3, [sp, #8]
 800bf64:	9305      	str	r3, [sp, #20]
 800bf66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf6a:	9100      	str	r1, [sp, #0]
 800bf6c:	9104      	str	r1, [sp, #16]
 800bf6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bf72:	4669      	mov	r1, sp
 800bf74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bf76:	f000 f9af 	bl	800c2d8 <_svfiprintf_r>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	bfbc      	itt	lt
 800bf7e:	238b      	movlt	r3, #139	@ 0x8b
 800bf80:	602b      	strlt	r3, [r5, #0]
 800bf82:	2c00      	cmp	r4, #0
 800bf84:	d0e3      	beq.n	800bf4e <_vsniprintf_r+0x16>
 800bf86:	9b00      	ldr	r3, [sp, #0]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	701a      	strb	r2, [r3, #0]
 800bf8c:	e7df      	b.n	800bf4e <_vsniprintf_r+0x16>
	...

0800bf90 <vsniprintf>:
 800bf90:	b507      	push	{r0, r1, r2, lr}
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	4613      	mov	r3, r2
 800bf96:	460a      	mov	r2, r1
 800bf98:	4601      	mov	r1, r0
 800bf9a:	4803      	ldr	r0, [pc, #12]	@ (800bfa8 <vsniprintf+0x18>)
 800bf9c:	6800      	ldr	r0, [r0, #0]
 800bf9e:	f7ff ffcb 	bl	800bf38 <_vsniprintf_r>
 800bfa2:	b003      	add	sp, #12
 800bfa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfa8:	20000018 	.word	0x20000018

0800bfac <memset>:
 800bfac:	4402      	add	r2, r0
 800bfae:	4603      	mov	r3, r0
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d100      	bne.n	800bfb6 <memset+0xa>
 800bfb4:	4770      	bx	lr
 800bfb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfba:	e7f9      	b.n	800bfb0 <memset+0x4>

0800bfbc <__errno>:
 800bfbc:	4b01      	ldr	r3, [pc, #4]	@ (800bfc4 <__errno+0x8>)
 800bfbe:	6818      	ldr	r0, [r3, #0]
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	20000018 	.word	0x20000018

0800bfc8 <__libc_init_array>:
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	4d0d      	ldr	r5, [pc, #52]	@ (800c000 <__libc_init_array+0x38>)
 800bfcc:	4c0d      	ldr	r4, [pc, #52]	@ (800c004 <__libc_init_array+0x3c>)
 800bfce:	1b64      	subs	r4, r4, r5
 800bfd0:	10a4      	asrs	r4, r4, #2
 800bfd2:	2600      	movs	r6, #0
 800bfd4:	42a6      	cmp	r6, r4
 800bfd6:	d109      	bne.n	800bfec <__libc_init_array+0x24>
 800bfd8:	4d0b      	ldr	r5, [pc, #44]	@ (800c008 <__libc_init_array+0x40>)
 800bfda:	4c0c      	ldr	r4, [pc, #48]	@ (800c00c <__libc_init_array+0x44>)
 800bfdc:	f000 fc66 	bl	800c8ac <_init>
 800bfe0:	1b64      	subs	r4, r4, r5
 800bfe2:	10a4      	asrs	r4, r4, #2
 800bfe4:	2600      	movs	r6, #0
 800bfe6:	42a6      	cmp	r6, r4
 800bfe8:	d105      	bne.n	800bff6 <__libc_init_array+0x2e>
 800bfea:	bd70      	pop	{r4, r5, r6, pc}
 800bfec:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff0:	4798      	blx	r3
 800bff2:	3601      	adds	r6, #1
 800bff4:	e7ee      	b.n	800bfd4 <__libc_init_array+0xc>
 800bff6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bffa:	4798      	blx	r3
 800bffc:	3601      	adds	r6, #1
 800bffe:	e7f2      	b.n	800bfe6 <__libc_init_array+0x1e>
 800c000:	0800d348 	.word	0x0800d348
 800c004:	0800d348 	.word	0x0800d348
 800c008:	0800d348 	.word	0x0800d348
 800c00c:	0800d34c 	.word	0x0800d34c

0800c010 <__retarget_lock_acquire_recursive>:
 800c010:	4770      	bx	lr

0800c012 <__retarget_lock_release_recursive>:
 800c012:	4770      	bx	lr

0800c014 <memcpy>:
 800c014:	440a      	add	r2, r1
 800c016:	4291      	cmp	r1, r2
 800c018:	f100 33ff 	add.w	r3, r0, #4294967295
 800c01c:	d100      	bne.n	800c020 <memcpy+0xc>
 800c01e:	4770      	bx	lr
 800c020:	b510      	push	{r4, lr}
 800c022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c02a:	4291      	cmp	r1, r2
 800c02c:	d1f9      	bne.n	800c022 <memcpy+0xe>
 800c02e:	bd10      	pop	{r4, pc}

0800c030 <_free_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4605      	mov	r5, r0
 800c034:	2900      	cmp	r1, #0
 800c036:	d041      	beq.n	800c0bc <_free_r+0x8c>
 800c038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c03c:	1f0c      	subs	r4, r1, #4
 800c03e:	2b00      	cmp	r3, #0
 800c040:	bfb8      	it	lt
 800c042:	18e4      	addlt	r4, r4, r3
 800c044:	f000 f8e0 	bl	800c208 <__malloc_lock>
 800c048:	4a1d      	ldr	r2, [pc, #116]	@ (800c0c0 <_free_r+0x90>)
 800c04a:	6813      	ldr	r3, [r2, #0]
 800c04c:	b933      	cbnz	r3, 800c05c <_free_r+0x2c>
 800c04e:	6063      	str	r3, [r4, #4]
 800c050:	6014      	str	r4, [r2, #0]
 800c052:	4628      	mov	r0, r5
 800c054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c058:	f000 b8dc 	b.w	800c214 <__malloc_unlock>
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	d908      	bls.n	800c072 <_free_r+0x42>
 800c060:	6820      	ldr	r0, [r4, #0]
 800c062:	1821      	adds	r1, r4, r0
 800c064:	428b      	cmp	r3, r1
 800c066:	bf01      	itttt	eq
 800c068:	6819      	ldreq	r1, [r3, #0]
 800c06a:	685b      	ldreq	r3, [r3, #4]
 800c06c:	1809      	addeq	r1, r1, r0
 800c06e:	6021      	streq	r1, [r4, #0]
 800c070:	e7ed      	b.n	800c04e <_free_r+0x1e>
 800c072:	461a      	mov	r2, r3
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	b10b      	cbz	r3, 800c07c <_free_r+0x4c>
 800c078:	42a3      	cmp	r3, r4
 800c07a:	d9fa      	bls.n	800c072 <_free_r+0x42>
 800c07c:	6811      	ldr	r1, [r2, #0]
 800c07e:	1850      	adds	r0, r2, r1
 800c080:	42a0      	cmp	r0, r4
 800c082:	d10b      	bne.n	800c09c <_free_r+0x6c>
 800c084:	6820      	ldr	r0, [r4, #0]
 800c086:	4401      	add	r1, r0
 800c088:	1850      	adds	r0, r2, r1
 800c08a:	4283      	cmp	r3, r0
 800c08c:	6011      	str	r1, [r2, #0]
 800c08e:	d1e0      	bne.n	800c052 <_free_r+0x22>
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	6053      	str	r3, [r2, #4]
 800c096:	4408      	add	r0, r1
 800c098:	6010      	str	r0, [r2, #0]
 800c09a:	e7da      	b.n	800c052 <_free_r+0x22>
 800c09c:	d902      	bls.n	800c0a4 <_free_r+0x74>
 800c09e:	230c      	movs	r3, #12
 800c0a0:	602b      	str	r3, [r5, #0]
 800c0a2:	e7d6      	b.n	800c052 <_free_r+0x22>
 800c0a4:	6820      	ldr	r0, [r4, #0]
 800c0a6:	1821      	adds	r1, r4, r0
 800c0a8:	428b      	cmp	r3, r1
 800c0aa:	bf04      	itt	eq
 800c0ac:	6819      	ldreq	r1, [r3, #0]
 800c0ae:	685b      	ldreq	r3, [r3, #4]
 800c0b0:	6063      	str	r3, [r4, #4]
 800c0b2:	bf04      	itt	eq
 800c0b4:	1809      	addeq	r1, r1, r0
 800c0b6:	6021      	streq	r1, [r4, #0]
 800c0b8:	6054      	str	r4, [r2, #4]
 800c0ba:	e7ca      	b.n	800c052 <_free_r+0x22>
 800c0bc:	bd38      	pop	{r3, r4, r5, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000c90 	.word	0x20000c90

0800c0c4 <sbrk_aligned>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c104 <sbrk_aligned+0x40>)
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	6831      	ldr	r1, [r6, #0]
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	b911      	cbnz	r1, 800c0d6 <sbrk_aligned+0x12>
 800c0d0:	f000 fba6 	bl	800c820 <_sbrk_r>
 800c0d4:	6030      	str	r0, [r6, #0]
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4628      	mov	r0, r5
 800c0da:	f000 fba1 	bl	800c820 <_sbrk_r>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d103      	bne.n	800c0ea <sbrk_aligned+0x26>
 800c0e2:	f04f 34ff 	mov.w	r4, #4294967295
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	1cc4      	adds	r4, r0, #3
 800c0ec:	f024 0403 	bic.w	r4, r4, #3
 800c0f0:	42a0      	cmp	r0, r4
 800c0f2:	d0f8      	beq.n	800c0e6 <sbrk_aligned+0x22>
 800c0f4:	1a21      	subs	r1, r4, r0
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f000 fb92 	bl	800c820 <_sbrk_r>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d1f2      	bne.n	800c0e6 <sbrk_aligned+0x22>
 800c100:	e7ef      	b.n	800c0e2 <sbrk_aligned+0x1e>
 800c102:	bf00      	nop
 800c104:	20000c8c 	.word	0x20000c8c

0800c108 <_malloc_r>:
 800c108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c10c:	1ccd      	adds	r5, r1, #3
 800c10e:	f025 0503 	bic.w	r5, r5, #3
 800c112:	3508      	adds	r5, #8
 800c114:	2d0c      	cmp	r5, #12
 800c116:	bf38      	it	cc
 800c118:	250c      	movcc	r5, #12
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	4606      	mov	r6, r0
 800c11e:	db01      	blt.n	800c124 <_malloc_r+0x1c>
 800c120:	42a9      	cmp	r1, r5
 800c122:	d904      	bls.n	800c12e <_malloc_r+0x26>
 800c124:	230c      	movs	r3, #12
 800c126:	6033      	str	r3, [r6, #0]
 800c128:	2000      	movs	r0, #0
 800c12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c204 <_malloc_r+0xfc>
 800c132:	f000 f869 	bl	800c208 <__malloc_lock>
 800c136:	f8d8 3000 	ldr.w	r3, [r8]
 800c13a:	461c      	mov	r4, r3
 800c13c:	bb44      	cbnz	r4, 800c190 <_malloc_r+0x88>
 800c13e:	4629      	mov	r1, r5
 800c140:	4630      	mov	r0, r6
 800c142:	f7ff ffbf 	bl	800c0c4 <sbrk_aligned>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	4604      	mov	r4, r0
 800c14a:	d158      	bne.n	800c1fe <_malloc_r+0xf6>
 800c14c:	f8d8 4000 	ldr.w	r4, [r8]
 800c150:	4627      	mov	r7, r4
 800c152:	2f00      	cmp	r7, #0
 800c154:	d143      	bne.n	800c1de <_malloc_r+0xd6>
 800c156:	2c00      	cmp	r4, #0
 800c158:	d04b      	beq.n	800c1f2 <_malloc_r+0xea>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	4639      	mov	r1, r7
 800c15e:	4630      	mov	r0, r6
 800c160:	eb04 0903 	add.w	r9, r4, r3
 800c164:	f000 fb5c 	bl	800c820 <_sbrk_r>
 800c168:	4581      	cmp	r9, r0
 800c16a:	d142      	bne.n	800c1f2 <_malloc_r+0xea>
 800c16c:	6821      	ldr	r1, [r4, #0]
 800c16e:	1a6d      	subs	r5, r5, r1
 800c170:	4629      	mov	r1, r5
 800c172:	4630      	mov	r0, r6
 800c174:	f7ff ffa6 	bl	800c0c4 <sbrk_aligned>
 800c178:	3001      	adds	r0, #1
 800c17a:	d03a      	beq.n	800c1f2 <_malloc_r+0xea>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	442b      	add	r3, r5
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	f8d8 3000 	ldr.w	r3, [r8]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	bb62      	cbnz	r2, 800c1e4 <_malloc_r+0xdc>
 800c18a:	f8c8 7000 	str.w	r7, [r8]
 800c18e:	e00f      	b.n	800c1b0 <_malloc_r+0xa8>
 800c190:	6822      	ldr	r2, [r4, #0]
 800c192:	1b52      	subs	r2, r2, r5
 800c194:	d420      	bmi.n	800c1d8 <_malloc_r+0xd0>
 800c196:	2a0b      	cmp	r2, #11
 800c198:	d917      	bls.n	800c1ca <_malloc_r+0xc2>
 800c19a:	1961      	adds	r1, r4, r5
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	6025      	str	r5, [r4, #0]
 800c1a0:	bf18      	it	ne
 800c1a2:	6059      	strne	r1, [r3, #4]
 800c1a4:	6863      	ldr	r3, [r4, #4]
 800c1a6:	bf08      	it	eq
 800c1a8:	f8c8 1000 	streq.w	r1, [r8]
 800c1ac:	5162      	str	r2, [r4, r5]
 800c1ae:	604b      	str	r3, [r1, #4]
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f000 f82f 	bl	800c214 <__malloc_unlock>
 800c1b6:	f104 000b 	add.w	r0, r4, #11
 800c1ba:	1d23      	adds	r3, r4, #4
 800c1bc:	f020 0007 	bic.w	r0, r0, #7
 800c1c0:	1ac2      	subs	r2, r0, r3
 800c1c2:	bf1c      	itt	ne
 800c1c4:	1a1b      	subne	r3, r3, r0
 800c1c6:	50a3      	strne	r3, [r4, r2]
 800c1c8:	e7af      	b.n	800c12a <_malloc_r+0x22>
 800c1ca:	6862      	ldr	r2, [r4, #4]
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	bf0c      	ite	eq
 800c1d0:	f8c8 2000 	streq.w	r2, [r8]
 800c1d4:	605a      	strne	r2, [r3, #4]
 800c1d6:	e7eb      	b.n	800c1b0 <_malloc_r+0xa8>
 800c1d8:	4623      	mov	r3, r4
 800c1da:	6864      	ldr	r4, [r4, #4]
 800c1dc:	e7ae      	b.n	800c13c <_malloc_r+0x34>
 800c1de:	463c      	mov	r4, r7
 800c1e0:	687f      	ldr	r7, [r7, #4]
 800c1e2:	e7b6      	b.n	800c152 <_malloc_r+0x4a>
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	d1fb      	bne.n	800c1e4 <_malloc_r+0xdc>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	6053      	str	r3, [r2, #4]
 800c1f0:	e7de      	b.n	800c1b0 <_malloc_r+0xa8>
 800c1f2:	230c      	movs	r3, #12
 800c1f4:	6033      	str	r3, [r6, #0]
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f000 f80c 	bl	800c214 <__malloc_unlock>
 800c1fc:	e794      	b.n	800c128 <_malloc_r+0x20>
 800c1fe:	6005      	str	r5, [r0, #0]
 800c200:	e7d6      	b.n	800c1b0 <_malloc_r+0xa8>
 800c202:	bf00      	nop
 800c204:	20000c90 	.word	0x20000c90

0800c208 <__malloc_lock>:
 800c208:	4801      	ldr	r0, [pc, #4]	@ (800c210 <__malloc_lock+0x8>)
 800c20a:	f7ff bf01 	b.w	800c010 <__retarget_lock_acquire_recursive>
 800c20e:	bf00      	nop
 800c210:	20000c88 	.word	0x20000c88

0800c214 <__malloc_unlock>:
 800c214:	4801      	ldr	r0, [pc, #4]	@ (800c21c <__malloc_unlock+0x8>)
 800c216:	f7ff befc 	b.w	800c012 <__retarget_lock_release_recursive>
 800c21a:	bf00      	nop
 800c21c:	20000c88 	.word	0x20000c88

0800c220 <__ssputs_r>:
 800c220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c224:	688e      	ldr	r6, [r1, #8]
 800c226:	461f      	mov	r7, r3
 800c228:	42be      	cmp	r6, r7
 800c22a:	680b      	ldr	r3, [r1, #0]
 800c22c:	4682      	mov	sl, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	4690      	mov	r8, r2
 800c232:	d82d      	bhi.n	800c290 <__ssputs_r+0x70>
 800c234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c23c:	d026      	beq.n	800c28c <__ssputs_r+0x6c>
 800c23e:	6965      	ldr	r5, [r4, #20]
 800c240:	6909      	ldr	r1, [r1, #16]
 800c242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c246:	eba3 0901 	sub.w	r9, r3, r1
 800c24a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c24e:	1c7b      	adds	r3, r7, #1
 800c250:	444b      	add	r3, r9
 800c252:	106d      	asrs	r5, r5, #1
 800c254:	429d      	cmp	r5, r3
 800c256:	bf38      	it	cc
 800c258:	461d      	movcc	r5, r3
 800c25a:	0553      	lsls	r3, r2, #21
 800c25c:	d527      	bpl.n	800c2ae <__ssputs_r+0x8e>
 800c25e:	4629      	mov	r1, r5
 800c260:	f7ff ff52 	bl	800c108 <_malloc_r>
 800c264:	4606      	mov	r6, r0
 800c266:	b360      	cbz	r0, 800c2c2 <__ssputs_r+0xa2>
 800c268:	6921      	ldr	r1, [r4, #16]
 800c26a:	464a      	mov	r2, r9
 800c26c:	f7ff fed2 	bl	800c014 <memcpy>
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c27a:	81a3      	strh	r3, [r4, #12]
 800c27c:	6126      	str	r6, [r4, #16]
 800c27e:	6165      	str	r5, [r4, #20]
 800c280:	444e      	add	r6, r9
 800c282:	eba5 0509 	sub.w	r5, r5, r9
 800c286:	6026      	str	r6, [r4, #0]
 800c288:	60a5      	str	r5, [r4, #8]
 800c28a:	463e      	mov	r6, r7
 800c28c:	42be      	cmp	r6, r7
 800c28e:	d900      	bls.n	800c292 <__ssputs_r+0x72>
 800c290:	463e      	mov	r6, r7
 800c292:	6820      	ldr	r0, [r4, #0]
 800c294:	4632      	mov	r2, r6
 800c296:	4641      	mov	r1, r8
 800c298:	f000 faa8 	bl	800c7ec <memmove>
 800c29c:	68a3      	ldr	r3, [r4, #8]
 800c29e:	1b9b      	subs	r3, r3, r6
 800c2a0:	60a3      	str	r3, [r4, #8]
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	4433      	add	r3, r6
 800c2a6:	6023      	str	r3, [r4, #0]
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ae:	462a      	mov	r2, r5
 800c2b0:	f000 fac6 	bl	800c840 <_realloc_r>
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	d1e0      	bne.n	800c27c <__ssputs_r+0x5c>
 800c2ba:	6921      	ldr	r1, [r4, #16]
 800c2bc:	4650      	mov	r0, sl
 800c2be:	f7ff feb7 	bl	800c030 <_free_r>
 800c2c2:	230c      	movs	r3, #12
 800c2c4:	f8ca 3000 	str.w	r3, [sl]
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ce:	81a3      	strh	r3, [r4, #12]
 800c2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d4:	e7e9      	b.n	800c2aa <__ssputs_r+0x8a>
	...

0800c2d8 <_svfiprintf_r>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	4698      	mov	r8, r3
 800c2de:	898b      	ldrh	r3, [r1, #12]
 800c2e0:	061b      	lsls	r3, r3, #24
 800c2e2:	b09d      	sub	sp, #116	@ 0x74
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	460d      	mov	r5, r1
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	d510      	bpl.n	800c30e <_svfiprintf_r+0x36>
 800c2ec:	690b      	ldr	r3, [r1, #16]
 800c2ee:	b973      	cbnz	r3, 800c30e <_svfiprintf_r+0x36>
 800c2f0:	2140      	movs	r1, #64	@ 0x40
 800c2f2:	f7ff ff09 	bl	800c108 <_malloc_r>
 800c2f6:	6028      	str	r0, [r5, #0]
 800c2f8:	6128      	str	r0, [r5, #16]
 800c2fa:	b930      	cbnz	r0, 800c30a <_svfiprintf_r+0x32>
 800c2fc:	230c      	movs	r3, #12
 800c2fe:	603b      	str	r3, [r7, #0]
 800c300:	f04f 30ff 	mov.w	r0, #4294967295
 800c304:	b01d      	add	sp, #116	@ 0x74
 800c306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30a:	2340      	movs	r3, #64	@ 0x40
 800c30c:	616b      	str	r3, [r5, #20]
 800c30e:	2300      	movs	r3, #0
 800c310:	9309      	str	r3, [sp, #36]	@ 0x24
 800c312:	2320      	movs	r3, #32
 800c314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c318:	f8cd 800c 	str.w	r8, [sp, #12]
 800c31c:	2330      	movs	r3, #48	@ 0x30
 800c31e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4bc <_svfiprintf_r+0x1e4>
 800c322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c326:	f04f 0901 	mov.w	r9, #1
 800c32a:	4623      	mov	r3, r4
 800c32c:	469a      	mov	sl, r3
 800c32e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c332:	b10a      	cbz	r2, 800c338 <_svfiprintf_r+0x60>
 800c334:	2a25      	cmp	r2, #37	@ 0x25
 800c336:	d1f9      	bne.n	800c32c <_svfiprintf_r+0x54>
 800c338:	ebba 0b04 	subs.w	fp, sl, r4
 800c33c:	d00b      	beq.n	800c356 <_svfiprintf_r+0x7e>
 800c33e:	465b      	mov	r3, fp
 800c340:	4622      	mov	r2, r4
 800c342:	4629      	mov	r1, r5
 800c344:	4638      	mov	r0, r7
 800c346:	f7ff ff6b 	bl	800c220 <__ssputs_r>
 800c34a:	3001      	adds	r0, #1
 800c34c:	f000 80a7 	beq.w	800c49e <_svfiprintf_r+0x1c6>
 800c350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c352:	445a      	add	r2, fp
 800c354:	9209      	str	r2, [sp, #36]	@ 0x24
 800c356:	f89a 3000 	ldrb.w	r3, [sl]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 809f 	beq.w	800c49e <_svfiprintf_r+0x1c6>
 800c360:	2300      	movs	r3, #0
 800c362:	f04f 32ff 	mov.w	r2, #4294967295
 800c366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c36a:	f10a 0a01 	add.w	sl, sl, #1
 800c36e:	9304      	str	r3, [sp, #16]
 800c370:	9307      	str	r3, [sp, #28]
 800c372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c376:	931a      	str	r3, [sp, #104]	@ 0x68
 800c378:	4654      	mov	r4, sl
 800c37a:	2205      	movs	r2, #5
 800c37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c380:	484e      	ldr	r0, [pc, #312]	@ (800c4bc <_svfiprintf_r+0x1e4>)
 800c382:	f7f3 fefd 	bl	8000180 <memchr>
 800c386:	9a04      	ldr	r2, [sp, #16]
 800c388:	b9d8      	cbnz	r0, 800c3c2 <_svfiprintf_r+0xea>
 800c38a:	06d0      	lsls	r0, r2, #27
 800c38c:	bf44      	itt	mi
 800c38e:	2320      	movmi	r3, #32
 800c390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c394:	0711      	lsls	r1, r2, #28
 800c396:	bf44      	itt	mi
 800c398:	232b      	movmi	r3, #43	@ 0x2b
 800c39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c39e:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a4:	d015      	beq.n	800c3d2 <_svfiprintf_r+0xfa>
 800c3a6:	9a07      	ldr	r2, [sp, #28]
 800c3a8:	4654      	mov	r4, sl
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	f04f 0c0a 	mov.w	ip, #10
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3b6:	3b30      	subs	r3, #48	@ 0x30
 800c3b8:	2b09      	cmp	r3, #9
 800c3ba:	d94b      	bls.n	800c454 <_svfiprintf_r+0x17c>
 800c3bc:	b1b0      	cbz	r0, 800c3ec <_svfiprintf_r+0x114>
 800c3be:	9207      	str	r2, [sp, #28]
 800c3c0:	e014      	b.n	800c3ec <_svfiprintf_r+0x114>
 800c3c2:	eba0 0308 	sub.w	r3, r0, r8
 800c3c6:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	9304      	str	r3, [sp, #16]
 800c3ce:	46a2      	mov	sl, r4
 800c3d0:	e7d2      	b.n	800c378 <_svfiprintf_r+0xa0>
 800c3d2:	9b03      	ldr	r3, [sp, #12]
 800c3d4:	1d19      	adds	r1, r3, #4
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	9103      	str	r1, [sp, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bfbb      	ittet	lt
 800c3de:	425b      	neglt	r3, r3
 800c3e0:	f042 0202 	orrlt.w	r2, r2, #2
 800c3e4:	9307      	strge	r3, [sp, #28]
 800c3e6:	9307      	strlt	r3, [sp, #28]
 800c3e8:	bfb8      	it	lt
 800c3ea:	9204      	strlt	r2, [sp, #16]
 800c3ec:	7823      	ldrb	r3, [r4, #0]
 800c3ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3f0:	d10a      	bne.n	800c408 <_svfiprintf_r+0x130>
 800c3f2:	7863      	ldrb	r3, [r4, #1]
 800c3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3f6:	d132      	bne.n	800c45e <_svfiprintf_r+0x186>
 800c3f8:	9b03      	ldr	r3, [sp, #12]
 800c3fa:	1d1a      	adds	r2, r3, #4
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	9203      	str	r2, [sp, #12]
 800c400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c404:	3402      	adds	r4, #2
 800c406:	9305      	str	r3, [sp, #20]
 800c408:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c4c0 <_svfiprintf_r+0x1e8>
 800c40c:	7821      	ldrb	r1, [r4, #0]
 800c40e:	2203      	movs	r2, #3
 800c410:	4650      	mov	r0, sl
 800c412:	f7f3 feb5 	bl	8000180 <memchr>
 800c416:	b138      	cbz	r0, 800c428 <_svfiprintf_r+0x150>
 800c418:	9b04      	ldr	r3, [sp, #16]
 800c41a:	eba0 000a 	sub.w	r0, r0, sl
 800c41e:	2240      	movs	r2, #64	@ 0x40
 800c420:	4082      	lsls	r2, r0
 800c422:	4313      	orrs	r3, r2
 800c424:	3401      	adds	r4, #1
 800c426:	9304      	str	r3, [sp, #16]
 800c428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c42c:	4825      	ldr	r0, [pc, #148]	@ (800c4c4 <_svfiprintf_r+0x1ec>)
 800c42e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c432:	2206      	movs	r2, #6
 800c434:	f7f3 fea4 	bl	8000180 <memchr>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d036      	beq.n	800c4aa <_svfiprintf_r+0x1d2>
 800c43c:	4b22      	ldr	r3, [pc, #136]	@ (800c4c8 <_svfiprintf_r+0x1f0>)
 800c43e:	bb1b      	cbnz	r3, 800c488 <_svfiprintf_r+0x1b0>
 800c440:	9b03      	ldr	r3, [sp, #12]
 800c442:	3307      	adds	r3, #7
 800c444:	f023 0307 	bic.w	r3, r3, #7
 800c448:	3308      	adds	r3, #8
 800c44a:	9303      	str	r3, [sp, #12]
 800c44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44e:	4433      	add	r3, r6
 800c450:	9309      	str	r3, [sp, #36]	@ 0x24
 800c452:	e76a      	b.n	800c32a <_svfiprintf_r+0x52>
 800c454:	fb0c 3202 	mla	r2, ip, r2, r3
 800c458:	460c      	mov	r4, r1
 800c45a:	2001      	movs	r0, #1
 800c45c:	e7a8      	b.n	800c3b0 <_svfiprintf_r+0xd8>
 800c45e:	2300      	movs	r3, #0
 800c460:	3401      	adds	r4, #1
 800c462:	9305      	str	r3, [sp, #20]
 800c464:	4619      	mov	r1, r3
 800c466:	f04f 0c0a 	mov.w	ip, #10
 800c46a:	4620      	mov	r0, r4
 800c46c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c470:	3a30      	subs	r2, #48	@ 0x30
 800c472:	2a09      	cmp	r2, #9
 800c474:	d903      	bls.n	800c47e <_svfiprintf_r+0x1a6>
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0c6      	beq.n	800c408 <_svfiprintf_r+0x130>
 800c47a:	9105      	str	r1, [sp, #20]
 800c47c:	e7c4      	b.n	800c408 <_svfiprintf_r+0x130>
 800c47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c482:	4604      	mov	r4, r0
 800c484:	2301      	movs	r3, #1
 800c486:	e7f0      	b.n	800c46a <_svfiprintf_r+0x192>
 800c488:	ab03      	add	r3, sp, #12
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	462a      	mov	r2, r5
 800c48e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4cc <_svfiprintf_r+0x1f4>)
 800c490:	a904      	add	r1, sp, #16
 800c492:	4638      	mov	r0, r7
 800c494:	f3af 8000 	nop.w
 800c498:	1c42      	adds	r2, r0, #1
 800c49a:	4606      	mov	r6, r0
 800c49c:	d1d6      	bne.n	800c44c <_svfiprintf_r+0x174>
 800c49e:	89ab      	ldrh	r3, [r5, #12]
 800c4a0:	065b      	lsls	r3, r3, #25
 800c4a2:	f53f af2d 	bmi.w	800c300 <_svfiprintf_r+0x28>
 800c4a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4a8:	e72c      	b.n	800c304 <_svfiprintf_r+0x2c>
 800c4aa:	ab03      	add	r3, sp, #12
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	462a      	mov	r2, r5
 800c4b0:	4b06      	ldr	r3, [pc, #24]	@ (800c4cc <_svfiprintf_r+0x1f4>)
 800c4b2:	a904      	add	r1, sp, #16
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f000 f879 	bl	800c5ac <_printf_i>
 800c4ba:	e7ed      	b.n	800c498 <_svfiprintf_r+0x1c0>
 800c4bc:	0800d30c 	.word	0x0800d30c
 800c4c0:	0800d312 	.word	0x0800d312
 800c4c4:	0800d316 	.word	0x0800d316
 800c4c8:	00000000 	.word	0x00000000
 800c4cc:	0800c221 	.word	0x0800c221

0800c4d0 <_printf_common>:
 800c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	4616      	mov	r6, r2
 800c4d6:	4698      	mov	r8, r3
 800c4d8:	688a      	ldr	r2, [r1, #8]
 800c4da:	690b      	ldr	r3, [r1, #16]
 800c4dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	bfb8      	it	lt
 800c4e4:	4613      	movlt	r3, r2
 800c4e6:	6033      	str	r3, [r6, #0]
 800c4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	b10a      	cbz	r2, 800c4f6 <_printf_common+0x26>
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	6033      	str	r3, [r6, #0]
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	0699      	lsls	r1, r3, #26
 800c4fa:	bf42      	ittt	mi
 800c4fc:	6833      	ldrmi	r3, [r6, #0]
 800c4fe:	3302      	addmi	r3, #2
 800c500:	6033      	strmi	r3, [r6, #0]
 800c502:	6825      	ldr	r5, [r4, #0]
 800c504:	f015 0506 	ands.w	r5, r5, #6
 800c508:	d106      	bne.n	800c518 <_printf_common+0x48>
 800c50a:	f104 0a19 	add.w	sl, r4, #25
 800c50e:	68e3      	ldr	r3, [r4, #12]
 800c510:	6832      	ldr	r2, [r6, #0]
 800c512:	1a9b      	subs	r3, r3, r2
 800c514:	42ab      	cmp	r3, r5
 800c516:	dc26      	bgt.n	800c566 <_printf_common+0x96>
 800c518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c51c:	6822      	ldr	r2, [r4, #0]
 800c51e:	3b00      	subs	r3, #0
 800c520:	bf18      	it	ne
 800c522:	2301      	movne	r3, #1
 800c524:	0692      	lsls	r2, r2, #26
 800c526:	d42b      	bmi.n	800c580 <_printf_common+0xb0>
 800c528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c52c:	4641      	mov	r1, r8
 800c52e:	4638      	mov	r0, r7
 800c530:	47c8      	blx	r9
 800c532:	3001      	adds	r0, #1
 800c534:	d01e      	beq.n	800c574 <_printf_common+0xa4>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	6922      	ldr	r2, [r4, #16]
 800c53a:	f003 0306 	and.w	r3, r3, #6
 800c53e:	2b04      	cmp	r3, #4
 800c540:	bf02      	ittt	eq
 800c542:	68e5      	ldreq	r5, [r4, #12]
 800c544:	6833      	ldreq	r3, [r6, #0]
 800c546:	1aed      	subeq	r5, r5, r3
 800c548:	68a3      	ldr	r3, [r4, #8]
 800c54a:	bf0c      	ite	eq
 800c54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c550:	2500      	movne	r5, #0
 800c552:	4293      	cmp	r3, r2
 800c554:	bfc4      	itt	gt
 800c556:	1a9b      	subgt	r3, r3, r2
 800c558:	18ed      	addgt	r5, r5, r3
 800c55a:	2600      	movs	r6, #0
 800c55c:	341a      	adds	r4, #26
 800c55e:	42b5      	cmp	r5, r6
 800c560:	d11a      	bne.n	800c598 <_printf_common+0xc8>
 800c562:	2000      	movs	r0, #0
 800c564:	e008      	b.n	800c578 <_printf_common+0xa8>
 800c566:	2301      	movs	r3, #1
 800c568:	4652      	mov	r2, sl
 800c56a:	4641      	mov	r1, r8
 800c56c:	4638      	mov	r0, r7
 800c56e:	47c8      	blx	r9
 800c570:	3001      	adds	r0, #1
 800c572:	d103      	bne.n	800c57c <_printf_common+0xac>
 800c574:	f04f 30ff 	mov.w	r0, #4294967295
 800c578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c57c:	3501      	adds	r5, #1
 800c57e:	e7c6      	b.n	800c50e <_printf_common+0x3e>
 800c580:	18e1      	adds	r1, r4, r3
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	2030      	movs	r0, #48	@ 0x30
 800c586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c58a:	4422      	add	r2, r4
 800c58c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c594:	3302      	adds	r3, #2
 800c596:	e7c7      	b.n	800c528 <_printf_common+0x58>
 800c598:	2301      	movs	r3, #1
 800c59a:	4622      	mov	r2, r4
 800c59c:	4641      	mov	r1, r8
 800c59e:	4638      	mov	r0, r7
 800c5a0:	47c8      	blx	r9
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	d0e6      	beq.n	800c574 <_printf_common+0xa4>
 800c5a6:	3601      	adds	r6, #1
 800c5a8:	e7d9      	b.n	800c55e <_printf_common+0x8e>
	...

0800c5ac <_printf_i>:
 800c5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b0:	7e0f      	ldrb	r7, [r1, #24]
 800c5b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5b4:	2f78      	cmp	r7, #120	@ 0x78
 800c5b6:	4691      	mov	r9, r2
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	469a      	mov	sl, r3
 800c5be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5c2:	d807      	bhi.n	800c5d4 <_printf_i+0x28>
 800c5c4:	2f62      	cmp	r7, #98	@ 0x62
 800c5c6:	d80a      	bhi.n	800c5de <_printf_i+0x32>
 800c5c8:	2f00      	cmp	r7, #0
 800c5ca:	f000 80d2 	beq.w	800c772 <_printf_i+0x1c6>
 800c5ce:	2f58      	cmp	r7, #88	@ 0x58
 800c5d0:	f000 80b9 	beq.w	800c746 <_printf_i+0x19a>
 800c5d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5dc:	e03a      	b.n	800c654 <_printf_i+0xa8>
 800c5de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5e2:	2b15      	cmp	r3, #21
 800c5e4:	d8f6      	bhi.n	800c5d4 <_printf_i+0x28>
 800c5e6:	a101      	add	r1, pc, #4	@ (adr r1, 800c5ec <_printf_i+0x40>)
 800c5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5ec:	0800c645 	.word	0x0800c645
 800c5f0:	0800c659 	.word	0x0800c659
 800c5f4:	0800c5d5 	.word	0x0800c5d5
 800c5f8:	0800c5d5 	.word	0x0800c5d5
 800c5fc:	0800c5d5 	.word	0x0800c5d5
 800c600:	0800c5d5 	.word	0x0800c5d5
 800c604:	0800c659 	.word	0x0800c659
 800c608:	0800c5d5 	.word	0x0800c5d5
 800c60c:	0800c5d5 	.word	0x0800c5d5
 800c610:	0800c5d5 	.word	0x0800c5d5
 800c614:	0800c5d5 	.word	0x0800c5d5
 800c618:	0800c759 	.word	0x0800c759
 800c61c:	0800c683 	.word	0x0800c683
 800c620:	0800c713 	.word	0x0800c713
 800c624:	0800c5d5 	.word	0x0800c5d5
 800c628:	0800c5d5 	.word	0x0800c5d5
 800c62c:	0800c77b 	.word	0x0800c77b
 800c630:	0800c5d5 	.word	0x0800c5d5
 800c634:	0800c683 	.word	0x0800c683
 800c638:	0800c5d5 	.word	0x0800c5d5
 800c63c:	0800c5d5 	.word	0x0800c5d5
 800c640:	0800c71b 	.word	0x0800c71b
 800c644:	6833      	ldr	r3, [r6, #0]
 800c646:	1d1a      	adds	r2, r3, #4
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6032      	str	r2, [r6, #0]
 800c64c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c654:	2301      	movs	r3, #1
 800c656:	e09d      	b.n	800c794 <_printf_i+0x1e8>
 800c658:	6833      	ldr	r3, [r6, #0]
 800c65a:	6820      	ldr	r0, [r4, #0]
 800c65c:	1d19      	adds	r1, r3, #4
 800c65e:	6031      	str	r1, [r6, #0]
 800c660:	0606      	lsls	r6, r0, #24
 800c662:	d501      	bpl.n	800c668 <_printf_i+0xbc>
 800c664:	681d      	ldr	r5, [r3, #0]
 800c666:	e003      	b.n	800c670 <_printf_i+0xc4>
 800c668:	0645      	lsls	r5, r0, #25
 800c66a:	d5fb      	bpl.n	800c664 <_printf_i+0xb8>
 800c66c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c670:	2d00      	cmp	r5, #0
 800c672:	da03      	bge.n	800c67c <_printf_i+0xd0>
 800c674:	232d      	movs	r3, #45	@ 0x2d
 800c676:	426d      	negs	r5, r5
 800c678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c67c:	4859      	ldr	r0, [pc, #356]	@ (800c7e4 <_printf_i+0x238>)
 800c67e:	230a      	movs	r3, #10
 800c680:	e011      	b.n	800c6a6 <_printf_i+0xfa>
 800c682:	6821      	ldr	r1, [r4, #0]
 800c684:	6833      	ldr	r3, [r6, #0]
 800c686:	0608      	lsls	r0, r1, #24
 800c688:	f853 5b04 	ldr.w	r5, [r3], #4
 800c68c:	d402      	bmi.n	800c694 <_printf_i+0xe8>
 800c68e:	0649      	lsls	r1, r1, #25
 800c690:	bf48      	it	mi
 800c692:	b2ad      	uxthmi	r5, r5
 800c694:	2f6f      	cmp	r7, #111	@ 0x6f
 800c696:	4853      	ldr	r0, [pc, #332]	@ (800c7e4 <_printf_i+0x238>)
 800c698:	6033      	str	r3, [r6, #0]
 800c69a:	bf14      	ite	ne
 800c69c:	230a      	movne	r3, #10
 800c69e:	2308      	moveq	r3, #8
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6a6:	6866      	ldr	r6, [r4, #4]
 800c6a8:	60a6      	str	r6, [r4, #8]
 800c6aa:	2e00      	cmp	r6, #0
 800c6ac:	bfa2      	ittt	ge
 800c6ae:	6821      	ldrge	r1, [r4, #0]
 800c6b0:	f021 0104 	bicge.w	r1, r1, #4
 800c6b4:	6021      	strge	r1, [r4, #0]
 800c6b6:	b90d      	cbnz	r5, 800c6bc <_printf_i+0x110>
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	d04b      	beq.n	800c754 <_printf_i+0x1a8>
 800c6bc:	4616      	mov	r6, r2
 800c6be:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6c2:	fb03 5711 	mls	r7, r3, r1, r5
 800c6c6:	5dc7      	ldrb	r7, [r0, r7]
 800c6c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6cc:	462f      	mov	r7, r5
 800c6ce:	42bb      	cmp	r3, r7
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	d9f4      	bls.n	800c6be <_printf_i+0x112>
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	d10b      	bne.n	800c6f0 <_printf_i+0x144>
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	07df      	lsls	r7, r3, #31
 800c6dc:	d508      	bpl.n	800c6f0 <_printf_i+0x144>
 800c6de:	6923      	ldr	r3, [r4, #16]
 800c6e0:	6861      	ldr	r1, [r4, #4]
 800c6e2:	4299      	cmp	r1, r3
 800c6e4:	bfde      	ittt	le
 800c6e6:	2330      	movle	r3, #48	@ 0x30
 800c6e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6f0:	1b92      	subs	r2, r2, r6
 800c6f2:	6122      	str	r2, [r4, #16]
 800c6f4:	f8cd a000 	str.w	sl, [sp]
 800c6f8:	464b      	mov	r3, r9
 800c6fa:	aa03      	add	r2, sp, #12
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	4640      	mov	r0, r8
 800c700:	f7ff fee6 	bl	800c4d0 <_printf_common>
 800c704:	3001      	adds	r0, #1
 800c706:	d14a      	bne.n	800c79e <_printf_i+0x1f2>
 800c708:	f04f 30ff 	mov.w	r0, #4294967295
 800c70c:	b004      	add	sp, #16
 800c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	f043 0320 	orr.w	r3, r3, #32
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	4833      	ldr	r0, [pc, #204]	@ (800c7e8 <_printf_i+0x23c>)
 800c71c:	2778      	movs	r7, #120	@ 0x78
 800c71e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	6831      	ldr	r1, [r6, #0]
 800c726:	061f      	lsls	r7, r3, #24
 800c728:	f851 5b04 	ldr.w	r5, [r1], #4
 800c72c:	d402      	bmi.n	800c734 <_printf_i+0x188>
 800c72e:	065f      	lsls	r7, r3, #25
 800c730:	bf48      	it	mi
 800c732:	b2ad      	uxthmi	r5, r5
 800c734:	6031      	str	r1, [r6, #0]
 800c736:	07d9      	lsls	r1, r3, #31
 800c738:	bf44      	itt	mi
 800c73a:	f043 0320 	orrmi.w	r3, r3, #32
 800c73e:	6023      	strmi	r3, [r4, #0]
 800c740:	b11d      	cbz	r5, 800c74a <_printf_i+0x19e>
 800c742:	2310      	movs	r3, #16
 800c744:	e7ac      	b.n	800c6a0 <_printf_i+0xf4>
 800c746:	4827      	ldr	r0, [pc, #156]	@ (800c7e4 <_printf_i+0x238>)
 800c748:	e7e9      	b.n	800c71e <_printf_i+0x172>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	f023 0320 	bic.w	r3, r3, #32
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	e7f6      	b.n	800c742 <_printf_i+0x196>
 800c754:	4616      	mov	r6, r2
 800c756:	e7bd      	b.n	800c6d4 <_printf_i+0x128>
 800c758:	6833      	ldr	r3, [r6, #0]
 800c75a:	6825      	ldr	r5, [r4, #0]
 800c75c:	6961      	ldr	r1, [r4, #20]
 800c75e:	1d18      	adds	r0, r3, #4
 800c760:	6030      	str	r0, [r6, #0]
 800c762:	062e      	lsls	r6, r5, #24
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	d501      	bpl.n	800c76c <_printf_i+0x1c0>
 800c768:	6019      	str	r1, [r3, #0]
 800c76a:	e002      	b.n	800c772 <_printf_i+0x1c6>
 800c76c:	0668      	lsls	r0, r5, #25
 800c76e:	d5fb      	bpl.n	800c768 <_printf_i+0x1bc>
 800c770:	8019      	strh	r1, [r3, #0]
 800c772:	2300      	movs	r3, #0
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	4616      	mov	r6, r2
 800c778:	e7bc      	b.n	800c6f4 <_printf_i+0x148>
 800c77a:	6833      	ldr	r3, [r6, #0]
 800c77c:	1d1a      	adds	r2, r3, #4
 800c77e:	6032      	str	r2, [r6, #0]
 800c780:	681e      	ldr	r6, [r3, #0]
 800c782:	6862      	ldr	r2, [r4, #4]
 800c784:	2100      	movs	r1, #0
 800c786:	4630      	mov	r0, r6
 800c788:	f7f3 fcfa 	bl	8000180 <memchr>
 800c78c:	b108      	cbz	r0, 800c792 <_printf_i+0x1e6>
 800c78e:	1b80      	subs	r0, r0, r6
 800c790:	6060      	str	r0, [r4, #4]
 800c792:	6863      	ldr	r3, [r4, #4]
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	2300      	movs	r3, #0
 800c798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c79c:	e7aa      	b.n	800c6f4 <_printf_i+0x148>
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	47d0      	blx	sl
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d0ad      	beq.n	800c708 <_printf_i+0x15c>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	079b      	lsls	r3, r3, #30
 800c7b0:	d413      	bmi.n	800c7da <_printf_i+0x22e>
 800c7b2:	68e0      	ldr	r0, [r4, #12]
 800c7b4:	9b03      	ldr	r3, [sp, #12]
 800c7b6:	4298      	cmp	r0, r3
 800c7b8:	bfb8      	it	lt
 800c7ba:	4618      	movlt	r0, r3
 800c7bc:	e7a6      	b.n	800c70c <_printf_i+0x160>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	47d0      	blx	sl
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d09d      	beq.n	800c708 <_printf_i+0x15c>
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	9903      	ldr	r1, [sp, #12]
 800c7d2:	1a5b      	subs	r3, r3, r1
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	dcf2      	bgt.n	800c7be <_printf_i+0x212>
 800c7d8:	e7eb      	b.n	800c7b2 <_printf_i+0x206>
 800c7da:	2500      	movs	r5, #0
 800c7dc:	f104 0619 	add.w	r6, r4, #25
 800c7e0:	e7f5      	b.n	800c7ce <_printf_i+0x222>
 800c7e2:	bf00      	nop
 800c7e4:	0800d31d 	.word	0x0800d31d
 800c7e8:	0800d32e 	.word	0x0800d32e

0800c7ec <memmove>:
 800c7ec:	4288      	cmp	r0, r1
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	eb01 0402 	add.w	r4, r1, r2
 800c7f4:	d902      	bls.n	800c7fc <memmove+0x10>
 800c7f6:	4284      	cmp	r4, r0
 800c7f8:	4623      	mov	r3, r4
 800c7fa:	d807      	bhi.n	800c80c <memmove+0x20>
 800c7fc:	1e43      	subs	r3, r0, #1
 800c7fe:	42a1      	cmp	r1, r4
 800c800:	d008      	beq.n	800c814 <memmove+0x28>
 800c802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c80a:	e7f8      	b.n	800c7fe <memmove+0x12>
 800c80c:	4402      	add	r2, r0
 800c80e:	4601      	mov	r1, r0
 800c810:	428a      	cmp	r2, r1
 800c812:	d100      	bne.n	800c816 <memmove+0x2a>
 800c814:	bd10      	pop	{r4, pc}
 800c816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c81e:	e7f7      	b.n	800c810 <memmove+0x24>

0800c820 <_sbrk_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4d06      	ldr	r5, [pc, #24]	@ (800c83c <_sbrk_r+0x1c>)
 800c824:	2300      	movs	r3, #0
 800c826:	4604      	mov	r4, r0
 800c828:	4608      	mov	r0, r1
 800c82a:	602b      	str	r3, [r5, #0]
 800c82c:	f7f6 fd48 	bl	80032c0 <_sbrk>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d102      	bne.n	800c83a <_sbrk_r+0x1a>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	b103      	cbz	r3, 800c83a <_sbrk_r+0x1a>
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	bd38      	pop	{r3, r4, r5, pc}
 800c83c:	20000c84 	.word	0x20000c84

0800c840 <_realloc_r>:
 800c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	4680      	mov	r8, r0
 800c846:	4615      	mov	r5, r2
 800c848:	460c      	mov	r4, r1
 800c84a:	b921      	cbnz	r1, 800c856 <_realloc_r+0x16>
 800c84c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c850:	4611      	mov	r1, r2
 800c852:	f7ff bc59 	b.w	800c108 <_malloc_r>
 800c856:	b92a      	cbnz	r2, 800c864 <_realloc_r+0x24>
 800c858:	f7ff fbea 	bl	800c030 <_free_r>
 800c85c:	2400      	movs	r4, #0
 800c85e:	4620      	mov	r0, r4
 800c860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c864:	f000 f81a 	bl	800c89c <_malloc_usable_size_r>
 800c868:	4285      	cmp	r5, r0
 800c86a:	4606      	mov	r6, r0
 800c86c:	d802      	bhi.n	800c874 <_realloc_r+0x34>
 800c86e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c872:	d8f4      	bhi.n	800c85e <_realloc_r+0x1e>
 800c874:	4629      	mov	r1, r5
 800c876:	4640      	mov	r0, r8
 800c878:	f7ff fc46 	bl	800c108 <_malloc_r>
 800c87c:	4607      	mov	r7, r0
 800c87e:	2800      	cmp	r0, #0
 800c880:	d0ec      	beq.n	800c85c <_realloc_r+0x1c>
 800c882:	42b5      	cmp	r5, r6
 800c884:	462a      	mov	r2, r5
 800c886:	4621      	mov	r1, r4
 800c888:	bf28      	it	cs
 800c88a:	4632      	movcs	r2, r6
 800c88c:	f7ff fbc2 	bl	800c014 <memcpy>
 800c890:	4621      	mov	r1, r4
 800c892:	4640      	mov	r0, r8
 800c894:	f7ff fbcc 	bl	800c030 <_free_r>
 800c898:	463c      	mov	r4, r7
 800c89a:	e7e0      	b.n	800c85e <_realloc_r+0x1e>

0800c89c <_malloc_usable_size_r>:
 800c89c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a0:	1f18      	subs	r0, r3, #4
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	bfbc      	itt	lt
 800c8a6:	580b      	ldrlt	r3, [r1, r0]
 800c8a8:	18c0      	addlt	r0, r0, r3
 800c8aa:	4770      	bx	lr

0800c8ac <_init>:
 800c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ae:	bf00      	nop
 800c8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b2:	bc08      	pop	{r3}
 800c8b4:	469e      	mov	lr, r3
 800c8b6:	4770      	bx	lr

0800c8b8 <_fini>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	bf00      	nop
 800c8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8be:	bc08      	pop	{r3}
 800c8c0:	469e      	mov	lr, r3
 800c8c2:	4770      	bx	lr
